{"mappings":"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","sources":["src/js/refs.js","src/js/TrendingMovies/renderTrendingMovies.js","src/js/TrendingMovies/renderFoundMovies.js","src/js/TrendingMovies/searchMovie.js","src/js/TrendingMovies/fetchSingleMovie.js","src/js/helpers/createModalMarkup.js","src/index.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('.search-form'),\n  moviesContainer: document.querySelector('.data-container'),\n  moviesList: document.querySelector('.movies-list'),\n  targetObserverMovies: document.querySelector('.js-guard-movies'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.backdrop'),\n  modalWrapper: document.querySelector('.movie-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-movies'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs } from '../refs';\nimport { URLS, genres } from '../constants';\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderTrendingMovies(movies) {\n  const trendingMovies = movies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        vote_average,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${\n              URLS.POSTER_URL\n            }${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n            <p class=\"movie-genres\">Genres: ${\n              genreNames || 'Sorry, no genres available'\n            }</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n          </div>\n     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', trendingMovies);\n}\n","import { refs } from '../refs';\nimport { URLS, genres } from '../constants';\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundMovies(foundMovies) {\n  const foundItems = foundMovies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        release_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${\n              URLS.POSTER_URL\n            }${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"movie-genres\">Release date: ${release_date}</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchMovie(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    // console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  }\n}\n","import axios from 'axios';\nlet isLoading = false;\n\nexport async function fetchSingleMovie(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const dataMovies = response.data;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching a movie:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs } from '../refs';\nimport { URLS } from '../constants';\n\nimport { onBackdropClick, onEscKeyPress } from './onCloseFunctions';\nimport { notifyAddSuccess, notifyIsInFavorites } from './notifyWarnings';\n\nlet favoriteMoviesList =\n  JSON.parse(localStorage.getItem('favorite_movies')) ?? [];\n\nexport async function createModalMarkup(data) {\n  const {\n    id,\n    budget,\n    genres,\n    origin_country,\n    title,\n    original_title,\n    release_date,\n    revenue,\n    runtime,\n    spoken_languages,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languages = spoken_languages\n    .map(language => language.english_name)\n    .join(', ');\n\n  let markup = `<div class=\"movie-item-detailed\" id=${id}>\n        <img src=\"${\n          URLS.POSTER_URL\n        }${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${title}</h2>\n        <h3 class=\"modal-original-title\"><span class=\"modal-bold\">Original title</span>: ${original_title}</h3>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n        <p class=\"orig-country\"><span class=\"modal-bold\">Country of origin:</span> ${origin_country}</p>\n        <p class=\"modal-release-date\"><span class=\"modal-bold\">Release date:</span> ${release_date}</p>\n        <p class=\"modal-movie-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languages}</p>\n        <span class=\"budget\"><span class=\"modal-bold\">Budget:</span> $${(\n          budget / 1000000\n        ).toFixed()} mln</span>\n        <span class=\"revenue\"><span class=\"modal-bold\">Revenue:</span> $${(\n          revenue / 1000000\n        ).toFixed()} mln</span>\n        <p class=\"runtime\"><span class=\"modal-bold\">Time:</span> ${runtime} minutes</p>\n\n         <div class=\"movies-modal-rate\">\n        <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n        <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n        </div>\n\n        <button type=\"button\" class=\"movies-fav\">Add to favorites</button>\n      </div>`;\n\n  refs.backdrop.classList.remove('is-hidden');\n  refs.modalWrapper.innerHTML = markup;\n\n  refs.backdrop.addEventListener('click', event =>\n    onBackdropClick(event, onModalClose)\n  );\n  window.addEventListener('keydown', event =>\n    onEscKeyPress(event, onModalClose)\n  );\n  refs.closeBtn.addEventListener('click', onModalClose);\n\n  /* ======================  ADD TO FAVORITES ======================  */\n  const addFavBtn = document.querySelector('.movies-fav');\n  addFavBtn.addEventListener('click', () => addToFavorites(data));\n}\n\nfunction onModalClose() {\n  refs.modalWrapper.innerHTML = '';\n\n  refs.backdrop.classList.add('is-hidden');\n\n  refs.backdrop.removeEventListener('click', onModalClose);\n  refs.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction addToFavorites(movie) {\n  const inStorage = favoriteMoviesList.some(fav => fav.id === movie.id);\n  const movieItem = {\n    id: movie.id,\n    title: movie.title,\n    origTitle: movie.original_title,\n    budget: movie.budget,\n    languages: movie.spoken_languages,\n    genres: movie.genres,\n    originCountry: movie.origin_country,\n    releaseDate: movie.release_date,\n    posterPath: movie.poster_path,\n    revenue: movie.revenue,\n    runtime: movie.runtime,\n    overview: movie.overview,\n    voteAverage: movie.vote_average,\n    voteCount: movie.vote_count,\n  };\n\n  if (!inStorage) {\n    favoriteMoviesList.push(movieItem);\n    localStorage.setItem('favorite_movies', JSON.stringify(favoriteMoviesList));\n    notifyAddSuccess(movie.title);\n  } else {\n    notifyIsInFavorites(movie.title);\n  }\n}\n","import { refs } from './js/refs';\nimport axios from 'axios';\nimport {\n  URLS,\n  trendingObserverOptions,\n  searchObserverOptions,\n} from './js/constants.js';\n\nimport { renderTrendingMovies } from './js/TrendingMovies/renderTrendingMovies.js';\nimport { renderFoundMovies } from './js/TrendingMovies/renderFoundMovies.js';\n\nimport { searchMovie } from './js/TrendingMovies/searchMovie.js';\nimport { fetchSingleMovie } from './js/TrendingMovies/fetchSingleMovie.js';\nimport { createModalMarkup } from './js/helpers/createModalMarkup.js';\nimport {\n  notifyEndResults,\n  notifyNoResults,\n} from './js/helpers/notifyWarnings.js';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isSearching = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingMovies(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs.targetObserverMovies);\n    }\n    const dataMovies = response.data.results;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingMovies(API_KEY, URLS.BASE_MOVIES_URL, currentPage).then(\n        data => renderTrendingMovies(data)\n      );\n    }\n  });\n}\n\nfetchTrendingMovies(API_KEY, URLS.BASE_MOVIES_URL, currentPage)\n  .then(data => renderTrendingMovies(data))\n  .then(() => trendingObserver.observe(refs.targetObserverMovies))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\nrefs.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs.targetObserverMovies);\n  searchObserver.unobserve(refs.targetObserverSearch);\n\n  refs.backdrop.classList.add('is-hidden');\n  query = refs.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs.moviesList.innerHTML = '';\n    refs.endResultsInfo.classList.add('visually-hidden');\n\n    const moviesData = await searchMovie(\n      API_KEY,\n      URLS.SEARCH_MOVIE_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = moviesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundMovies(results);\n      searchObserver.observe(refs.targetObserverSearch);\n    } else {\n      refs.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      moviesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching movies:', error.message);\n  } finally {\n    refs.form.searchQuery.value = '';\n  }\n}\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchMovie(\n        API_KEY,\n        URLS.SEARCH_MOVIE_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundMovies(results);\n      });\n    }\n  });\n}\n\n/* ======================  MOVIE'S DETAILS ======================  */\n\nrefs.moviesContainer.addEventListener('click', onMoviesItemClick);\n\nasync function onMoviesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.movies-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n    createModalMarkup(data);\n  }\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","moviesContainer","moviesList","targetObserverMovies","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$1a8959e2dc25037b$export$ae4a60d31ab53252","movies","trendingMovies","map","id","genre_ids","original_title","overview","vote_average","poster_path","genreNames","genre","$8G1wF","genres","find","g","name","filter","Boolean","join","$1a8959e2dc25037b$var$getGenres","URLS","POSTER_URL","toFixed","insertAdjacentHTML","$bc18366c6f858d9b$export$e70f4eb8e1a081ef","foundMovies","foundItems","release_date","vote_count","$bc18366c6f858d9b$var$getGenres","$2shzp","parcelRequire","async","$866ecd266b5ad440$export$dd14e5c8db127693","key","url","searchQuery","page","default","get","error","console","log","message","$e44c4f975600d5d9$var$isLoading","$e44c4f975600d5d9$export$7206e9da159570de","response","data","$68ff11cd958e5ad3$var$ref","$68ff11cd958e5ad3$var$favoriteMoviesList","JSON","parse","localStorage","getItem","$68ff11cd958e5ad3$export$fc0ff788b21a7621","budget","origin_country","title","revenue","runtime","spoken_languages","languages","language","english_name","markup","classList","remove","innerHTML","addEventListener","event","$6Ipdt","onBackdropClick","$68ff11cd958e5ad3$var$onModalClose","window","onEscKeyPress","movie","inStorage","some","fav","movieItem","origTitle","originCountry","releaseDate","posterPath","voteAverage","voteCount","$kj8Rd","notifyIsInFavorites","push","setItem","stringify","notifyAddSuccess","$68ff11cd958e5ad3$var$addToFavorites","add","removeEventListener","$1f0dc3b9307be026$var$query","$1f0dc3b9307be026$var$currentPage","$1f0dc3b9307be026$var$currentSearchPage","$1f0dc3b9307be026$var$fetchTrendingMovies","currentPage1","isLoading","total_pages","notifyEndResults","$1f0dc3b9307be026$var$trendingObserver","unobserve","results","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","BASE_MOVIES_URL","then","trendingObserverOptions","observe","catch","err","e","preventDefault","$1f0dc3b9307be026$var$searchObserver","value","trim","moviesData","SEARCH_MOVIE_URL","total_results","length","notifyNoResults","dataFound","searchObserverOptions","targetElement","target","closest","dataId","getAttribute","SINGLE_MOVIE_URL"],"version":3,"file":"index.d92a11d5.js.map"}