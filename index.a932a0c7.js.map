{"mappings":"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","sources":["src/js/refs.js","src/js/TrendingMovies/renderTrendingMovies.js","src/js/TrendingMovies/renderFoundMovies.js","src/js/TrendingMovies/searchMovie.js","src/js/TrendingMovies/fetchSingleMovie.js","src/js/helpers/createModalMarkup.js","src/index.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('.search-form'),\n  moviesContainer: document.querySelector('.data-container'),\n  moviesList: document.querySelector('.movies-list'),\n  targetObserverMovies: document.querySelector('.js-guard-movies'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.backdrop'),\n  modalWrapper: document.querySelector('.movie-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-movies'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs } from '../refs';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderTrendingMovies(movies) {\n  const trendingMovies = movies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        vote_average,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n            <p class=\"movie-genres\">Genres: ${\n              genreNames || 'Sorry, no genres available'\n            }</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n          </div>\n     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', trendingMovies);\n}\n","import { refs } from '../refs';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundMovies(foundMovies) {\n  const foundItems = foundMovies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        release_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"movie-genres\">Release date: ${release_date}</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchMovie(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    // console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  }\n}\n","import axios from 'axios';\nlet isLoading = false;\n\nexport async function fetchSingleMovie(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const dataMovies = response.data;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching a movie:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\n// import axios from 'axios';\n// import { refs } from '../refs';\n// import { URLS } from '../constants';\n// import { createModalMarkup } from '../helpers/createModalMarkup';\n// const API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\n// export async function fetchSingleMovie(key, url, id) {\n//   try {\n//     isLoading = true;\n//     const response = await axios.get(`${url}/${id}?api_key=${key}`);\n//     console.log(response);\n//     const dataMovies = response.data;\n//     return dataMovies;\n//   } catch (error) {\n//     console.log('Error fetching a movie:', error.message);\n//   } finally {\n//     isLoading = false;\n//   }\n// }\n\n// if (refs?.moviesContainer) {\n//   refs.moviesContainer.addEventListener('click', onModalOpen);\n// }\n\n// async function onModalOpen(e) {\n//   e.preventDefault();\n//   const targetElement = e.target.closest('.movies-item');\n//   if (targetElement) {\n//     const dataId = targetElement.getAttribute('data-id');\n//     const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n//     createModalMarkup(data);\n//     // window.addEventListener('keydown', onEscKeyPress);\n//     refs.backdrop.addEventListener('click', onBackdropClick);\n//   }\n// }\n\n// // function onEscKeyPress(event) {\n// //   if (event.code === 'Escape') {\n// //     onModalClose();\n// //   }\n// // }\n\n// function onBackdropClick(event) {\n//   if (event.currentTarget === event.target) {\n//     onModalClose();\n//   }\n// }\n\n// function onModalClose() {\n//   refs.modalWrapper.innerHTML = '';\n\n//   refs.backdrop.classList.toggle('is-hidden');\n//   // document.body.classList.remove('modal-open');\n\n//   // refs.backdrop.removeEventListener('click', onModalClose);\n//   // refs.closeBtn.removeEventListener('click', onModalClose);\n//   window.removeEventListener('keydown', onEscKeyPress);\n// }\n","import { refs } from '../refs';\nimport { notifyAddSuccess, notifyIsInFavorites } from './notifyWarnings';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nlet favoriteMoviesList =\n  JSON.parse(localStorage.getItem('favorite_movies')) ?? [];\n\nexport async function createModalMarkup(data) {\n  const {\n    id,\n    budget,\n    genres,\n    origin_country,\n    title,\n    original_title,\n    release_date,\n    revenue,\n    runtime,\n    spoken_languages,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languages = spoken_languages\n    .map(language => language.english_name)\n    .join(', ');\n\n  let markup = `<div class=\"movie-item-detailed\" id=${id}>\n        <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${title}</h2>\n        <h3 class=\"modal-original-title\"><span class=\"modal-bold\">Original title</span>: ${original_title}</h3>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n        <p class=\"orig-country\"><span class=\"modal-bold\">Country of origin:</span> ${origin_country}</p>\n        <p class=\"modal-release-date\"><span class=\"modal-bold\">Release date:</span> ${release_date}</p>\n        <p class=\"modal-movie-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languages}</p>\n        <span class=\"budget\"><span class=\"modal-bold\">Budget:</span> $${(\n          budget / 1000000\n        ).toFixed()} mln</span>\n        <span class=\"revenue\"><span class=\"modal-bold\">Revenue:</span> $${(\n          revenue / 1000000\n        ).toFixed()} mln</span>\n        <p class=\"runtime\"><span class=\"modal-bold\">Time:</span> ${runtime} minutes</p>\n\n         <div class=\"movies-modal-rate\">\n        <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n        <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n        </div>\n\n        <button type=\"button\" class=\"movies-fav\">Add to favorites</button>\n      </div>`;\n\n  refs.backdrop.classList.remove('is-hidden');\n  refs.modalWrapper.innerHTML = markup;\n\n  refs.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs.closeBtn.addEventListener('click', onModalClose);\n\n  /* ======================  ADD TO FAVORITES ======================  */\n  const addFavBtn = document.querySelector('.movies-fav');\n  addFavBtn.addEventListener('click', () => addToFavorites(data));\n}\n\nfunction onModalClose() {\n  refs.modalWrapper.innerHTML = '';\n\n  refs.backdrop.classList.add('is-hidden');\n\n  refs.backdrop.removeEventListener('click', onModalClose);\n  refs.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n\nfunction addToFavorites(movie) {\n  const inStorage = favoriteMoviesList.some(fav => fav.id === movie.id);\n  const movieItem = {\n    id: movie.id,\n    title: movie.title,\n    origTitle: movie.original_title,\n    budget: movie.budget,\n    languages: movie.spoken_languages,\n    genres: movie.genres,\n    originCountry: movie.origin_country,\n    releaseDate: movie.release_date,\n    posterPath: movie.poster_path,\n    revenue: movie.revenue,\n    runtime: movie.runtime,\n    overview: movie.overview,\n    voteAverage: movie.vote_average,\n    voteCount: movie.vote_count,\n  };\n\n  if (!inStorage) {\n    favoriteMoviesList.push(movieItem);\n    localStorage.setItem('favorite_movies', JSON.stringify(favoriteMoviesList));\n    notifyAddSuccess(movie.title);\n  } else {\n    notifyIsInFavorites(movie.title);\n  }\n}\n","import { refs } from './js/refs';\nimport axios from 'axios';\nimport { URLS } from './js/constants.js';\n\nimport { renderTrendingMovies } from './js/TrendingMovies/renderTrendingMovies.js';\nimport { renderFoundMovies } from './js/TrendingMovies/renderFoundMovies.js';\n\nimport { searchMovie } from './js/TrendingMovies/searchMovie.js';\nimport { fetchSingleMovie } from './js/TrendingMovies/fetchSingleMovie.js';\nimport { createModalMarkup } from './js/helpers/createModalMarkup.js';\nimport {\n  notifyEndResults,\n  notifyNoResults,\n} from './js/helpers/notifyWarnings.js';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isSearching = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingMovies(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs.targetObserverMovies);\n    }\n    const dataMovies = response.data.results;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingMovies(API_KEY, URLS.BASE_MOVIES_URL, currentPage).then(\n        data => renderTrendingMovies(data)\n      );\n    }\n  });\n}\n\nfetchTrendingMovies(API_KEY, URLS.BASE_MOVIES_URL, currentPage)\n  .then(data => renderTrendingMovies(data))\n  .then(() => trendingObserver.observe(refs.targetObserverMovies))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\nrefs.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs.targetObserverMovies);\n  searchObserver.unobserve(refs.targetObserverSearch);\n\n  refs.backdrop.classList.add('is-hidden');\n  query = refs.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs.moviesList.innerHTML = '';\n    refs.endResultsInfo.classList.add('visually-hidden');\n\n    const moviesData = await searchMovie(\n      API_KEY,\n      URLS.SEARCH_MOVIE_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = moviesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundMovies(results);\n      searchObserver.observe(refs.targetObserverSearch);\n    } else {\n      refs.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      moviesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching movies:', error.message);\n  } finally {\n    refs.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchMovie(\n        API_KEY,\n        URLS.SEARCH_MOVIE_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundMovies(results);\n      });\n    }\n  });\n}\n\n/* ======================  MOVIE'S DETAILS ======================  */\n\nrefs.moviesContainer.addEventListener('click', onMoviesItemClick);\n\nasync function onMoviesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.movies-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n    createModalMarkup(data);\n  }\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","moviesContainer","moviesList","targetObserverMovies","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$1a8959e2dc25037b$export$ae4a60d31ab53252","movies","trendingMovies","map","id","genre_ids","original_title","overview","vote_average","poster_path","genreNames","genre","$8G1wF","genres","find","g","name","filter","Boolean","join","$1a8959e2dc25037b$var$getGenres","toFixed","insertAdjacentHTML","$bc18366c6f858d9b$export$e70f4eb8e1a081ef","foundMovies","foundItems","release_date","vote_count","$bc18366c6f858d9b$var$getGenres","$2shzp","parcelRequire","async","$866ecd266b5ad440$export$dd14e5c8db127693","key","url","searchQuery","page","default","get","error","console","log","message","$e44c4f975600d5d9$var$isLoading","$e44c4f975600d5d9$export$7206e9da159570de","response","data","$68ff11cd958e5ad3$var$ref","$68ff11cd958e5ad3$var$favoriteMoviesList","JSON","parse","localStorage","getItem","$68ff11cd958e5ad3$export$fc0ff788b21a7621","budget","origin_country","title","revenue","runtime","spoken_languages","markup","language","english_name","classList","remove","innerHTML","addEventListener","$68ff11cd958e5ad3$var$onBackdropClick","window","$68ff11cd958e5ad3$var$onEscKeyPress","$68ff11cd958e5ad3$var$onModalClose","movie","inStorage","some","fav","movieItem","origTitle","languages","originCountry","releaseDate","posterPath","voteAverage","voteCount","$kj8Rd","notifyIsInFavorites","push","setItem","stringify","notifyAddSuccess","$68ff11cd958e5ad3$var$addToFavorites","add","removeEventListener","event","code","currentTarget","target","$1f0dc3b9307be026$var$query","$1f0dc3b9307be026$var$currentPage","$1f0dc3b9307be026$var$currentSearchPage","$1f0dc3b9307be026$var$fetchTrendingMovies","currentPage1","isLoading","total_pages","notifyEndResults","$1f0dc3b9307be026$var$trendingObserver","unobserve","results","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","URLS","BASE_MOVIES_URL","then","root","rootMargin","threshold","observe","catch","err","e","preventDefault","$1f0dc3b9307be026$var$searchObserver","value","trim","moviesData","SEARCH_MOVIE_URL","total_results","length","notifyNoResults","dataFound","targetElement","closest","dataId","getAttribute","SINGLE_MOVIE_URL"],"version":3,"file":"index.a932a0c7.js.map"}