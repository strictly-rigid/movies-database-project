{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,aCAaC,EAAO,CAClBC,KAAMC,SAASC,cAAc,gBAC7BC,gBAAiBF,SAASC,cAAc,mBACxCE,WAAYH,SAASC,cAAc,gBACnCG,qBAAsBJ,SAASC,cAAc,oBAC7CI,qBAAsBL,SAASC,cAAc,oBAC7CK,SAAUN,SAASC,cAAc,aACjCM,aAAcP,SAASC,cAAc,uBACrCO,eAAgBR,SAASC,cAAc,2BACvCQ,SAAUT,SAASC,cAAc,qB,uCCM5B,SAASS,EAAqBC,GACnC,IAAMC,EAAiBD,EACpBE,KACC,SAAAC,G,IACEC,EAAED,EAAFC,GACAC,EAASF,EAATE,UACAC,EAAcH,EAAdG,eACAC,EAAQJ,EAARI,SACAC,EAAYL,EAAZK,aACAC,EAAWN,EAAXM,YAEMC,EArBd,SAAmBL,GACjB,OAAOA,EACJH,KAAI,SAAAE,GACH,IAAMO,EAAQC,EAAAC,OAAOC,MAAK,SAAAC,G,OAAKA,EAAEX,KAAOA,C,IACxC,OAAOO,EAAQA,EAAMK,KAAO,E,IAE7BC,OAAOC,SACPC,KAAK,K,CAciBC,CAAUf,GAC7B,MAAO,mCACSgB,OAD0BjB,EAAG,6BAChBiB,OAzBjB,mCA2BkBA,OAFDZ,EAAY,0HAGNY,OADLf,EAAe,oDAGvCe,OAF6Bd,EAAS,sDAILc,OAFjCX,GAAc,6BACf,uDAC0DW,OAAxBb,EAAac,QAAQ,GAAG,qD,IAMlEH,KAAK,IAERhC,EAAKK,WAAW+B,mBAAmB,YAAatB,E,cC5B3C,SAASuB,EAAkBC,GAChC,IAAMC,EAAaD,EAChBvB,KACC,SAAAC,G,IACEC,EAAED,EAAFC,GACAC,EAASF,EAATE,UACAC,EAAcH,EAAdG,eACAC,EAAQJ,EAARI,SACAoB,EAAYxB,EAAZwB,aACAnB,EAAYL,EAAZK,aACAoB,EAAUzB,EAAVyB,WACAnB,EAAWN,EAAXM,YAEMC,EAvBd,SAAmBL,GACjB,OAAOA,EACJH,KAAI,SAAAE,GACH,IAAMO,EAAQC,EAAAC,OAAOC,MAAK,SAAAC,G,OAAKA,EAAEX,KAAOA,C,IACxC,OAAOO,EAAQA,EAAMK,KAAO,E,IAE7BC,OAAOC,SACPC,KAAK,K,CAgBiBU,CAAUxB,GAE7B,MAAO,mCACSgB,OAD0BjB,EAAG,6BAChBiB,OA5BjB,mCA8BkBA,OAFDZ,EAAY,0HAGNY,OADLf,EAAe,oDAGrCe,OAF2Bd,EAAS,wDAIIc,OAFxCX,GAAc,6BACf,gEAEgCW,OADSM,EAAa,uDAENN,OADhBb,EAAac,QAAQ,GAAG,2EACGD,OAAXO,EAAW,mD,IAKrET,KAAK,IAERhC,EAAKK,WAAW+B,mBAAmB,YAAaG,E,CC/ClDzC,EAAAC,EAAA,S,mCAEsB4C,EAAYC,EAAKC,EAAKC,EAAaC,G,OAAnCC,EAAWC,MAAAC,KAAAC,U,UAAXH,I,OAAAA,EAAfI,EAAAtD,EAAA,CAAAsD,EAAAC,GAAAC,MAAA,SAAAC,EAA2BX,EAAKC,EAAKC,EAAaC,G,IAE/CS,E,2FAAiBC,EAAAC,QAAMC,IAC3B,GAAkBzB,OAAfW,EAAI,aAAwBX,OAAbU,EAAI,WAA6BV,OAApBY,EAAY,UAAaZ,OAALa,I,cAD/CS,EAAQI,EAAAC,K,kBAIPL,G,gCAEPM,QAAQC,IAAI,kCAAmCH,EAAAI,GAAMC,S,0DARxBhB,MAAAC,KAAAC,U,CCFjCrD,EAAAC,EAAA,S,mCAGsBmE,EAAiBtB,EAAKC,EAAK5B,G,OAA3BkD,EAAgBlB,MAAAC,KAAAC,U,UAAhBgB,I,OAAAA,EAAff,EAAAtD,EAAA,CAAAsD,EAAAC,GAAAC,MAAA,SAAAC,EAAgCX,EAAKC,EAAK5B,G,IAGvCuC,EAEAY,E,mFAHM,E,SACWX,EAAAC,QAAMC,IAAI,GAAUzB,OAAPW,EAAI,KAAiBX,OAAdjB,EAAG,aAAeiB,OAAJU,I,cAAnDY,EAAQI,EAAAC,KACdC,QAAQC,IAAIP,GACNY,EAAaZ,EAASa,K,kBACrBD,G,kCAEPN,QAAQC,IAAI,0BAA2BH,EAAAI,GAAMC,S,0BAEjC,E,8EAVsBhB,MAAAC,KAAAC,U,CCHtCrD,EAAAC,EAAA,S,aAAA,IAMEuE,E,aAHIC,EAAc,kCAEhBC,EACiD,QAAnDF,EAAAG,KAAKC,MAAMC,aAAaC,QAAQ,2BAAmB,IAAnDN,IAAuD,G,SAEnCO,EAAkBR,G,OAAlBS,EAAiB7B,MAAAC,KAAAC,U,UAAjB2B,I,OAAAA,EAAf1B,EAAAtD,EAAA,CAAAsD,EAAAC,GAAAC,MAAA,SAAAC,EAAiCc,G,IAEpCpD,EACA8D,EACArD,EACAsD,EACAC,EACA9D,EACAqB,EACA0C,EACAC,EACAC,EACA/D,EACAoB,EACArB,EACAE,EAGIC,EACA8D,EAIFC,E,kEArBFrE,EAcEoD,EAdFpD,GACA8D,EAaEV,EAbFU,OACArD,EAYE2C,EAZF3C,OACAsD,EAWEX,EAXFW,eACAC,EAUEZ,EAVFY,MACA9D,EASEkD,EATFlD,eACAqB,EAQE6B,EARF7B,aACA0C,EAOEb,EAPFa,QACAC,EAMEd,EANFc,QACAC,EAKEf,EALFe,iBACA/D,EAIEgD,EAJFhD,aACAoB,EAGE4B,EAHF5B,WACArB,EAEEiD,EAFFjD,SACAE,EACE+C,EADF/C,YAGIC,EAAaG,EAAOX,KAAI,SAAAS,G,OAASA,EAAMK,I,IAAMG,KAAK,MAClDqD,EAAYD,EACfrE,KAAI,SAAAwE,G,OAAYA,EAASC,Y,IACzBxD,KAAK,MAEJsD,EAAS,uCACKpD,OADkCjB,EAAG,yBACxBiB,OAAbqC,GACcrC,OADDZ,EAAY,gFAE8CY,OADzD+C,EAAM,oGAEkC/C,OADiBf,EAAe,mFAErBe,OADXX,EAAW,6FAECW,OADD8C,EAAe,8FAEX9C,OADHM,EAAa,iGAElBN,OADQd,EAAS,yFAE1Bc,OADSmD,EAAU,gFAIjBnD,QAFhE6C,EAAS,KACT5C,UAAU,yFAI+CD,QAFzDgD,EAAU,KACV/C,UAAU,kFAImDD,OAHJiD,EAAQ,mIAIKjD,OADTb,EAAa,2FACOa,OAAXO,EAAW,uHAMzFzC,EAAKQ,SAASiF,UAAUC,OAAO,aAC/B1F,EAAKS,aAAakF,UAAYL,EAE9BtF,EAAKQ,SAASoF,iBAAiB,QAASC,GACxCC,OAAOF,iBAAiB,UAAWG,GACnC/F,EAAKW,SAASiF,iBAAiB,QAASI,GAGtB9F,SAASC,cAAc,eAC/ByF,iBAAiB,SAAS,W,OAAMK,EAAe5B,E,iDAzDpBpB,MAAAC,KAAAC,U,CA4DvC,SAAS6C,IACPhG,EAAKS,aAAakF,UAAY,GAE9B3F,EAAKQ,SAASiF,UAAUS,IAAI,aAE5BlG,EAAKQ,SAAS2F,oBAAoB,QAASH,GAC3ChG,EAAKW,SAASwF,oBAAoB,QAASH,GAC3CF,OAAOK,oBAAoB,UAAWJ,E,CAGxC,SAASA,EAAcK,GACF,WAAfA,EAAMC,MACRL,G,CAIJ,SAASH,EAAgBO,GACnBA,EAAME,gBAAkBF,EAAMG,QAChCP,G,CAIJ,SAASC,EAAeO,GACtB,IAAMC,EAAYjC,EAAmBkC,MAAK,SAAAC,G,OAAOA,EAAI1F,KAAOuF,EAAMvF,E,IAC5D2F,EAAY,CAChB3F,GAAIuF,EAAMvF,GACVgE,MAAOuB,EAAMvB,MACb4B,UAAWL,EAAMrF,eACjB4D,OAAQyB,EAAMzB,OACdM,UAAWmB,EAAMpB,iBACjB1D,OAAQ8E,EAAM9E,OACdoF,cAAeN,EAAMxB,eACrB+B,YAAaP,EAAMhE,aACnBwE,WAAYR,EAAMlF,YAClB4D,QAASsB,EAAMtB,QACfC,QAASqB,EAAMrB,QACf/D,SAAUoF,EAAMpF,SAChB6F,YAAaT,EAAMnF,aACnB6F,UAAWV,EAAM/D,YAGdgE,GAKH,EAAAU,EAAAC,qBAAoBZ,EAAMvB,QAJ1BT,EAAmB6C,KAAKT,GACxBjC,aAAa2C,QAAQ,kBAAmB7C,KAAK8C,UAAU/C,KACvD,EAAA2C,EAAAK,kBAAiBhB,EAAMvB,O,kBNjGrBwC,EAAU,mCAGZC,EAAQ,GACRC,EAAc,EACdC,EAAoB,E,SAKTC,EAAoBjF,EAAKC,EAAKiF,G,OAA9BC,EAAmB9E,MAAAC,KAAAC,U,UAAnB4E,I,OAAAA,EAAf3E,EAAAtD,EAAA,CAAAsD,EAAAC,GAAAC,MAAA,SAAAC,EAAmCX,EAAKC,EAAKiF,G,IAGnCtE,EAQAY,E,kFATN4D,WAAY,E,SACWvE,EAAAC,QAAMC,IAC3B,GAAkBzB,OAAfW,EAAI,aAAuBX,OAAZU,EAAI,UAAoBV,OAAZ4F,I,cAD1BtE,EAAQI,EAAAC,MAIDQ,KAAK4D,cAAgBL,KAChC,EAAAT,EAAAe,oBACAC,EAAiBC,UAAUpI,EAAKM,uBAE5B8D,EAAaZ,EAASa,KAAKgE,Q,kBAC1BjE,G,kCAEPN,QAAQC,IAAI,kCAAmCH,EAAAI,GAAMC,S,yBAErD+D,WAAY,E,8EAhBkB/E,MAAAC,KAAAC,U,CAoBlC,IAMIgF,EAAmB,IAAIG,sBAI3B,SAA4BC,EAASC,GACnC1E,QAAQC,IAAIwE,GACZA,EAAQE,SAAQ,SAAAC,GACVA,EAAMC,iBACRhB,GAAe,EACfE,EAAoBJ,EAAShG,EAAAmH,KAAKC,gBAAiBlB,GAAamB,MAC9D,SAAAzE,G,OAAQzD,EAAqByD,E,UAhBL,CAC9B0E,KAAM,KACNC,WAAY,QACZC,UAAW,I,SA2BEC,I,OAAAA,EAAf9F,EAAAtD,EAAA,CAAAsD,EAAAC,GAAAC,MAAA,SAAAC,EAA4B4F,G,IAclBC,EAO6BC,EAA3BhB,EAASiB,E,yEApBnBH,EAAEI,iBAEFpB,EAAiBC,UAAUpI,EAAKM,sBAChCkJ,EAAepB,UAAUpI,EAAKO,sBAE9BP,EAAKQ,SAASiF,UAAUS,IAAI,aAC5BwB,EAAQ1H,EAAKC,KAAK6C,YAAY2G,MAAMC,OACpC9B,EAAoB,E,SAGlB5H,EAAKK,WAAWsF,UAAY,GAC5B3F,EAAKU,eAAe+E,UAAUS,IAAI,mB,UAETvD,EACvB8E,EACAhG,EAAAmH,KAAKe,iBACLjC,EACAE,G,QAJIwB,EAAUxF,EAAAC,KAOmBwF,EAAAD,EAAW/E,KAAtCgE,EAA2BgB,EAA3BhB,QAASiB,EAAkBD,EAAlBC,cAEbjB,GAAWA,EAAQuB,OAAS,GAC9BvH,EAAkBgG,GAClBmB,EAAeK,QAAQ7J,EAAKO,wBAE5BP,EAAKU,eAAe+E,UAAUC,OAAO,oBACrC,EAAAyB,EAAA2C,oBAIAR,GACAA,GAAiB,IACjBF,EAAW/E,KAAK4D,cAAgBL,KAEhC,EAAAT,EAAAe,oBACAsB,EAAepB,UAAUpI,EAAKO,uB,kDAGhCuD,QAAQC,IAAI,yBAA0BH,EAAAI,GAAMC,S,yBAE5CjE,EAAKC,KAAK6C,YAAY2G,MAAQ,G,8EA1CPxG,MAAAC,KAAAC,U,CAR3B0E,EAAoBJ,EAAShG,EAAAmH,KAAKC,gBAAiBlB,GAChDmB,MAAK,SAAAzE,G,OAAQzD,EAAqByD,E,IAClCyE,MAAK,W,OAAMX,EAAiB0B,QAAQ7J,EAAKM,qB,IACzCyJ,OAAM,SAAAC,G,OAAOlG,QAAQC,IAAIiG,E,IAG5BhK,EAAKC,KAAK2F,iBAAiB,U,SAECuD,G,OAAbD,EAAYjG,MAAAC,KAAAC,U,IA8C3B,IAMIqG,EAAiB,IAAIlB,sBAKzB,SAA0BC,GACxBA,EAAQE,SAAQ,SAAAC,GACVA,EAAMC,iBACRf,GAAqB,EACrBjF,EACE8E,EACAhG,EAAAmH,KAAKe,iBACLjC,EACAE,GACAkB,MAAK,SAAAmB,GAEL5H,EADoB4H,EAAU5F,KAAtBgE,Q,UArBc,CAC5BU,KAAM,KACNC,WAAY,QACZC,UAAW,I,SA6BEiB,I,OAAAA,EAAf9G,EAAAtD,EAAA,CAAAsD,EAAAC,GAAAC,MAAA,SAAAC,EAAiC4F,G,IAGzBgB,EAEEC,E,qEAJRjB,EAAEI,mBAEIY,EAAgBhB,EAAE5C,OAAO8D,QAAQ,iBACtB,C,sBACTD,EAASD,EAAcG,aAAa,W,SACvBpG,EAAiBuD,EAAShG,EAAAmH,KAAK2B,iBAAkBH,G,OACpEvF,EADUjB,EAAAC,M,4CANkBZ,MAAAC,KAAAC,U,CAFhCnD,EAAKI,gBAAgBwF,iBAAiB,S,SAELuD,G,OAAlBe,EAAiBjH,MAAAC,KAAAC,U","sources":["src/index.js","src/js/refs.js","src/js/TrendingMovies/renderTrendingMovies.js","src/js/TrendingMovies/renderFoundMovies.js","src/js/TrendingMovies/searchMovie.js","src/js/TrendingMovies/fetchSingleMovie.js","src/js/helpers/createModalMarkup.js"],"sourcesContent":["import { refs } from './js/refs';\nimport axios from 'axios';\nimport { URLS } from './js/constants.js';\n\nimport { renderTrendingMovies } from './js/TrendingMovies/renderTrendingMovies.js';\nimport { renderFoundMovies } from './js/TrendingMovies/renderFoundMovies.js';\n\nimport { searchMovie } from './js/TrendingMovies/searchMovie.js';\nimport { fetchSingleMovie } from './js/TrendingMovies/fetchSingleMovie.js';\nimport { createModalMarkup } from './js/helpers/createModalMarkup.js';\nimport {\n  notifyEndResults,\n  notifyNoResults,\n} from './js/helpers/notifyWarnings.js';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isSearching = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingMovies(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs.targetObserverMovies);\n    }\n    const dataMovies = response.data.results;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingMovies(API_KEY, URLS.BASE_MOVIES_URL, currentPage).then(\n        data => renderTrendingMovies(data)\n      );\n    }\n  });\n}\n\nfetchTrendingMovies(API_KEY, URLS.BASE_MOVIES_URL, currentPage)\n  .then(data => renderTrendingMovies(data))\n  .then(() => trendingObserver.observe(refs.targetObserverMovies))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\nrefs.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs.targetObserverMovies);\n  searchObserver.unobserve(refs.targetObserverSearch);\n\n  refs.backdrop.classList.add('is-hidden');\n  query = refs.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs.moviesList.innerHTML = '';\n    refs.endResultsInfo.classList.add('visually-hidden');\n\n    const moviesData = await searchMovie(\n      API_KEY,\n      URLS.SEARCH_MOVIE_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = moviesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundMovies(results);\n      searchObserver.observe(refs.targetObserverSearch);\n    } else {\n      refs.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      moviesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching movies:', error.message);\n  } finally {\n    refs.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchMovie(\n        API_KEY,\n        URLS.SEARCH_MOVIE_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundMovies(results);\n      });\n    }\n  });\n}\n\n/* ======================  MOVIE'S DETAILS ======================  */\n\nrefs.moviesContainer.addEventListener('click', onMoviesItemClick);\n\nasync function onMoviesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.movies-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n    createModalMarkup(data);\n  }\n}\n","export const refs = {\n  form: document.querySelector('.search-form'),\n  moviesContainer: document.querySelector('.data-container'),\n  moviesList: document.querySelector('.movies-list'),\n  targetObserverMovies: document.querySelector('.js-guard-movies'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.backdrop'),\n  modalWrapper: document.querySelector('.movie-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-movies'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs } from '../refs';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderTrendingMovies(movies) {\n  const trendingMovies = movies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        vote_average,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n            <p class=\"movie-genres\">Genres: ${\n              genreNames || 'Sorry, no genres available'\n            }</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n          </div>\n     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', trendingMovies);\n}\n","import { refs } from '../refs';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundMovies(foundMovies) {\n  const foundItems = foundMovies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        release_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"movie-genres\">Release date: ${release_date}</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchMovie(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    // console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  }\n}\n","import axios from 'axios';\nlet isLoading = false;\n\nexport async function fetchSingleMovie(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const dataMovies = response.data;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching a movie:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\n// import axios from 'axios';\n// import { refs } from '../refs';\n// import { URLS } from '../constants';\n// import { createModalMarkup } from '../helpers/createModalMarkup';\n// const API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\n// export async function fetchSingleMovie(key, url, id) {\n//   try {\n//     isLoading = true;\n//     const response = await axios.get(`${url}/${id}?api_key=${key}`);\n//     console.log(response);\n//     const dataMovies = response.data;\n//     return dataMovies;\n//   } catch (error) {\n//     console.log('Error fetching a movie:', error.message);\n//   } finally {\n//     isLoading = false;\n//   }\n// }\n\n// if (refs?.moviesContainer) {\n//   refs.moviesContainer.addEventListener('click', onModalOpen);\n// }\n\n// async function onModalOpen(e) {\n//   e.preventDefault();\n//   const targetElement = e.target.closest('.movies-item');\n//   if (targetElement) {\n//     const dataId = targetElement.getAttribute('data-id');\n//     const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n//     createModalMarkup(data);\n//     // window.addEventListener('keydown', onEscKeyPress);\n//     refs.backdrop.addEventListener('click', onBackdropClick);\n//   }\n// }\n\n// // function onEscKeyPress(event) {\n// //   if (event.code === 'Escape') {\n// //     onModalClose();\n// //   }\n// // }\n\n// function onBackdropClick(event) {\n//   if (event.currentTarget === event.target) {\n//     onModalClose();\n//   }\n// }\n\n// function onModalClose() {\n//   refs.modalWrapper.innerHTML = '';\n\n//   refs.backdrop.classList.toggle('is-hidden');\n//   // document.body.classList.remove('modal-open');\n\n//   // refs.backdrop.removeEventListener('click', onModalClose);\n//   // refs.closeBtn.removeEventListener('click', onModalClose);\n//   window.removeEventListener('keydown', onEscKeyPress);\n// }\n","import { refs } from '../refs';\nimport { notifyAddSuccess, notifyIsInFavorites } from './notifyWarnings';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nlet favoriteMoviesList =\n  JSON.parse(localStorage.getItem('favorite_movies')) ?? [];\n\nexport async function createModalMarkup(data) {\n  const {\n    id,\n    budget,\n    genres,\n    origin_country,\n    title,\n    original_title,\n    release_date,\n    revenue,\n    runtime,\n    spoken_languages,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languages = spoken_languages\n    .map(language => language.english_name)\n    .join(', ');\n\n  let markup = `<div class=\"movie-item-detailed\" id=${id}>\n        <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${title}</h2>\n        <h3 class=\"modal-original-title\"><span class=\"modal-bold\">Original title</span>: ${original_title}</h3>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n        <p class=\"orig-country\"><span class=\"modal-bold\">Country of origin:</span> ${origin_country}</p>\n        <p class=\"modal-release-date\"><span class=\"modal-bold\">Release date:</span> ${release_date}</p>\n        <p class=\"modal-movie-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languages}</p>\n        <span class=\"budget\"><span class=\"modal-bold\">Budget:</span> $${(\n          budget / 1000000\n        ).toFixed()} mln</span>\n        <span class=\"revenue\"><span class=\"modal-bold\">Revenue:</span> $${(\n          revenue / 1000000\n        ).toFixed()} mln</span>\n        <p class=\"runtime\"><span class=\"modal-bold\">Time:</span> ${runtime} minutes</p>\n\n         <div class=\"movies-modal-rate\">\n        <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n        <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n        </div>\n\n        <button type=\"button\" class=\"movies-fav\">Add to favorites</button>\n      </div>`;\n\n  refs.backdrop.classList.remove('is-hidden');\n  refs.modalWrapper.innerHTML = markup;\n\n  refs.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs.closeBtn.addEventListener('click', onModalClose);\n\n  /* ======================  ADD TO FAVORITES ======================  */\n  const addFavBtn = document.querySelector('.movies-fav');\n  addFavBtn.addEventListener('click', () => addToFavorites(data));\n}\n\nfunction onModalClose() {\n  refs.modalWrapper.innerHTML = '';\n\n  refs.backdrop.classList.add('is-hidden');\n\n  refs.backdrop.removeEventListener('click', onModalClose);\n  refs.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n\nfunction addToFavorites(movie) {\n  const inStorage = favoriteMoviesList.some(fav => fav.id === movie.id);\n  const movieItem = {\n    id: movie.id,\n    title: movie.title,\n    origTitle: movie.original_title,\n    budget: movie.budget,\n    languages: movie.spoken_languages,\n    genres: movie.genres,\n    originCountry: movie.origin_country,\n    releaseDate: movie.release_date,\n    posterPath: movie.poster_path,\n    revenue: movie.revenue,\n    runtime: movie.runtime,\n    overview: movie.overview,\n    voteAverage: movie.vote_average,\n    voteCount: movie.vote_count,\n  };\n\n  if (!inStorage) {\n    favoriteMoviesList.push(movieItem);\n    localStorage.setItem('favorite_movies', JSON.stringify(favoriteMoviesList));\n    notifyAddSuccess(movie.title);\n  } else {\n    notifyIsInFavorites(movie.title);\n  }\n}\n"],"names":["$bpxeT","parcelRequire","$37e33676934ad046$export$21666b427502ea6d","form","document","querySelector","moviesContainer","moviesList","targetObserverMovies","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$4bcacd1770b5f760$export$ae4a60d31ab53252","movies","trendingMovies","map","param","id","genre_ids","original_title","overview","vote_average","poster_path","genreNames","genre","$4s6iC","genres","find","g","name","filter","Boolean","join","$4bcacd1770b5f760$var$getGenres","concat","toFixed","insertAdjacentHTML","$1dd08296ea6f3ae9$export$e70f4eb8e1a081ef","foundMovies","foundItems","release_date","vote_count","$1dd08296ea6f3ae9$var$getGenres","$458a420dbe5c4a85$export$dd14e5c8db127693","key","url","searchQuery","page","$458a420dbe5c4a85$var$_searchMovie","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","default","get","_ctx","sent","console","log","t0","message","$27bd9ee829202bf4$export$7206e9da159570de","$27bd9ee829202bf4$var$_fetchSingleMovie","dataMovies","data","$a1904e15730cf304$var$ref","$a1904e15730cf304$var$POSTER_URL","$a1904e15730cf304$var$favoriteMoviesList","JSON","parse","localStorage","getItem","$a1904e15730cf304$export$fc0ff788b21a7621","$a1904e15730cf304$var$_createModalMarkup","budget","origin_country","title","revenue","runtime","spoken_languages","languages","markup","language","english_name","classList","remove","innerHTML","addEventListener","$a1904e15730cf304$var$onBackdropClick","window","$a1904e15730cf304$var$onEscKeyPress","$a1904e15730cf304$var$onModalClose","$a1904e15730cf304$var$addToFavorites","add","removeEventListener","event","code","currentTarget","target","movie","inStorage","some","fav","movieItem","origTitle","originCountry","releaseDate","posterPath","voteAverage","voteCount","$lG111","notifyIsInFavorites","push","setItem","stringify","notifyAddSuccess","$b8f9b7833fa37166$var$API_KEY","$b8f9b7833fa37166$var$query","$b8f9b7833fa37166$var$currentPage","$b8f9b7833fa37166$var$currentSearchPage","$b8f9b7833fa37166$var$fetchTrendingMovies","currentPage1","$b8f9b7833fa37166$var$_fetchTrendingMovies","isLoading","total_pages","notifyEndResults","$b8f9b7833fa37166$var$trendingObserver","unobserve","results","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","URLS","BASE_MOVIES_URL","then","root","rootMargin","threshold","$b8f9b7833fa37166$var$_searchByName","e","moviesData","_data","total_results","preventDefault","$b8f9b7833fa37166$var$searchObserver","value","trim","SEARCH_MOVIE_URL","length","observe","notifyNoResults","catch","err","dataFound","$b8f9b7833fa37166$var$_onMoviesItemClick","targetElement","dataId","closest","getAttribute","SINGLE_MOVIE_URL"],"version":3,"file":"index.0349a53d.js.map"}