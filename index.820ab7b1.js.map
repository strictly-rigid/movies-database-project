{"mappings":"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","sources":["src/js/refs.js","src/js/helpers/getGenres.js","src/js/TrendingMovies/renderTrendingMovies.js","src/js/TrendingMovies/renderFoundMovies.js","src/js/TrendingMovies/searchMovie.js","src/js/TrendingMovies/fetchSingleMovie.js","src/js/helpers/createModalMarkup.js","src/index.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('.search-form'),\n  dataContainer: document.querySelector('.data-container'),\n  list: document.querySelector('.movies-list'),\n  targetObserver: document.querySelector('.js-guard-movies'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.backdrop'),\n  modalWrapper: document.querySelector('.movie-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-movies'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","export function getGenres(genre_ids, genres) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n","import { refs } from '../refs';\nimport { URLS, genres } from '../constants';\nimport { getGenres } from '../helpers/getGenres';\n\nexport function renderTrendingMovies(movies) {\n  const trendingMovies = movies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        vote_average,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids, genres);\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${\n              URLS.POSTER_URL\n            }${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n            <p class=\"movie-genres\">Genres: ${\n              genreNames || 'Sorry, no genres available'\n            }</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n          </div>\n     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.list.insertAdjacentHTML('beforeend', trendingMovies);\n}\n","import { refs } from '../refs';\nimport { URLS, genres } from '../constants';\nimport { getGenres } from '../helpers/getGenres';\n\nexport function renderFoundMovies(foundMovies) {\n  const foundItems = foundMovies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        release_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids, genres);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${\n              URLS.POSTER_URL\n            }${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"movie-genres\">Release date: ${release_date}</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.list.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchMovie(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  }\n}\n","import axios from 'axios';\n\nexport async function fetchSingleMovie(key, url, id) {\n  try {\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n\n    const dataMovies = response.data;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching a movie:', error.message);\n  }\n}\n","import { refs } from '../refs';\nimport { URLS } from '../constants';\n\nimport { onBackdropClick, onEscKeyPress } from './onCloseFunctions';\nimport { notifyAddSuccess, notifyIsInFavorites } from './notifyWarnings';\n\nlet favoriteMoviesList =\n  JSON.parse(localStorage.getItem('favorite_movies')) ?? [];\n\nexport async function createModalMarkup(data) {\n  const {\n    id,\n    budget,\n    genres,\n    origin_country,\n    title,\n    original_title,\n    release_date,\n    revenue,\n    runtime,\n    spoken_languages,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languages = spoken_languages\n    .map(language => language.english_name)\n    .join(', ');\n\n  let markup = `<div class=\"movie-item-detailed\" id=${id}>\n        <img src=\"${\n          URLS.POSTER_URL\n        }${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${title}</h2>\n        <h3 class=\"modal-original-title\"><span class=\"modal-bold\">Original title</span>: ${original_title}</h3>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n        <p class=\"orig-country\"><span class=\"modal-bold\">Country of origin:</span> ${origin_country}</p>\n        <p class=\"modal-release-date\"><span class=\"modal-bold\">Release date:</span> ${release_date}</p>\n        <p class=\"modal-movie-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languages}</p>\n        <span class=\"budget\"><span class=\"modal-bold\">Budget:</span> $${(\n          budget / 1000000\n        ).toFixed()} mln</span>\n        <span class=\"revenue\"><span class=\"modal-bold\">Revenue:</span> $${(\n          revenue / 1000000\n        ).toFixed()} mln</span>\n        <p class=\"runtime\"><span class=\"modal-bold\">Time:</span> ${runtime} minutes</p>\n\n         <div class=\"movies-modal-rate\">\n        <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n        <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n        </div>\n\n        <button type=\"button\" class=\"movies-fav\">Add to favorites</button>\n      </div>`;\n\n  refs.backdrop.classList.remove('is-hidden');\n  refs.modalWrapper.innerHTML = markup;\n\n  refs.backdrop.addEventListener('click', event =>\n    onBackdropClick(event, onModalClose)\n  );\n  window.addEventListener('keydown', event =>\n    onEscKeyPress(event, onModalClose)\n  );\n  refs.closeBtn.addEventListener('click', onModalClose);\n\n  /* ======================  ADD TO FAVORITES ======================  */\n  const addFavBtn = document.querySelector('.movies-fav');\n  addFavBtn.addEventListener('click', () => addToFavorites(data));\n}\n\nfunction onModalClose() {\n  refs.modalWrapper.innerHTML = '';\n\n  refs.backdrop.classList.add('is-hidden');\n\n  refs.backdrop.removeEventListener('click', onModalClose);\n  refs.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction addToFavorites(movie) {\n  const inStorage = favoriteMoviesList.some(fav => fav.id === movie.id);\n  const movieItem = {\n    id: movie.id,\n    title: movie.title,\n    origTitle: movie.original_title,\n    budget: movie.budget,\n    languages: movie.spoken_languages,\n    genres: movie.genres,\n    originCountry: movie.origin_country,\n    releaseDate: movie.release_date,\n    posterPath: movie.poster_path,\n    revenue: movie.revenue,\n    runtime: movie.runtime,\n    overview: movie.overview,\n    voteAverage: movie.vote_average,\n    voteCount: movie.vote_count,\n  };\n\n  if (!inStorage) {\n    favoriteMoviesList.push(movieItem);\n    localStorage.setItem('favorite_movies', JSON.stringify(favoriteMoviesList));\n    notifyAddSuccess(movie.title);\n  } else {\n    notifyIsInFavorites(movie.title);\n  }\n}\n","// import dotenv from 'dotenv';\n\nimport { refs } from './js/refs';\nimport {\n  URLS,\n  trendingObserverOptions,\n  searchObserverOptions,\n} from './js/constants.js';\n\nimport { renderTrendingMovies } from './js/TrendingMovies/renderTrendingMovies.js';\nimport { renderFoundMovies } from './js/TrendingMovies/renderFoundMovies.js';\n\nimport { searchMovie } from './js/TrendingMovies/searchMovie.js';\nimport { fetchSingleMovie } from './js/TrendingMovies/fetchSingleMovie.js';\nimport { createModalMarkup } from './js/helpers/createModalMarkup.js';\nimport {\n  notifyEndResults,\n  notifyNoResults,\n} from './js/helpers/notifyWarnings.js';\nimport { fetchData } from './js/helpers/fetchers.js';\nimport { setNewObserver } from './js/helpers/setNewObserver.js';\n\n// dotenv.config();\n// const API_KEY = process.env.API_KEY;\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingMovies(currentPage) {\n  try {\n    const response = await fetchData(URLS.BASE_MOVIES_URL, {\n      api_key: API_KEY,\n      page: currentPage,\n    });\n\n    if (response.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs.targetObserver);\n    }\n    const dataMovies = response.results;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  }\n}\n\nconst trendingObserver = setNewObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\n\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingMovies(currentPage).then(data => renderTrendingMovies(data));\n    }\n  });\n}\n\n// Initializing fetch request for trending\n\nfetchTrendingMovies(currentPage)\n  .then(data => renderTrendingMovies(data))\n  .then(() => trendingObserver.observe(refs.targetObserver))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\nrefs.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  refs.backdrop.classList.add('is-hidden');\n  query = refs.form.searchQuery.value.trim();\n\n  resetState();\n\n  try {\n    const moviesData = await searchMovie(\n      API_KEY,\n      URLS.SEARCH_MOVIE_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = moviesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundMovies(results);\n      searchObserver.observe(refs.targetObserverSearch);\n    } else {\n      refs.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      moviesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching movies:', error.message);\n  } finally {\n    refs.form.searchQuery.value = '';\n  }\n}\n\nfunction resetState() {\n  trendingObserver.unobserve(refs.targetObserver);\n  searchObserver.unobserve(refs.targetObserverSearch);\n\n  refs.list.innerHTML = '';\n  refs.endResultsInfo.classList.add('visually-hidden');\n\n  currentSearchPage = 1;\n}\n\nconst searchObserver = setNewObserver(onLoadMoreSearch, searchObserverOptions);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchMovie(\n        API_KEY,\n        URLS.SEARCH_MOVIE_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundMovies(results);\n      });\n    }\n  });\n}\n\n/* ======================  MOVIE'S DETAILS ======================  */\n\nrefs.dataContainer.addEventListener('click', onMoviesItemClick);\n\nasync function onMoviesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.movies-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n    createModalMarkup(data);\n  }\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","dataContainer","list","targetObserver","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$c14bf2430555a8e8$export$c5604fa8028da00","genre_ids","genres","map","id","genre","find","g","name","filter","Boolean","join","$1a8959e2dc25037b$export$ae4a60d31ab53252","movies","trendingMovies","original_title","overview","vote_average","poster_path","genreNames","$8G1wF","URLS","POSTER_URL","toFixed","insertAdjacentHTML","$bc18366c6f858d9b$export$e70f4eb8e1a081ef","foundMovies","foundItems","release_date","vote_count","$2shzp","parcelRequire","async","$866ecd266b5ad440$export$dd14e5c8db127693","key","url","searchQuery","page","default","get","error","console","log","message","$e44c4f975600d5d9$export$7206e9da159570de","response","data","$68ff11cd958e5ad3$var$ref","$68ff11cd958e5ad3$var$favoriteMoviesList","JSON","parse","localStorage","getItem","$68ff11cd958e5ad3$export$fc0ff788b21a7621","budget","origin_country","title","revenue","runtime","spoken_languages","languages","language","english_name","markup","classList","remove","innerHTML","addEventListener","event","$6Ipdt","onBackdropClick","$68ff11cd958e5ad3$var$onModalClose","window","onEscKeyPress","movie","inStorage","some","fav","movieItem","origTitle","originCountry","releaseDate","posterPath","voteAverage","voteCount","$kj8Rd","notifyIsInFavorites","push","setItem","stringify","notifyAddSuccess","$68ff11cd958e5ad3$var$addToFavorites","add","removeEventListener","$1f0dc3b9307be026$var$query","$1f0dc3b9307be026$var$currentPage","$1f0dc3b9307be026$var$currentSearchPage","$1f0dc3b9307be026$var$fetchTrendingMovies","currentPage1","$dB5GG","fetchData","BASE_MOVIES_URL","api_key","total_pages","notifyEndResults","$1f0dc3b9307be026$var$trendingObserver","unobserve","results","$hlWSz","setNewObserver","entries","forEach","entry","isIntersecting","then","trendingObserverOptions","observe","catch","err","e","preventDefault","value","trim","$1f0dc3b9307be026$var$searchObserver","moviesData","SEARCH_MOVIE_URL","total_results","length","notifyNoResults","dataFound","searchObserverOptions","targetElement","target","closest","dataId","getAttribute","SINGLE_MOVIE_URL"],"version":3,"file":"index.820ab7b1.js.map"}