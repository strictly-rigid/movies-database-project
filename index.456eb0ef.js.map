{"mappings":"oeAAO,MAAMA,EAAO,CAClBC,KAAMC,SAASC,cAAc,gBAC7BC,gBAAiBF,SAASC,cAAc,mBACxCE,WAAYH,SAASC,cAAc,gBACnCG,eAAgBJ,SAASC,cAAc,aACvCI,SAAUL,SAASC,cAAc,aACjCK,aAAcN,SAASC,cAAc,uBACrCM,SAAUP,SAASC,cAAc,qB,iCCPnC,IAAAO,EAAAC,EAAA,S,aCeO,SAASC,EAAqBC,GACnC,MAAMC,EAAiBD,EACpBE,KACC,EAACC,GACCA,EAAEC,UACFA,EAASC,eACTA,EAAcC,SACdA,EAAQC,aACRA,EAAYC,YACZA,MAEA,MAAMC,EArBd,SAAmBL,GACjB,OAAOA,EACJF,KAAIC,IACH,MAAMO,EAAQC,EAAAC,OAAOC,MAAKC,GAAKA,EAAEX,KAAOA,IACxC,OAAOO,EAAQA,EAAMK,KAAO,EAAE,IAE/BC,OAAOC,SACPC,KAAK,K,CAciBC,CAAUf,GAC7B,MAAO,mCAAmCD,4DACbK,0HAECH,oDACKC,sDAE7BG,GAAc,kFAEmBF,EAAaa,QAAQ,sDAGpD,IAGXF,KAAK,IAER/B,EAAKK,WAAW6B,mBAAmB,YAAapB,E,CC3ClDJ,EAAAC,EAAA,S,aCIOwB,eAAeC,EAAkBC,GACtC,MAAMrB,GACJA,EAAEsB,OACFA,EAAMb,OACNA,EAAMc,eACNA,EAAcC,MACdA,EAAKtB,eACLA,EAAcuB,aACdA,EAAYC,QACZA,EAAOC,QACPA,EAAOC,iBACPA,EAAgBxB,aAChBA,EAAYyB,WACZA,EAAU1B,SACVA,EAAQE,YACRA,GACEgB,EAOJ,IAAIS,EAAS,uCAAuC9B,wDACrBK,gFACCmB,oGACyDtB,mFARtEO,EAAOV,KAAIQ,GAASA,EAAMK,OAAMG,KAAK,iGAU2BQ,8FACCE,iGACGtB,yFAXrEyB,EACf7B,KAAIgC,GAAYA,EAASC,eACzBjB,KAAK,qFAYAO,EAAS,KACTL,kGAEAS,EAAU,KACVT,0FACyDU,uFACIvB,2FACSyB,yBAG9E7C,EAAKO,SAAS0C,UAAUC,OAAO,aAC/BlD,EAAKQ,aAAa2C,UAAYL,EAI9BM,OAAOC,iBAAiB,UAAWC,E,CAOrC,SAASC,IACPvD,EAAKQ,aAAa2C,UAAY,GAE9BnD,EAAKO,SAAS0C,UAAUO,OAAO,aAK/BJ,OAAOK,oBAAoB,UAAWH,E,CAGxC,SAASA,EAAcI,GACF,WAAfA,EAAMC,MACRJ,G,EAjBA,MAAAvD,OAAA,EAAAA,EAAMS,WACRT,EAAKS,SAAS4C,iBAAiB,QAASE,GDd1C,SAASK,EAAgBF,GACnBA,EAAMG,gBAAkBH,EAAMI,SAMlC9D,EAAKQ,aAAa2C,UAAY,GAE9BnD,EAAKO,SAAS0C,UAAUO,OAAO,aAK/BJ,OAAOK,oBAAoB,UAAWM,e,EApCpC,MAAA/D,OAAA,EAAAA,EAAMI,kBACRJ,EAAKI,gBAAgBiD,iBAAiB,SAGxClB,eAA2B6B,GACzBA,EAAEC,iBACF,MAAMC,EAAgBF,EAAEF,OAAOK,QAAQ,gBACvC,GAAID,EAAe,CACjB,MAAME,EAASF,EAAcG,aAAa,WAE1CjC,QAxBGD,eAAgCmC,EAAKC,EAAKvD,GAC/C,IACEwD,WAAY,EACZ,MAAMC,QAAiB/D,EAAAgE,QAAMC,IAAI,GAAGJ,KAAOvD,aAAcsD,KAGzD,OAFAM,QAAQC,IAAIJ,GACOA,EAASpC,I,CAE5B,MAAOyC,GACPF,QAAQC,IAAI,0BAA2BC,EAAMC,Q,CAC9C,QACCP,WAAY,C,EAaOQ,CAzBP,mCAyBiCxD,EAAAyD,KAAKC,iBAAkBd,IAGpEpE,EAAKO,SAAS8C,iBAAiB,QAASO,E,KFzB5C,IAAIuB,EAAc,EACdC,GAAY,EAETjD,eAAekD,EAAoBf,EAAKC,EAAKe,GAClD,IACEF,GAAY,EACZ,MAAMX,QAAiB/D,EAAAgE,QAAMC,IAC3B,GAAGJ,aAAeD,UAAYgB,KAIhC,OADmBb,EAASpC,KAAKkD,O,CAEjC,MAAOT,GACPF,QAAQC,IAAI,kCAAmCC,EAAMC,Q,CACtD,QACCK,GAAY,C,EAIhB,IAMII,EAAW,IAAIC,sBACnBtD,eAA0BuD,EAASC,GACjCf,QAAQC,IAAIa,GACZA,EAAQE,SAAQC,IACVA,EAAMC,iBACRX,GAAe,EACfE,EAjCU,mCACC,mDAgC4BF,GAAaY,MAAK1D,GACvDzB,EAAqByB,K,MAbf,CACZ2D,KAAM,KACNC,WAAY,QACZC,UAAW,IAgBY,gBAArBhG,SAASiG,KAAKnF,IAChBqE,EAzCc,mCACC,mDAwCwBF,GACpCY,MAAK1D,IACJzB,EAAqByB,EAAK,IAE3B0D,MAAK,IAAMP,EAASY,QAAQpG,EAAKM,kBACjC+F,OAAMC,GAAO1B,QAAQC,IAAIyB,KInD9B5F,EAAAC,EAAA,SAGOwB,eAAeoE,EAAYjC,EAAKC,EAAKiC,EAAaC,GACvD,IACE,MAAMhC,QAAiB/D,EAAAgE,QAAMC,IAC3B,GAAGJ,aAAeD,WAAakC,KAEjC5B,QAAQC,IAAIJ,GACZ,MAAMiC,EAAmBjC,EAASpC,KAAKkD,QACnCmB,IACF1G,EAAKK,WAAW8C,UAAY,IAG9BsD,EAAiBC,E,CACjB,MAAO5B,GACPF,QAAQC,IAAI,kCAAmCC,EAAMC,Q,eCDlD,SAAS4B,EAAkBC,GAChC,MAAMC,EAAaD,EAChB7F,KACC,EAACC,GACCA,EAAEC,UACFA,EAASC,eACTA,EAAcC,SACdA,EAAQsB,aACRA,EAAYrB,aACZA,EAAYyB,WACZA,EAAUxB,YACVA,MAEA,MAAMC,EAvBd,SAAmBL,GACjB,OAAOA,EACJF,KAAIC,IACH,MAAMO,EAAQC,EAAAC,OAAOC,MAAKC,GAAKA,EAAEX,KAAOA,IACxC,OAAOO,EAAQA,EAAMK,KAAO,EAAE,IAE/BC,OAAOC,SACPC,KAAK,K,CAgBiB+E,CAAU7F,GAE7B,MAAO,mCAAmCD,4DACbK,0HAECH,oDACKC,wDAE3BG,GAAc,2FAE0BmB,uDACTrB,EAAaa,QAAQ,4EACLY,mDAE/C,IAGXd,KAAK,IAER/B,EAAKK,WAAW6B,mBAAmB,YAAa2E,E,qICClD,IAAIE,GAAc,GAEd,MAAA/G,OAAA,EAAAA,EAAMC,OACRD,EAAKC,KAAKoD,iBAAiB,UAAUW,IACnCA,EAAEC,iBACF,MAAM+C,EAAQhH,EAAKC,KAAKuG,YAAYS,MAAMC,OAEtCF,GACFD,GAAc,EACdR,EA1BU,mCAKS,4CAqBoBS,EAAOL,IAE9CI,GAAc,CAAK","sources":["src/js/refs.js","src/js/TrendingMovies/fetchTrendingMovies.js","src/js/TrendingMovies/renderTrendingMovies.js","src/js/TrendingMovies/fetchSingleMovie.js","src/js/helpers/createModalMarkup.js","src/js/TrendingMovies/searchMovie.js","src/js/TrendingMovies/renderFoundMovies.js","src/index.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('.search-form'),\n  moviesContainer: document.querySelector('.data-container'),\n  moviesList: document.querySelector('.movies-list'),\n  targetObserver: document.querySelector('.js-guard'),\n  backdrop: document.querySelector('.backdrop'),\n  modalWrapper: document.querySelector('.movie-item-wrapper'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import axios from 'axios';\nimport { refs } from '../refs';\nimport { renderTrendingMovies } from './renderTrendingMovies';\nimport { fetchSingleMovie } from './fetchSingleMovie';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\nlet currentPage = 1;\nlet isLoading = false;\n\nexport async function fetchTrendingMovies(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    // console.log(response);\n    const dataMovies = response.data.results;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nlet options = {\n  root: null,\n  rootMargin: '100px',\n  threshold: 1.0,\n};\n\nlet observer = new IntersectionObserver(onLoadMore, options);\nasync function onLoadMore(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingMovies(API_KEY, BASE_URL, currentPage).then(data =>\n        renderTrendingMovies(data)\n      );\n    }\n  });\n}\n\nif (document.body.id === 'movies-page') {\n  fetchTrendingMovies(API_KEY, BASE_URL, currentPage)\n    .then(data => {\n      renderTrendingMovies(data);\n    })\n    .then(() => observer.observe(refs.targetObserver))\n    .catch(err => console.log(err));\n}\n\n// import axios from 'axios';\n// import { refs } from '../refs';\n// import { renderTrendingMovies } from './renderTrendingMovies';\n\n// const API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n// let currentPage = 1;\n// let isLoading = false;\n\n// export async function fetchTrendingMovies(key, url, renderMovies, currentPage) {\n//   try {\n//     const response = await axios.get(\n//       `${url}?api_key=${key}&page=${currentPage}`\n//     );\n//     console.log(response);\n//     const dataMovies = response.data.results;\n//     renderMovies(dataMovies);\n//   } catch (error) {\n//     console.log('Error fetching trending movies:', error.message);\n//   } finally {\n//     isLoading = false;\n//   }\n// }\n\n// fetchTrendingMovies(API_KEY, BASE_URL, renderTrendingMovies, currentPage)\n//   .then(data => observer.observe(refs.targetObserver))\n//   .catch(err => console.log(err));\n\n// let options = {\n//   root: null,\n//   rootMargin: '10px',\n//   threshold: 1.0,\n// };\n\n// let observer = new IntersectionObserver(onLoadMore, options);\n// function onLoadMore(entries, observer) {\n//   console.log(entries);\n//   entries.forEach(entry => {\n//     if (entry.isIntersecting) {\n//       currentPage += 1;\n//       fetchTrendingMovies(API_KEY, BASE_URL, renderTrendingMovies, currentPage);\n//     }\n//   });\n// }\n","import { refs } from '../refs';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderTrendingMovies(movies) {\n  const trendingMovies = movies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        vote_average,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n            <p class=\"movie-genres\">Genres: ${\n              genreNames || 'Sorry, no genres available'\n            }</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n          </div>\n     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', trendingMovies);\n}\n","import axios from 'axios';\nimport { refs } from '../refs';\nimport { URLS } from '../constants';\nimport { createModalMarkup } from '../helpers/createModalMarkup';\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\nexport async function fetchSingleMovie(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const dataMovies = response.data;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching a movie:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nif (refs?.moviesContainer) {\n  refs.moviesContainer.addEventListener('click', onModalOpen);\n}\n\nasync function onModalOpen(e) {\n  e.preventDefault();\n  const targetElement = e.target.closest('.movies-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n    createModalMarkup(data);\n    // window.addEventListener('keydown', onEscKeyPress);\n    refs.backdrop.addEventListener('click', onBackdropClick);\n  }\n}\n\n// function onEscKeyPress(event) {\n//   if (event.code === 'Escape') {\n//     onModalClose();\n//   }\n// }\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n\nfunction onModalClose() {\n  refs.modalWrapper.innerHTML = '';\n\n  refs.backdrop.classList.toggle('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  // refs.backdrop.removeEventListener('click', onModalClose);\n  // refs.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n","import { refs } from '../refs';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createModalMarkup(data) {\n  const {\n    id,\n    budget,\n    genres,\n    origin_country,\n    title,\n    original_title,\n    release_date,\n    revenue,\n    runtime,\n    spoken_languages,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languages = spoken_languages\n    .map(language => language.english_name)\n    .join(', ');\n\n  let markup = `<div class=\"movie-item-detailed\" id=${id}>\n        <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${title}</h2>\n        <h3 class=\"modal-original-title\"><span class=\"modal-bold\">Original title</span>: ${original_title}</h3>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n        <p class=\"orig-country\"><span class=\"modal-bold\">Country of origin:</span> ${origin_country}</p>\n        <p class=\"modal-release-date\"><span class=\"modal-bold\">Release date:</span> ${release_date}</p>\n        <p class=\"modal-movie-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languages}</p>\n        <span class=\"budget\"><span class=\"modal-bold\">Budget:</span> $${(\n          budget / 1000000\n        ).toFixed()} mln</span>\n        <span class=\"revenue\"><span class=\"modal-bold\">Revenue:</span> $${(\n          revenue / 1000000\n        ).toFixed()} mln</span>\n        <p class=\"runtime\"><span class=\"modal-bold\">Time:</span> ${runtime} minutes</p>\n        <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n        <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n      </div>`;\n\n  refs.backdrop.classList.remove('is-hidden');\n  refs.modalWrapper.innerHTML = markup;\n\n  //   refs.closeBtn = document.querySelector('.modal-close-btn');\n  //   refs.closeBtn.addEventListener('click', onModalClose);\n  window.addEventListener('keydown', onEscKeyPress);\n}\n\nif (refs?.closeBtn) {\n  refs.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs.modalWrapper.innerHTML = '';\n\n  refs.backdrop.classList.toggle('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  // refs.backdrop.removeEventListener('click', onModalClose);\n  // refs.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n","import axios from 'axios';\nimport { refs } from '../refs.js';\n\nexport async function searchMovie(key, url, searchQuery, renderFoundItems) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}`\n    );\n    console.log(response);\n    const queryFoundMovies = response.data.results;\n    if (queryFoundMovies) {\n      refs.moviesList.innerHTML = '';\n    }\n\n    renderFoundItems(queryFoundMovies);\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  }\n}\n","import { refs } from '../refs';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundMovies(foundMovies) {\n  const foundItems = foundMovies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        release_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"movie-genres\">Release date: ${release_date}</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import { refs } from './js/refs';\nimport { refs2 } from './js/refs2';\nimport { refs3 } from './js/refs3';\nimport axios from 'axios';\n\nimport { URLS } from './js/constants.js';\n\nimport { fetchTrendingMovies } from './js/TrendingMovies/fetchTrendingMovies.js';\nimport { renderTrendingMovies } from './js/TrendingMovies/renderTrendingMovies.js';\n\nimport { searchMovie } from './js/TrendingMovies/searchMovie.js';\nimport { renderFoundMovies } from './js/TrendingMovies/renderFoundMovies.js';\n\nimport { fetchTrendingSeries } from './js/TrendingSeries/fetchTrendingSeries.js';\nimport { renderTrendingSeries } from './js/TrendingSeries/renderTrendingSeries.js';\n\nimport { searchSeries } from './js/TrendingSeries/searchSeries.js';\nimport { renderFoundSeries } from './js/TrendingSeries/renderFoundSeries.js';\n\nimport { fetchTrendingPeople } from './js/TrendingPeople/fetchTrendingPeople.js';\nimport { renderTrendingPeople } from './js/TrendingPeople/renderTrendingPeople.js';\n\nimport { searchPerson } from './js/TrendingPeople/searchPerson.js';\nimport { renderFoundPerson } from './js/TrendingPeople/renderFoundPerson.js';\n\nimport { fetchSingleSeries } from './js/TrendingSeries/fetchSingleSeries.js';\nimport { createSeriesModalMarkup } from './js/helpers/createSeriesModalMarkup.js';\n\nimport { fetchSinglePerson } from './js/TrendingPeople/fetchSinglePerson.js';\nimport { createPersonModalMarkup } from './js/helpers/createPersonModalMarkup.js';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\nconst BASE_SERIES_URL = 'https://api.themoviedb.org/3/trending/tv/week';\nconst BASE_PEOPLE_URL = 'https://api.themoviedb.org/3/trending/person/week';\n\nconst SEARCH_MOVIE_URL = 'https://api.themoviedb.org/3/search/movie';\nconst SEARCH_SERIES_URL = 'https://api.themoviedb.org/3/search/tv';\nconst SEARCH_PERSON_URL = 'https://api.themoviedb.org/3/search/person';\n\n// let currentPage = 1;\n\n// fetchTrendingMovies(API_KEY, BASE_URL, renderTrendingMovies, currentPage);\n\n// fetchTrendingSeries(API_KEY, BASE_SERIES_URL, renderTrendingSeries);\n\n// fetchTrendingPeople(API_KEY, BASE_PEOPLE_URL, renderTrendingPeople);\n\nlet isSearching = false;\n\nif (refs?.form) {\n  refs.form.addEventListener('submit', e => {\n    e.preventDefault();\n    const query = refs.form.searchQuery.value.trim();\n\n    if (query) {\n      isSearching = true;\n      searchMovie(API_KEY, SEARCH_MOVIE_URL, query, renderFoundMovies);\n    } else {\n      isSearching = false;\n    }\n  });\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","moviesContainer","moviesList","targetObserver","backdrop","modalWrapper","closeBtn","$2shzp","parcelRequire","$1a8959e2dc25037b$export$ae4a60d31ab53252","movies","trendingMovies","map","id","genre_ids","original_title","overview","vote_average","poster_path","genreNames","genre","$8G1wF","genres","find","g","name","filter","Boolean","join","$1a8959e2dc25037b$var$getGenres","toFixed","insertAdjacentHTML","async","$68ff11cd958e5ad3$export$fc0ff788b21a7621","data","budget","origin_country","title","release_date","revenue","runtime","spoken_languages","vote_count","markup","language","english_name","classList","remove","innerHTML","window","addEventListener","$68ff11cd958e5ad3$var$onEscKeyPress","$68ff11cd958e5ad3$var$onModalClose","toggle","removeEventListener","event","code","$e44c4f975600d5d9$var$onBackdropClick","currentTarget","target","onEscKeyPress","e","preventDefault","targetElement","closest","dataId","getAttribute","key","url","isLoading","response","default","get","console","log","error","message","$e44c4f975600d5d9$export$7206e9da159570de","URLS","SINGLE_MOVIE_URL","$15cbbb70430c3654$var$currentPage","$15cbbb70430c3654$var$isLoading","$15cbbb70430c3654$export$a2840eca364d9ff2","currentPage1","results","$15cbbb70430c3654$var$observer","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","then","root","rootMargin","threshold","body","observe","catch","err","$866ecd266b5ad440$export$dd14e5c8db127693","searchQuery","renderFoundItems","queryFoundMovies","$bc18366c6f858d9b$export$e70f4eb8e1a081ef","foundMovies","foundItems","$bc18366c6f858d9b$var$getGenres","$1f0dc3b9307be026$var$isSearching","query","value","trim"],"version":3,"file":"index.456eb0ef.js.map"}