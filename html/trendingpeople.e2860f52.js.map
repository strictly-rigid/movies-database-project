{"mappings":"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","sources":["src/js/TrendingPeople/fetchTrendingPeople.js","src/js/refs3.js","src/js/TrendingPeople/renderTrendingPeople.js","src/js/TrendingPeople/renderFoundPerson.js","src/js/TrendingPeople/searchPerson.js","src/js/TrendingPeople/fetchSinglePerson.js","src/js/helpers/createPersonModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport { URLS } from '../constants';\nimport { renderTrendingPeople } from './renderTrendingPeople';\nimport { renderFoundPerson } from './renderFoundPerson';\nimport { searchPerson } from './searchPerson';\nimport { fetchSinglePerson } from './fetchSinglePerson';\nimport { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingPeople(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n    const dataPeople = response.data.results;\n    return dataPeople;\n  } catch (error) {\n    console.log('Error fetching trending people:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage).then(\n        data => renderTrendingPeople(data)\n      );\n    }\n  });\n}\n\nfetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n  .then(data => renderTrendingPeople(data))\n  .then(() => trendingObserver.observe(refs3.targetObserverPeople))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs3.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs3.targetObserverPeople);\n  refs3.backdrop.classList.add('is-hidden');\n  query = refs3.form.searchQuery.value.trim();\n\n  try {\n    refs3.peopleList.innerHTML = '';\n\n    const personData = await searchPerson(\n      API_KEY,\n      URLS.SEARCH_PERSON_URL,\n      query,\n      currentSearchPage\n    );\n\n    if (personData && personData.length > 0) {\n      renderFoundPerson(personData);\n    }\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    searchObserver.observe(refs3.targetObserverSearch);\n    refs3.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchPerson(\n        API_KEY,\n        URLS.SEARCH_PERSON_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => renderFoundPerson(dataFound));\n    }\n  });\n}\n\n/* ====================== PERSON'S DETAILS ======================  */\n\nrefs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\nasync function onPersonItemClick(e) {\n  e.preventDefault();\n  console.log('Hellow from callback');\n  const targetElement = e.target.closest('.person-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSinglePerson(\n      API_KEY,\n      URLS.SINGLE_PERSON_URL,\n      dataId\n    );\n    createPersonModalMarkup(data);\n  }\n}\n","export const refs3 = {\n  form: document.querySelector('.search-form-people'),\n  peopleContainer: document.querySelector('.people-data-container'),\n  peopleList: document.querySelector('.people-list'),\n  targetObserverPeople: document.querySelector('.js-guard-people'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.person-backdrop'),\n  modalWrapper: document.querySelector('.person-item-wrapper'),\n};\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderTrendingPeople(people) {\n  console.log(people);\n  const trendingPeople = people\n    .map(({ id, name, gender, known_for_department, profile_path }) => {\n      // const titles = known_for.map(item => item.title || item.name).join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n          <div class=\"person-info\">\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n            <p class=\"popular-movies\">Known for: ${known_for_department}</p>\n          </div>\n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', trendingPeople);\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderFoundPerson(foundPerson) {\n  console.log(foundPerson);\n  const foundItems = foundPerson\n    .map(({ id, known_for_department, name, gender, profile_path }) => {\n      // const titles = known_for_department\n      //   .map(item => item.title || item.name)\n      //   .join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n          \n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\nimport { refs3 } from '../refs3.js';\n\nexport async function searchPerson(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    console.log(response);\n    const dataFoundPerson = response.data.results;\n    return dataFoundPerson;\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  }\n}\n","import axios from 'axios';\n\nlet isLoading = false;\n\nexport async function fetchSinglePerson(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    // console.log(response);\n    const personDetails = response.data;\n    return personDetails;\n  } catch (error) {\n    console.log('Error fetching person\"s data:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs3 } from '../refs3';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createPersonModalMarkup(data) {\n  const {\n    id,\n    birthday,\n    biography,\n    place_of_birth,\n    gender,\n    name,\n    known_for_department,\n    poster_path,\n    popularity,\n  } = data;\n  console.log(data);\n\n  let markup = `<div class=\"person-item-detailed\" id=${id}>\n           <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <h2 class=\"modal-name\">${name}</h2>\n            <span class=\"gender\">Gender: ${gender}</span>\n            <span class=\"birthday\">Born: ${birthday}</span>\n            <span class=\"place_of_birth\">Place of birth:${place_of_birth}</span>\n            <p class=\"known_for\">Known for:${known_for_department}</p>\n            <p class=\"biography\">Bio: ${biography}</p>\n            <span class=\"popularity\">Popularity: ${popularity}</span>\n          </div>`;\n\n  refs3.backdrop.classList.remove('is-hidden');\n  refs3.modalWrapper.innerHTML = markup;\n\n  //   refs.closeBtn = document.querySelector('.modal-close-btn');\n  //   refs.closeBtn.addEventListener('click', onModalClose);\n  //   window.addEventListener('keydown', onEscKeyPress);\n  //   console.log(refs.closeBtn);\n}\n"],"names":["$2shzp","parcelRequire","$313ad1f2210997b7$var$API_KEY","$313ad1f2210997b7$var$query","$313ad1f2210997b7$var$currentPage","$313ad1f2210997b7$var$currentSearchPage","$313ad1f2210997b7$var$isLoading","async","$313ad1f2210997b7$var$fetchTrendingPeople","key","url","currentPage1","response","default","get","console","log","data","results","error","message","$313ad1f2210997b7$var$trendingObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","$8G1wF","URLS","BASE_PEOPLE_URL","then","$60bzg","renderTrendingPeople","root","rootMargin","threshold","observe","$k0oAw","refs3","targetObserverPeople","catch","err","form","addEventListener","e","preventDefault","unobserve","backdrop","classList","add","searchQuery","value","trim","peopleList","innerHTML","personData","$4r0c0","searchPerson","SEARCH_PERSON_URL","length","$48xzL","renderFoundPerson","$313ad1f2210997b7$var$searchObserver","targetObserverSearch","dataFound","peopleContainer","targetElement","target","closest","dataId","getAttribute","$i4GBV","fetchSinglePerson","SINGLE_PERSON_URL","$zRueC","createPersonModalMarkup","$e906e16ee62abe85$export$1667d6aa2cee11d8","document","querySelector","modalWrapper","$45ebb74e1e41cb42$export$1f3529df0466b8e9","people","trendingPeople","map","id","name","gender","known_for_department","profile_path","genders","join","insertAdjacentHTML","$3031f43cc7f53ebe$export$706c7750293f7a13","foundPerson","foundItems","$33a9d54fb0f6f81e$export$791a87ce43433885","page","$d289a749cf5d8107$var$isLoading","$d289a749cf5d8107$export$bda05f064222d25a","$06bcc255bee61c4e$export$9a7ad2d283fab89","birthday","biography","place_of_birth","poster_path","popularity","markup","remove"],"version":3,"file":"trendingpeople.e2860f52.js.map"}