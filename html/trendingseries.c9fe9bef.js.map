{"mappings":"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","sources":["src/js/TrendingSeries/fetchTrendingSeries.js","src/js/refs2.js","src/js/TrendingSeries/renderTrendingSeries.js","src/js/TrendingSeries/renderFoundSeries.js","src/js/TrendingSeries/searchSeries.js","src/js/TrendingSeries/fetchSingleSeries.js","src/js/helpers/createSeriesModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport {\n  URLS,\n  trendingObserverOptions,\n  searchObserverOptions,\n} from '../constants';\nimport { renderTrendingSeries } from './renderTrendingSeries';\nimport { renderFoundSeries } from './renderFoundSeries';\nimport { searchSeries } from './searchSeries';\nimport { fetchSingleSeries } from './fetchSingleSeries';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingSeries(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs2.targetObserverSeries);\n    }\n    const dataSeries = response.data.results;\n    return dataSeries;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage).then(\n        data => renderTrendingSeries(data)\n      );\n    }\n  });\n}\n\nfetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n  .then(data => renderTrendingSeries(data))\n  .then(() => trendingObserver.observe(refs2.targetObserverSeries))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs2.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs2.targetObserverSeries);\n  searchObserver.unobserve(refs2.targetObserverSearch);\n\n  refs2.backdrop.classList.add('is-hidden');\n  query = refs2.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs2.seriesList.innerHTML = '';\n    refs2.endResultsInfo.classList.add('visually-hidden');\n\n    const seriesData = await searchSeries(\n      API_KEY,\n      URLS.SEARCH_SERIES_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = seriesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundSeries(results);\n      searchObserver.observe(refs2.targetObserverSearch);\n    } else {\n      refs2.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      seriesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs2.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    refs2.form.searchQuery.value = '';\n  }\n}\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchSeries(\n        API_KEY,\n        URLS.SEARCH_SERIES_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundSeries(results);\n      });\n    }\n  });\n}\n\n/* ======================  SERIES' DETAILS ======================  */\n\nrefs2.seriesContainer.addEventListener('click', onSeriesItemClick);\n\nasync function onSeriesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.series-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleSeries(\n      API_KEY,\n      URLS.SINGLE_SERIES_URL,\n      dataId\n    );\n    createSeriesModalMarkup(data);\n  }\n}\n","export const refs2 = {\n  form: document.querySelector('.search-form-series'),\n  seriesContainer: document.querySelector('.series-data-container'),\n  seriesList: document.querySelector('.series-list'),\n  targetObserverSeries: document.querySelector('.js-guard-series'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.series-backdrop'),\n  modalWrapper: document.querySelector('.series-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-series'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs2 } from '../refs2.js';\nimport { URLS } from '../constants.js';\n\nexport function renderTrendingSeries(series) {\n  console.log(series);\n  const trendingSeries = series\n    .map(\n      ({\n        id,\n        name,\n        overview,\n        vote_average,\n        poster_path,\n        first_air_date,\n      }) => `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${\n              URLS.POSTER_URL\n            }${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n            <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n            <span class=\"series-rate\">Rating: ${vote_average.toFixed(2)}</span>\n            </div>\n          </li>`\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', trendingSeries);\n}\n","import { refs2 } from '../refs2';\nimport { URLS, genres } from '../constants';\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundSeries(foundSeries) {\n  const foundItems = foundSeries\n    .map(\n      ({\n        id,\n        genre_ids,\n        name,\n        overview,\n        first_air_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${\n              URLS.POSTER_URL\n            }${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n              <p class=\"series-genres\">Genres: ${genreNames || 'No data'}</p>\n                <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n                 <span class=\"series-rate\">Rating: ${vote_average.toFixed(\n                   2\n                 )}</span> \n                 <span class=\"series-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchSeries(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n","import axios from 'axios';\nlet isLoading = false;\n\nexport async function fetchSingleSeries(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const seriesMovies = response.data;\n    return seriesMovies;\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs2 } from '../refs2';\nimport { URLS } from '../constants';\n\nimport { notifyAddSuccess, notifyIsInFavorites } from './notifyWarnings';\n\nlet favoriteSeriesList =\n  JSON.parse(localStorage.getItem('favorite_series')) ?? [];\n\nexport async function createSeriesModalMarkup(data) {\n  const {\n    id,\n    created_by,\n    in_production,\n    languages,\n    genres,\n    origin_country,\n    name,\n    first_air_date,\n    number_of_seasons,\n    number_of_episodes,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languagesSpoken = languages.map(language => language).join(', ');\n  const creators = created_by.map(creator => creator.name).join(', ');\n\n  let markup = `<div class=\"series-item-detailed\" id=${id}>\n       <img src=\"${URLS.POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n        <h2 class=\"modal-title\">${name}</h2>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n       \n        <p class=\"orig-country\"><span class=\"modal-bold\">Origin country:</span> ${origin_country}</p>\n        <p class=\"in-production\"><span class=\"modal-bold\">Still in production:</span> ${in_production}</p>\n      \n\n     \n        <p class=\"first-air-date\"><span class=\"modal-bold\">First air date:</span> ${first_air_date}</p>\n        <p class=\"modal-series-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n      \n        <p class=\"created-by\"><span class=\"modal-bold\">Creators:</span> ${creators}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languagesSpoken}</p>\n        <div class=\"series-length\">\n        <span class=\"seasons\"><span class=\"modal-bold\">Number of seasons:</span> ${number_of_seasons}</span>\n        <span class=\"episodes\"><span class=\"modal-bold\">Number of episodes:</span> ${number_of_episodes}</span>\n        </div>\n\n        <div class=\"series-modal-rate\">\n         <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n         <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n         </div>\n\n         <button type=\"button\" class=\"series-fav\">Add to favorites</button>\n   \n      </div>`;\n\n  refs2.backdrop.classList.remove('is-hidden');\n  refs2.modalWrapper.innerHTML = markup;\n\n  refs2.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs2.closeBtn.addEventListener('click', onModalClose);\n\n  /* ======================  ADD TO FAVORITES ======================  */\n  const addFavBtn = document.querySelector('.series-fav');\n  addFavBtn.addEventListener('click', () => addToFavorites(data));\n}\n\nfunction onModalClose() {\n  refs2.modalWrapper.innerHTML = '';\n\n  refs2.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs2.backdrop.removeEventListener('click', onModalClose);\n  refs2.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n\nfunction addToFavorites(series) {\n  const inStorage = favoriteSeriesList.some(fav => fav.id === series.id);\n  const seriesItem = {\n    id: series.id,\n    name: series.name,\n    createdBy: series.created_by,\n    inProduction: series.in_production,\n    languages: series.languages,\n    genres: series.genres,\n    originCountry: series.origin_country,\n    posterPath: series.poster_path,\n    firstAir: series.first_air_date,\n    numberSeasons: series.number_of_seasons,\n    numberEpisodes: series.number_of_episodes,\n    overview: series.overview,\n    voteAverage: series.vote_average,\n    voteCount: series.vote_count,\n  };\n\n  if (!inStorage) {\n    favoriteSeriesList.push(seriesItem);\n    localStorage.setItem('favorite_series', JSON.stringify(favoriteSeriesList));\n    notifyAddSuccess(series.name);\n  } else {\n    notifyIsInFavorites(series.name);\n  }\n}\n"],"names":["$2shzp","parcelRequire","$7db85db93c52d1f5$export$dd54c2f2d692d36f","form","document","querySelector","seriesContainer","seriesList","targetObserverSeries","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$c0554391f1171323$export$3a1ca11763a591fc","series","console","log","trendingSeries","map","id","name","overview","vote_average","poster_path","first_air_date","$8G1wF","URLS","POSTER_URL","toFixed","join","insertAdjacentHTML","$30d0433790b6ea74$export$1035edcb0883cee","foundSeries","foundItems","genre_ids","vote_count","genreNames","genre","genres","find","g","filter","Boolean","$30d0433790b6ea74$var$getGenres","async","$8ef913dc6cce37c1$export$87284bbc4af8de3","key","url","searchQuery","page","response","default","get","error","message","$e0da6ba3a4786721$var$isLoading","$e0da6ba3a4786721$export$18d2d9a21124daea","data","$39999d9f05b7ce7b$var$ref","$39999d9f05b7ce7b$var$favoriteSeriesList","JSON","parse","localStorage","getItem","$39999d9f05b7ce7b$export$6b84cf0fb22670f7","created_by","in_production","languages","origin_country","number_of_seasons","number_of_episodes","languagesSpoken","language","creators","creator","markup","classList","remove","innerHTML","addEventListener","$39999d9f05b7ce7b$var$onBackdropClick","window","$39999d9f05b7ce7b$var$onEscKeyPress","$39999d9f05b7ce7b$var$onModalClose","inStorage","some","fav","seriesItem","createdBy","inProduction","originCountry","posterPath","firstAir","numberSeasons","numberEpisodes","voteAverage","voteCount","$kj8Rd","notifyIsInFavorites","push","setItem","stringify","notifyAddSuccess","$39999d9f05b7ce7b$var$addToFavorites","add","removeEventListener","event","code","currentTarget","target","$c062f734705d647a$var$query","$c062f734705d647a$var$currentPage","$c062f734705d647a$var$currentSearchPage","$c062f734705d647a$var$isLoading","$c062f734705d647a$var$fetchTrendingSeries","currentPage1","total_pages","notifyEndResults","$c062f734705d647a$var$trendingObserver","unobserve","results","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","BASE_SERIES_URL","then","trendingObserverOptions","observe","catch","err","e","preventDefault","$c062f734705d647a$var$searchObserver","value","trim","seriesData","SEARCH_SERIES_URL","total_results","length","notifyNoResults","dataFound","searchObserverOptions","targetElement","closest","dataId","getAttribute","SINGLE_SERIES_URL"],"version":3,"file":"trendingseries.c9fe9bef.js.map"}