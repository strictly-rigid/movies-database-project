{"mappings":"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","sources":["src/js/TrendingPeople/fetchTrendingPeople.js","src/js/refs3.js","src/js/constants.js","src/js/TrendingPeople/renderTrendingPeople.js","src/js/TrendingPeople/renderFoundPerson.js","src/js/TrendingPeople/searchPerson.js","src/js/TrendingPeople/fetchSinglePerson.js","src/js/helpers/createPersonModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport { URLS } from '../constants';\nimport { renderTrendingPeople } from './renderTrendingPeople';\nimport { renderFoundPerson } from './renderFoundPerson';\nimport { searchPerson } from './searchPerson';\nimport { fetchSinglePerson } from './fetchSinglePerson';\nimport { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingPeople(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs3.targetObserverPeople);\n    }\n    const dataPeople = response.data.results;\n    return dataPeople;\n  } catch (error) {\n    console.log('Error fetching trending people:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage).then(\n        data => renderTrendingPeople(data)\n      );\n    }\n  });\n}\n\nfetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n  .then(data => renderTrendingPeople(data))\n  .then(() => trendingObserver.observe(refs3.targetObserverPeople))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs3.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs3.targetObserverPeople);\n  searchObserver.unobserve(refs3.targetObserverSearch);\n\n  refs3.backdrop.classList.add('is-hidden');\n  query = refs3.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs3.peopleList.innerHTML = '';\n    refs3.endResultsInfo.classList.add('visually-hidden');\n\n    const personData = await searchPerson(\n      API_KEY,\n      URLS.SEARCH_PERSON_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = personData.data;\n\n    if (results && results.length > 0) {\n      renderFoundPerson(results);\n      searchObserver.observe(refs3.targetObserverSearch);\n    } else {\n      refs3.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      personData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs3.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    refs3.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchPerson(\n        API_KEY,\n        URLS.SEARCH_PERSON_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundPerson(results);\n      });\n    }\n  });\n}\n\n/* ====================== PERSON'S DETAILS ======================  */\n\nrefs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\nasync function onPersonItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.person-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSinglePerson(\n      API_KEY,\n      URLS.SINGLE_PERSON_URL,\n      dataId\n    );\n    createPersonModalMarkup(data);\n  }\n}\n","export const refs3 = {\n  form: document.querySelector('.search-form-people'),\n  peopleContainer: document.querySelector('.people-data-container'),\n  peopleList: document.querySelector('.people-list'),\n  targetObserverPeople: document.querySelector('.js-guard-people'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.person-backdrop'),\n  modalWrapper: document.querySelector('.person-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-people'),\n  closeBtn: document.querySelector('.modal-people-close-icon'),\n};\n","export const URLS = {\n  BASE_MOVIES_URL: 'https://api.themoviedb.org/3/trending/movie/week',\n  BASE_SERIES_URL: 'https://api.themoviedb.org/3/trending/tv/week',\n  BASE_PEOPLE_URL: 'https://api.themoviedb.org/3/trending/person/week',\n  SEARCH_MOVIE_URL: 'https://api.themoviedb.org/3/search/movie',\n  SEARCH_SERIES_URL: 'https://api.themoviedb.org/3/search/tv',\n  SINGLE_MOVIE_URL: 'https://api.themoviedb.org/3/movie',\n  SINGLE_SERIES_URL: 'https://api.themoviedb.org/3/tv',\n  SEARCH_PERSON_URL: 'https://api.themoviedb.org/3/search/person',\n  SINGLE_PERSON_URL: 'https://api.themoviedb.org/3/person',\n};\n\nexport const genres = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];\n\nexport const genders = {\n  0: 'Not set / not specified',\n  1: 'Female',\n  2: 'Male',\n  3: 'Non-binary',\n};\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderTrendingPeople(people) {\n  console.log(people);\n  const trendingPeople = people\n    .map(({ id, name, gender, known_for_department, profile_path }) => {\n      // const titles = known_for.map(item => item.title || item.name).join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n          <div class=\"person-info\">\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n            <p class=\"popular-movies\">Known for: ${\n              known_for_department || 'No data'\n            } </p>\n          </div>\n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', trendingPeople);\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderFoundPerson(foundPerson) {\n  // console.log(foundPerson);\n  const foundItems = foundPerson\n    .map(({ id, known_for_department, name, gender, profile_path }) => {\n      // const titles = known_for_department\n      //   .map(item => item.title || item.name)\n      //   .join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n          \n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchPerson(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    console.log(response);\n\n    return response;\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  }\n}\n","import axios from 'axios';\n\nlet isLoading = false;\n\nexport async function fetchSinglePerson(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    // console.log(response);\n    const personDetails = response.data;\n    return personDetails;\n  } catch (error) {\n    console.log('Error fetching person\"s data:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nconst favoriteList = JSON.parse(localStorage.getItem('favorites')) ?? [];\n\nexport async function createPersonModalMarkup(data) {\n  const {\n    id,\n    birthday,\n    biography,\n    place_of_birth,\n    gender,\n    name,\n    known_for_department,\n    profile_path,\n    popularity,\n  } = data;\n  console.log(data);\n\n  const personImg = profile_path\n    ? `${POSTER_URL}${profile_path}`\n    : DEFAULT_IMAGE;\n  const personGender = genders[gender] || 'Not specified';\n\n  let markup = `<div class=\"person-item-detailed\" id=${id}>\n           <img src=\"${personImg}\" class=\"person-image\" alt=\"person image\">\n            <h2 class=\"modal-name modal-title\">${name}</h2>\n            <p class=\"gender\"> <span class=\"modal-bold\"> Gender:</span> ${personGender}</p>\n            <p class=\"birthday\"> <span class=\"modal-bold\"> Born:</span> ${\n              birthday || 'unknown'\n            }</p>\n            <p class=\"place_of_birth\"> <span class=\"modal-bold\"> Place of birth:</span> ${\n              place_of_birth || 'unknown'\n            }</span>\n            <p class=\"known_for\"> <span class=\"modal-bold\"> Known for:</span> ${\n              known_for_department || 'No data'\n            }</p>\n            <p class=\"biography\"> <span class=\"modal-bold\">Bio:</span> ${\n              biography || 'no info'\n            }</p>\n            <p class=\"popularity\"> <span class=\"modal-bold\"> Popularity:</span> ${popularity}</p>\n            <button type=\"button\" class=\"person-fav\">Add to favorites</button>\n          </div>`;\n\n  refs3.backdrop.classList.remove('is-hidden');\n  refs3.modalWrapper.innerHTML = markup;\n\n  refs3.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs3.closeBtn.addEventListener('click', onModalClose);\n\n  /* ======================  ADD TO FAVORITES ======================  */\n  const addFavBtn = document.querySelector('.person-fav');\n  addFavBtn.addEventListener('click', () => addToFavorites(data));\n}\n\nfunction onModalClose() {\n  refs3.modalWrapper.innerHTML = '';\n\n  refs3.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs3.backdrop.removeEventListener('click', onModalClose);\n  refs3.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n\nfunction addToFavorites(person) {\n  const inStorage = favoriteList.some(fav => fav.id === person.id);\n  const personItem = {\n    id: person.id,\n    name: person.name,\n    gender: person.gender,\n    birthday: person.birthday,\n    biography: person.biography,\n    knownFor: person.known_for_department,\n    place_of_birth: person.place_of_birth,\n    profile_path: person.profile_path,\n    popularity: person.popularity,\n  };\n\n  if (!inStorage) {\n    favoriteList.push(personItem);\n    localStorage.setItem('favorites', JSON.stringify(favoriteList));\n    alert(`${person.name} has been added to favorites!`);\n  } else {\n    alert(`${person.name} is already in your favorites.`);\n  }\n}\n"],"names":["$2shzp","parcelRequire","$e906e16ee62abe85$export$1667d6aa2cee11d8","form","document","querySelector","peopleContainer","peopleList","targetObserverPeople","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$65136e012e05e2d7$export$2389c26b9ec125dd","BASE_MOVIES_URL","BASE_SERIES_URL","BASE_PEOPLE_URL","SEARCH_MOVIE_URL","SEARCH_SERIES_URL","SINGLE_MOVIE_URL","SINGLE_SERIES_URL","SEARCH_PERSON_URL","SINGLE_PERSON_URL","$65136e012e05e2d7$export$1ad618005f166230","$45ebb74e1e41cb42$export$1f3529df0466b8e9","people","console","log","trendingPeople","map","id","name","gender","known_for_department","profile_path","join","insertAdjacentHTML","$3031f43cc7f53ebe$export$706c7750293f7a13","foundPerson","foundItems","async","$33a9d54fb0f6f81e$export$791a87ce43433885","key","url","searchQuery","page","response","default","get","error","message","$d289a749cf5d8107$var$isLoading","$d289a749cf5d8107$export$bda05f064222d25a","data","$06bcc255bee61c4e$var$ref","$06bcc255bee61c4e$var$favoriteList","JSON","parse","localStorage","getItem","$06bcc255bee61c4e$export$9a7ad2d283fab89","birthday","biography","place_of_birth","popularity","markup","classList","remove","innerHTML","addEventListener","$06bcc255bee61c4e$var$onBackdropClick","window","$06bcc255bee61c4e$var$onEscKeyPress","$06bcc255bee61c4e$var$onModalClose","person","inStorage","some","fav","personItem","knownFor","alert","push","setItem","stringify","$06bcc255bee61c4e$var$addToFavorites","add","removeEventListener","event","code","currentTarget","target","$313ad1f2210997b7$var$query","$313ad1f2210997b7$var$currentPage","$313ad1f2210997b7$var$currentSearchPage","$313ad1f2210997b7$var$isLoading","$313ad1f2210997b7$var$fetchTrendingPeople","currentPage1","total_pages","$kj8Rd","notifyEndResults","$313ad1f2210997b7$var$trendingObserver","unobserve","results","IntersectionObserver","entries","forEach","entry","isIntersecting","then","root","rootMargin","threshold","observe","catch","err","e","preventDefault","$313ad1f2210997b7$var$searchObserver","value","trim","personData","total_results","length","notifyNoResults","dataFound","targetElement","closest","dataId","getAttribute"],"version":3,"file":"trendingpeople.fcfbca59.js.map"}