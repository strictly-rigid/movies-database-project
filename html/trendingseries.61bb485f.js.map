{"mappings":"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","sources":["src/js/TrendingSeries/fetchTrendingSeries.js","src/js/refs2.js","src/js/helpers/getGenres.js","src/js/TrendingSeries/renderTrendingSeries.js","src/js/TrendingSeries/renderFoundSeries.js","src/js/TrendingSeries/searchSeries.js","src/js/TrendingSeries/fetchSingleSeries.js","src/js/helpers/createSeriesModalMarkup.js"],"sourcesContent":["import { refs2 } from '../refs2';\nimport {\n  URLS,\n  trendingObserverOptions,\n  searchObserverOptions,\n} from '../constants';\nimport { renderTrendingSeries } from './renderTrendingSeries';\nimport { renderFoundSeries } from './renderFoundSeries';\nimport { searchSeries } from './searchSeries';\nimport { fetchSingleSeries } from './fetchSingleSeries';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\nimport { fetchData } from '../helpers/fetchers';\nimport { setNewObserver } from '../helpers/setNewObserver';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const API_KEY = process.env.API_KEY;\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingSeries(currentPage) {\n  try {\n    const response = await fetchData(URLS.BASE_SERIES_URL, {\n      api_key: API_KEY,\n      page: currentPage,\n    });\n\n    if (response.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs2.targetObserver);\n    }\n    const dataSeries = response.results;\n    return dataSeries;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n\nconst trendingObserver = setNewObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\n\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingSeries(currentPage).then(data => renderTrendingSeries(data));\n    }\n  });\n}\n\n// Initializing fetch request for trending\n\nfetchTrendingSeries(currentPage)\n  .then(data => renderTrendingSeries(data))\n  .then(() => trendingObserver.observe(refs2.targetObserver))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs2.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  refs2.backdrop.classList.add('is-hidden');\n  query = refs2.form.searchQuery.value.trim();\n\n  resetState();\n\n  try {\n    const seriesData = await searchSeries(\n      API_KEY,\n      URLS.SEARCH_SERIES_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = seriesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundSeries(results);\n      searchObserver.observe(refs2.targetObserverSearch);\n    } else {\n      refs2.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      seriesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs2.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    refs2.form.searchQuery.value = '';\n  }\n}\n\nfunction resetState() {\n  trendingObserver.unobserve(refs2.targetObserver);\n  searchObserver.unobserve(refs2.targetObserverSearch);\n\n  refs2.list.innerHTML = '';\n  refs2.endResultsInfo.classList.add('visually-hidden');\n\n  currentSearchPage = 1;\n}\n\nconst searchObserver = setNewObserver(onLoadMoreSearch, searchObserverOptions);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchSeries(\n        API_KEY,\n        URLS.SEARCH_SERIES_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundSeries(results);\n      });\n    }\n  });\n}\n\n/* ======================  SERIES' DETAILS ======================  */\n\nrefs2.dataContainer.addEventListener('click', onSeriesItemClick);\n\nasync function onSeriesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.series-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleSeries(\n      API_KEY,\n      URLS.SINGLE_SERIES_URL,\n      dataId\n    );\n    createSeriesModalMarkup(data);\n  }\n}\n","export const refs2 = {\n  form: document.querySelector('.search-form-series'),\n  dataContainer: document.querySelector('.series-data-container'),\n  list: document.querySelector('.series-list'),\n  targetObserver: document.querySelector('.js-guard-series'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.series-backdrop'),\n  modalWrapper: document.querySelector('.series-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-series'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","export function getGenres(genre_ids, genres) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n","import { refs2 } from '../refs2.js';\nimport { URLS, genres } from '../constants.js';\nimport { getGenres } from '../helpers/getGenres';\n\nexport function renderTrendingSeries(series) {\n  const trendingSeries = series\n    .map(\n      ({\n        id,\n        name,\n        overview,\n        vote_average,\n        poster_path,\n        first_air_date,\n        genre_ids,\n      }) => {\n        const genreNames = getGenres(genre_ids, genres);\n\n        return `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${\n              URLS.POSTER_URL\n            }${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n            <p class=\"series-genres\">Genres: ${genreNames || 'No data'}</p>\n            <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n            <span class=\"series-rate\">Rating: ${vote_average.toFixed(2)}</span>\n            </div>\n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.list.insertAdjacentHTML('beforeend', trendingSeries);\n}\n","import { refs2 } from '../refs2';\nimport { URLS, genres } from '../constants';\nimport { getGenres } from '../helpers/getGenres';\n\nexport function renderFoundSeries(foundSeries) {\n  const foundItems = foundSeries\n    .map(\n      ({\n        id,\n        genre_ids,\n        name,\n        overview,\n        first_air_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids, genres);\n\n        return `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${\n              URLS.POSTER_URL\n            }${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n              <p class=\"series-genres\">Genres: ${genreNames || 'No data'}</p>\n                <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n                 <span class=\"series-rate\">Rating: ${vote_average.toFixed(\n                   2\n                 )}</span> \n                 <span class=\"series-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.list.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchSeries(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n","import axios from 'axios';\n\nexport async function fetchSingleSeries(key, url, id) {\n  try {\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n\n    const seriesMovies = response.data;\n    return seriesMovies;\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  }\n}\n","import { refs2 } from '../refs2';\nimport { URLS } from '../constants';\n\nimport { onBackdropClick, onEscKeyPress } from './onCloseFunctions';\nimport { notifyAddSuccess, notifyIsInFavorites } from './notifyWarnings';\n\nlet favoriteSeriesList =\n  JSON.parse(localStorage.getItem('favorite_series')) ?? [];\n\nexport async function createSeriesModalMarkup(data) {\n  const {\n    id,\n    created_by,\n    in_production,\n    languages,\n    genres,\n    origin_country,\n    name,\n    first_air_date,\n    number_of_seasons,\n    number_of_episodes,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languagesSpoken = languages.map(language => language).join(', ');\n  const creators = created_by.map(creator => creator.name).join(', ');\n\n  let markup = `<div class=\"series-item-detailed\" id=${id}>\n       <img src=\"${URLS.POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n        <h2 class=\"modal-title\">${name}</h2>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n       \n        <p class=\"orig-country\"><span class=\"modal-bold\">Origin country:</span> ${origin_country}</p>\n        <p class=\"in-production\"><span class=\"modal-bold\">Still in production:</span> ${in_production}</p>\n      \n\n     \n        <p class=\"first-air-date\"><span class=\"modal-bold\">First air date:</span> ${first_air_date}</p>\n        <p class=\"modal-series-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n      \n        <p class=\"created-by\"><span class=\"modal-bold\">Creators:</span> ${creators}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languagesSpoken}</p>\n        <div class=\"series-length\">\n        <span class=\"seasons\"><span class=\"modal-bold\">Number of seasons:</span> ${number_of_seasons}</span>\n        <span class=\"episodes\"><span class=\"modal-bold\">Number of episodes:</span> ${number_of_episodes}</span>\n        </div>\n\n        <div class=\"series-modal-rate\">\n         <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n         <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n         </div>\n\n         <button type=\"button\" class=\"series-fav\">Add to favorites</button>\n   \n      </div>`;\n\n  refs2.backdrop.classList.remove('is-hidden');\n  refs2.modalWrapper.innerHTML = markup;\n\n  refs2.backdrop.addEventListener('click', event =>\n    onBackdropClick(event, onModalClose)\n  );\n  window.addEventListener('keydown', event =>\n    onEscKeyPress(event, onModalClose)\n  );\n  refs2.closeBtn.addEventListener('click', onModalClose);\n\n  /* ======================  ADD TO FAVORITES ======================  */\n  const addFavBtn = document.querySelector('.series-fav');\n  addFavBtn.addEventListener('click', () => addToFavorites(data));\n}\n\nfunction onModalClose() {\n  refs2.modalWrapper.innerHTML = '';\n\n  refs2.backdrop.classList.add('is-hidden');\n\n  refs2.backdrop.removeEventListener('click', onModalClose);\n  refs2.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction addToFavorites(series) {\n  const inStorage = favoriteSeriesList.some(fav => fav.id === series.id);\n  const seriesItem = {\n    id: series.id,\n    name: series.name,\n    createdBy: series.created_by,\n    inProduction: series.in_production,\n    languages: series.languages,\n    genres: series.genres,\n    originCountry: series.origin_country,\n    posterPath: series.poster_path,\n    firstAir: series.first_air_date,\n    numberSeasons: series.number_of_seasons,\n    numberEpisodes: series.number_of_episodes,\n    overview: series.overview,\n    voteAverage: series.vote_average,\n    voteCount: series.vote_count,\n  };\n\n  if (!inStorage) {\n    favoriteSeriesList.push(seriesItem);\n    localStorage.setItem('favorite_series', JSON.stringify(favoriteSeriesList));\n    notifyAddSuccess(series.name);\n  } else {\n    notifyIsInFavorites(series.name);\n  }\n}\n"],"names":["$bpxeT","parcelRequire","$f7f0efa6c7f437e8$export$dd54c2f2d692d36f","form","document","querySelector","dataContainer","list","targetObserver","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$85c58b14da9c2029$export$c5604fa8028da00","genre_ids","genres","map","id","genre","find","g","name","filter","Boolean","join","$70471455671d24b4$export$3a1ca11763a591fc","series","trendingSeries","param","overview","vote_average","poster_path","first_air_date","genreNames","$4s6iC","concat","URLS","POSTER_URL","toFixed","insertAdjacentHTML","$39d3062942c19417$export$1035edcb0883cee","foundSeries","foundItems","vote_count","$dbda837601adec74$export$87284bbc4af8de3","key","url","searchQuery","page","$dbda837601adec74$var$_searchSeries","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","default","get","_ctx","sent","console","log","t0","message","$6b848aded986c971$export$18d2d9a21124daea","$6b848aded986c971$var$_fetchSingleSeries","seriesMovies","data","$7bb17b9a23564351$var$ref","$7bb17b9a23564351$var$favoriteSeriesList","JSON","parse","localStorage","getItem","$7bb17b9a23564351$export$6b84cf0fb22670f7","$7bb17b9a23564351$var$_createSeriesModalMarkup","created_by","in_production","languages","origin_country","number_of_seasons","number_of_episodes","languagesSpoken","creators","markup","language","creator","classList","remove","innerHTML","addEventListener","event","$gOfal","onBackdropClick","$7bb17b9a23564351$var$onModalClose","window","onEscKeyPress","$7bb17b9a23564351$var$addToFavorites","add","removeEventListener","inStorage","some","fav","seriesItem","createdBy","inProduction","originCountry","posterPath","firstAir","numberSeasons","numberEpisodes","voteAverage","voteCount","$lG111","notifyIsInFavorites","push","setItem","stringify","notifyAddSuccess","$4bd51fddaa51488b$var$API_KEY","$4bd51fddaa51488b$var$query","$4bd51fddaa51488b$var$currentPage","$4bd51fddaa51488b$var$currentSearchPage","$4bd51fddaa51488b$var$fetchTrendingSeries","currentPage1","$4bd51fddaa51488b$var$_fetchTrendingSeries","dataSeries","$ghquj","fetchData","BASE_SERIES_URL","api_key","total_pages","notifyEndResults","$4bd51fddaa51488b$var$trendingObserver","unobserve","results","$7t6Gw","setNewObserver","entries","forEach","entry","isIntersecting","then","trendingObserverOptions","$4bd51fddaa51488b$var$_searchByName","e","seriesData","_data","total_results","preventDefault","value","trim","$4bd51fddaa51488b$var$resetState","SEARCH_SERIES_URL","length","$4bd51fddaa51488b$var$searchObserver","observe","notifyNoResults","catch","err","dataFound","searchObserverOptions","$4bd51fddaa51488b$var$_onSeriesItemClick","targetElement","dataId","target","closest","getAttribute","SINGLE_SERIES_URL"],"version":3,"file":"trendingseries.61bb485f.js.map"}