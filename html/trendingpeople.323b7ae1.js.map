{"mappings":"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","sources":["src/js/TrendingPeople/fetchTrendingPeople.js","src/js/refs3.js","src/js/TrendingPeople/renderTrendingPeople.js","src/js/TrendingPeople/renderFoundPerson.js","src/js/TrendingPeople/searchPerson.js","src/js/TrendingPeople/fetchSinglePerson.js","src/js/helpers/createPersonModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport { URLS } from '../constants';\nimport { renderTrendingPeople } from './renderTrendingPeople';\nimport { renderFoundPerson } from './renderFoundPerson';\nimport { searchPerson } from './searchPerson';\nimport { fetchSinglePerson } from './fetchSinglePerson';\nimport { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingPeople(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n    const dataPeople = response.data.results;\n    return dataPeople;\n  } catch (error) {\n    console.log('Error fetching trending people:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage).then(\n        data => renderTrendingPeople(data)\n      );\n    }\n  });\n}\n\nfetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n  .then(data => renderTrendingPeople(data))\n  .then(() => trendingObserver.observe(refs3.targetObserverPeople))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs3.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs3.targetObserverPeople);\n  refs3.backdrop.classList.add('is-hidden');\n  query = refs3.form.searchQuery.value.trim();\n\n  try {\n    refs3.peopleList.innerHTML = '';\n\n    const personData = await searchPerson(\n      API_KEY,\n      URLS.SEARCH_PERSON_URL,\n      query,\n      currentSearchPage\n    );\n\n    if (personData && personData.length > 0) {\n      renderFoundPerson(personData);\n    }\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    searchObserver.observe(refs3.targetObserverSearch);\n    refs3.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchPerson(\n        API_KEY,\n        URLS.SEARCH_PERSON_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => renderFoundPerson(dataFound));\n    }\n  });\n}\n\n/* ====================== PERSON'S DETAILS ======================  */\n\nrefs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\nasync function onPersonItemClick(e) {\n  e.preventDefault();\n  console.log('Hellow from callback');\n  const targetElement = e.target.closest('.person-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSinglePerson(\n      API_KEY,\n      URLS.SINGLE_PERSON_URL,\n      dataId\n    );\n    createPersonModalMarkup(data);\n  }\n}\n","export const refs3 = {\n  form: document.querySelector('.search-form-people'),\n  peopleContainer: document.querySelector('.people-data-container'),\n  peopleList: document.querySelector('.people-list'),\n  targetObserverPeople: document.querySelector('.js-guard-people'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.person-backdrop'),\n  modalWrapper: document.querySelector('.person-item-wrapper'),\n};\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderTrendingPeople(people) {\n  console.log(people);\n  const trendingPeople = people\n    .map(({ id, name, gender, known_for_department, profile_path }) => {\n      // const titles = known_for.map(item => item.title || item.name).join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n          <div class=\"person-info\">\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n            <p class=\"popular-movies\">Known for: ${known_for_department}</p>\n          </div>\n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', trendingPeople);\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderFoundPerson(foundPerson) {\n  console.log(foundPerson);\n  const foundItems = foundPerson\n    .map(({ id, known_for_department, name, gender, profile_path }) => {\n      // const titles = known_for_department\n      //   .map(item => item.title || item.name)\n      //   .join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n          \n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\nimport { refs3 } from '../refs3.js';\n\nexport async function searchPerson(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    console.log(response);\n    const dataFoundPerson = response.data.results;\n    return dataFoundPerson;\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  }\n}\n","import axios from 'axios';\n\nlet isLoading = false;\n\nexport async function fetchSinglePerson(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    // console.log(response);\n    const personDetails = response.data;\n    return personDetails;\n  } catch (error) {\n    console.log('Error fetching person\"s data:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs3 } from '../refs3';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createPersonModalMarkup(data) {\n  const {\n    id,\n    birthday,\n    biography,\n    place_of_birth,\n    gender,\n    name,\n    known_for_department,\n    poster_path,\n    popularity,\n  } = data;\n  console.log(data);\n\n  let markup = `<div class=\"person-item-detailed\" id=${id}>\n           <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <h2 class=\"modal-name\">${name}</h2>\n            <span class=\"gender\">Gender: ${gender}</span>\n            <span class=\"birthday\">Born: ${birthday}</span>\n            <span class=\"place_of_birth\">Place of birth:${place_of_birth}</span>\n            <p class=\"known_for\">Known for:${known_for_department}</p>\n            <p class=\"biography\">Bio: ${biography}</p>\n            <span class=\"popularity\">Popularity: ${popularity}</span>\n          </div>`;\n\n  refs3.backdrop.classList.remove('is-hidden');\n  refs3.modalWrapper.innerHTML = markup;\n\n  //   refs.closeBtn = document.querySelector('.modal-close-btn');\n  //   refs.closeBtn.addEventListener('click', onModalClose);\n  //   window.addEventListener('keydown', onEscKeyPress);\n  //   console.log(refs.closeBtn);\n}\n"],"names":["$bpxeT","parcelRequire","$a29f26a4a40c2f0a$var$API_KEY","$a29f26a4a40c2f0a$var$query","$a29f26a4a40c2f0a$var$currentPage","$a29f26a4a40c2f0a$var$currentSearchPage","$a29f26a4a40c2f0a$var$fetchTrendingPeople","key","url","currentPage1","$a29f26a4a40c2f0a$var$_fetchTrendingPeople","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","dataPeople","$dIxxU","default","get","concat","_ctx","sent","console","log","data","results","t0","message","$a29f26a4a40c2f0a$var$trendingObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","$4s6iC","URLS","BASE_PEOPLE_URL","then","$76fvS","renderTrendingPeople","root","rootMargin","threshold","$a29f26a4a40c2f0a$var$_searchByName","e","personData","preventDefault","unobserve","$e9iRm","refs3","targetObserverPeople","backdrop","classList","add","form","searchQuery","value","trim","peopleList","innerHTML","$e3qRy","searchPerson","SEARCH_PERSON_URL","length","$iR07C","renderFoundPerson","$a29f26a4a40c2f0a$var$searchObserver","observe","targetObserverSearch","catch","err","addEventListener","dataFound","$a29f26a4a40c2f0a$var$_onPersonItemClick","targetElement","dataId","target","closest","getAttribute","$iKlHq","fetchSinglePerson","SINGLE_PERSON_URL","$6W5Ul","createPersonModalMarkup","peopleContainer","$a4d089102ee19eea$export$1667d6aa2cee11d8","document","querySelector","modalWrapper","$52b520831d0c27f6$export$1f3529df0466b8e9","people","trendingPeople","map","param","id","name","gender","known_for_department","profile_path","imageSrc","personGender","genders","join","insertAdjacentHTML","$db9d45747ac3d0d4$export$706c7750293f7a13","foundPerson","foundItems","$a3b62ede7df7fa7d$export$791a87ce43433885","page","$a3b62ede7df7fa7d$var$_searchPerson","dataFoundPerson","$da5d5aed0ab69a80$export$bda05f064222d25a","$da5d5aed0ab69a80$var$_fetchSinglePerson","personDetails","$50ccbe03e1f09353$var$POSTER_URL","$50ccbe03e1f09353$export$9a7ad2d283fab89","$50ccbe03e1f09353$var$_createPersonModalMarkup","birthday","biography","place_of_birth","poster_path","popularity","markup","remove"],"version":3,"file":"trendingpeople.323b7ae1.js.map"}