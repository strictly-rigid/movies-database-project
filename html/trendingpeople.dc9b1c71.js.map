{"mappings":"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","sources":["src/js/TrendingPeople/fetchTrendingPeople.js","src/js/refs3.js","src/js/TrendingPeople/renderTrendingPeople.js","src/js/TrendingPeople/renderFoundPerson.js","src/js/TrendingPeople/searchPerson.js","src/js/TrendingPeople/fetchSinglePerson.js","src/js/helpers/createPersonModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport { URLS } from '../constants';\nimport { renderTrendingPeople } from './renderTrendingPeople';\nimport { renderFoundPerson } from './renderFoundPerson';\nimport { searchPerson } from './searchPerson';\nimport { fetchSinglePerson } from './fetchSinglePerson';\nimport { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingPeople(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs3.targetObserverPeople);\n    }\n    const dataPeople = response.data.results;\n    return dataPeople;\n  } catch (error) {\n    console.log('Error fetching trending people:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage).then(\n        data => renderTrendingPeople(data)\n      );\n    }\n  });\n}\n\nfetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n  .then(data => renderTrendingPeople(data))\n  .then(() => trendingObserver.observe(refs3.targetObserverPeople))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs3.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs3.targetObserverPeople);\n  searchObserver.unobserve(refs3.targetObserverSearch);\n\n  refs3.backdrop.classList.add('is-hidden');\n  query = refs3.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs3.peopleList.innerHTML = '';\n    refs3.endResultsInfo.classList.add('visually-hidden');\n\n    const personData = await searchPerson(\n      API_KEY,\n      URLS.SEARCH_PERSON_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = personData.data;\n\n    if (results && results.length > 0) {\n      renderFoundPerson(results);\n      searchObserver.observe(refs3.targetObserverSearch);\n    } else {\n      refs3.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      personData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs3.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    refs3.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchPerson(\n        API_KEY,\n        URLS.SEARCH_PERSON_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundPerson(results);\n      });\n    }\n  });\n}\n\n/* ====================== PERSON'S DETAILS ======================  */\n\nrefs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\nasync function onPersonItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.person-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSinglePerson(\n      API_KEY,\n      URLS.SINGLE_PERSON_URL,\n      dataId\n    );\n    createPersonModalMarkup(data);\n  }\n}\n","export const refs3 = {\n  form: document.querySelector('.search-form-people'),\n  peopleContainer: document.querySelector('.people-data-container'),\n  peopleList: document.querySelector('.people-list'),\n  targetObserverPeople: document.querySelector('.js-guard-people'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.person-backdrop'),\n  modalWrapper: document.querySelector('.person-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-people'),\n  closeBtn: document.querySelector('.modal-people-close-icon'),\n};\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderTrendingPeople(people) {\n  console.log(people);\n  const trendingPeople = people\n    .map(({ id, name, gender, known_for_department, profile_path }) => {\n      // const titles = known_for.map(item => item.title || item.name).join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n          <div class=\"person-info\">\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n            <p class=\"popular-movies\">Known for: ${known_for_department}</p>\n          </div>\n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', trendingPeople);\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderFoundPerson(foundPerson) {\n  // console.log(foundPerson);\n  const foundItems = foundPerson\n    .map(({ id, known_for_department, name, gender, profile_path }) => {\n      // const titles = known_for_department\n      //   .map(item => item.title || item.name)\n      //   .join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n          \n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchPerson(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    console.log(response);\n\n    return response;\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  }\n}\n","import axios from 'axios';\n\nlet isLoading = false;\n\nexport async function fetchSinglePerson(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    // console.log(response);\n    const personDetails = response.data;\n    return personDetails;\n  } catch (error) {\n    console.log('Error fetching person\"s data:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport async function createPersonModalMarkup(data) {\n  const {\n    id,\n    birthday,\n    biography,\n    place_of_birth,\n    gender,\n    name,\n    known_for_department,\n    profile_path,\n    popularity,\n  } = data;\n  console.log(data);\n\n  const personImg = profile_path\n    ? `${POSTER_URL}${profile_path}`\n    : DEFAULT_IMAGE;\n  const personGender = genders[gender] || 'Not specified';\n\n  let markup = `<div class=\"person-item-detailed\" id=${id}>\n           <img src=\"${personImg}\" class=\"person-image\" alt=\"person image\">\n            <h2 class=\"modal-name modal-title\">${name}</h2>\n            <p class=\"gender\"> <span class=\"modal-bold\"> Gender:</span> ${personGender}</p>\n            <p class=\"birthday\"> <span class=\"modal-bold\"> Born:</span> ${\n              birthday || 'unknown'\n            }</p>\n            <p class=\"place_of_birth\"> <span class=\"modal-bold\"> Place of birth:</span> ${\n              place_of_birth || 'unknown'\n            }</span>\n            <p class=\"known_for\"> <span class=\"modal-bold\"> Known for:</span> ${known_for_department}</p>\n            <p class=\"biography\"> <span class=\"modal-bold\">Bio:</span> ${\n              biography || 'no info'\n            }</p>\n            <p class=\"popularity\"> <span class=\"modal-bold\"> Popularity:</span> ${popularity}</span>\n          </div>`;\n\n  refs3.backdrop.classList.remove('is-hidden');\n  refs3.modalWrapper.innerHTML = markup;\n\n  refs3.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs3.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs3.modalWrapper.innerHTML = '';\n\n  refs3.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs3.backdrop.removeEventListener('click', onModalClose);\n  refs3.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n"],"names":["$2shzp","parcelRequire","$313ad1f2210997b7$var$API_KEY","$313ad1f2210997b7$var$query","$313ad1f2210997b7$var$currentPage","$313ad1f2210997b7$var$currentSearchPage","$313ad1f2210997b7$var$isLoading","async","$313ad1f2210997b7$var$fetchTrendingPeople","key","url","currentPage1","response","default","get","console","log","data","total_pages","$kj8Rd","notifyEndResults","$313ad1f2210997b7$var$trendingObserver","unobserve","$k0oAw","refs3","targetObserverPeople","results","error","message","IntersectionObserver","entries","forEach","entry","isIntersecting","$8G1wF","URLS","BASE_PEOPLE_URL","then","$60bzg","renderTrendingPeople","root","rootMargin","threshold","observe","catch","err","form","addEventListener","e","preventDefault","$313ad1f2210997b7$var$searchObserver","targetObserverSearch","backdrop","classList","add","searchQuery","value","trim","peopleList","innerHTML","endResultsInfo","personData","$4r0c0","searchPerson","SEARCH_PERSON_URL","total_results","length","$48xzL","renderFoundPerson","remove","notifyNoResults","dataFound","peopleContainer","targetElement","target","closest","dataId","getAttribute","$i4GBV","fetchSinglePerson","SINGLE_PERSON_URL","$zRueC","createPersonModalMarkup","$e906e16ee62abe85$export$1667d6aa2cee11d8","document","querySelector","modalWrapper","closeBtn","$45ebb74e1e41cb42$export$1f3529df0466b8e9","people","trendingPeople","map","id","name","gender","known_for_department","profile_path","genders","join","insertAdjacentHTML","$3031f43cc7f53ebe$export$706c7750293f7a13","foundPerson","foundItems","$33a9d54fb0f6f81e$export$791a87ce43433885","page","$d289a749cf5d8107$var$isLoading","$d289a749cf5d8107$export$bda05f064222d25a","$06bcc255bee61c4e$export$9a7ad2d283fab89","birthday","biography","place_of_birth","popularity","markup","$06bcc255bee61c4e$var$onBackdropClick","window","$06bcc255bee61c4e$var$onEscKeyPress","$06bcc255bee61c4e$var$onModalClose","removeEventListener","event","code","currentTarget"],"version":3,"file":"trendingpeople.dc9b1c71.js.map"}