{"mappings":"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","sources":["src/js/TrendingSeries/fetchTrendingSeries.js","src/js/refs2.js","src/js/TrendingSeries/renderTrendingSeries.js","src/js/TrendingSeries/renderFoundSeries.js","src/js/TrendingSeries/searchSeries.js","src/js/TrendingSeries/fetchSingleSeries.js","src/js/helpers/createSeriesModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { renderTrendingSeries } from './renderTrendingSeries';\nimport { renderFoundSeries } from './renderFoundSeries';\nimport { searchSeries } from './searchSeries';\nimport { fetchSingleSeries } from './fetchSingleSeries';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const BASE_SERIES_URL = 'https://api.themoviedb.org/3/trending/tv/week';\n// const SEARCH_SERIES_URL = 'https://api.themoviedb.org/3/search/tv';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingSeries(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs2.targetObserverSeries);\n    }\n    const dataSeries = response.data.results;\n    return dataSeries;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage).then(\n        data => renderTrendingSeries(data)\n      );\n    }\n  });\n}\n\nfetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n  .then(data => renderTrendingSeries(data))\n  .then(() => trendingObserver.observe(refs2.targetObserverSeries))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs2.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs2.targetObserverSeries);\n  searchObserver.unobserve(refs2.targetObserverSearch);\n\n  refs2.backdrop.classList.add('is-hidden');\n  query = refs2.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs2.seriesList.innerHTML = '';\n    refs2.endResultsInfo.classList.add('visually-hidden');\n\n    const seriesData = await searchSeries(\n      API_KEY,\n      URLS.SEARCH_SERIES_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = seriesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundSeries(results);\n      searchObserver.observe(refs2.targetObserverSearch);\n    } else {\n      refs2.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      seriesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs2.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    refs2.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchSeries(\n        API_KEY,\n        URLS.SEARCH_SERIES_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundSeries(results);\n      });\n    }\n  });\n}\n\n/* ======================  SERIES' DETAILS ======================  */\n\nrefs2.seriesContainer.addEventListener('click', onSeriesItemClick);\n\nasync function onSeriesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.series-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleSeries(\n      API_KEY,\n      URLS.SINGLE_SERIES_URL,\n      dataId\n    );\n    createSeriesModalMarkup(data);\n  }\n}\n","export const refs2 = {\n  form: document.querySelector('.search-form-series'),\n  seriesContainer: document.querySelector('.series-data-container'),\n  seriesList: document.querySelector('.series-list'),\n  targetObserverSeries: document.querySelector('.js-guard-series'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.series-backdrop'),\n  modalWrapper: document.querySelector('.series-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-series'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs2 } from '../refs2.js';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport function renderTrendingSeries(series) {\n  console.log(series);\n  const trendingSeries = series\n    .map(\n      ({\n        id,\n        name,\n        overview,\n        vote_average,\n        poster_path,\n        first_air_date,\n      }) => `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n            <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n            <span class=\"series-rate\">Rating: ${vote_average.toFixed(2)}</span>\n            </div>\n          </li>`\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', trendingSeries);\n}\n","import { refs2 } from '../refs2';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundSeries(foundSeries) {\n  const foundItems = foundSeries\n    .map(\n      ({\n        id,\n        genre_ids,\n        name,\n        overview,\n        first_air_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n              <p class=\"series-genres\">Genres: ${genreNames || 'No data'}</p>\n                <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n                 <span class=\"series-rate\">Rating: ${vote_average.toFixed(\n                   2\n                 )}</span> \n                 <span class=\"series-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchSeries(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n","import axios from 'axios';\nlet isLoading = false;\n\nexport async function fetchSingleSeries(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const seriesMovies = response.data;\n    return seriesMovies;\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs2 } from '../refs2';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createSeriesModalMarkup(data) {\n  const {\n    id,\n    created_by,\n    in_production,\n    languages,\n    genres,\n    origin_country,\n    name,\n    first_air_date,\n    number_of_seasons,\n    number_of_episodes,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languagesSpoken = languages.map(language => language).join(', ');\n  const creators = created_by.map(creator => creator.name).join(', ');\n\n  let markup = `<div class=\"series-item-detailed\" id=${id}>\n       <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n        <h2 class=\"modal-title\">${name}</h2>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n       \n        <p class=\"orig-country\"><span class=\"modal-bold\">Origin country:</span> ${origin_country}</p>\n        <p class=\"in-production\"><span class=\"modal-bold\">Still in production:</span> ${in_production}</p>\n      \n\n     \n        <p class=\"first-air-date\"><span class=\"modal-bold\">First air date:</span> ${first_air_date}</p>\n        <p class=\"modal-series-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n      \n        <p class=\"created-by\"><span class=\"modal-bold\">Creators:</span> ${creators}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languagesSpoken}</p>\n        <div class=\"series-length\">\n        <span class=\"seasons\"><span class=\"modal-bold\">Number of seasons:</span> ${number_of_seasons}</span>\n        <span class=\"episodes\"><span class=\"modal-bold\">Number of episodes:</span> ${number_of_episodes}</span>\n        </div>\n\n        <div class=\"series-modal-rate\">\n         <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n         <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n         </div>\n   \n      </div>`;\n\n  refs2.backdrop.classList.remove('is-hidden');\n  refs2.modalWrapper.innerHTML = markup;\n\n  refs2.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs2.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs2.modalWrapper.innerHTML = '';\n\n  refs2.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs2.backdrop.removeEventListener('click', onModalClose);\n  refs2.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n"],"names":["$2shzp","parcelRequire","$7db85db93c52d1f5$export$dd54c2f2d692d36f","form","document","querySelector","seriesContainer","seriesList","targetObserverSeries","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$c0554391f1171323$export$3a1ca11763a591fc","series","console","log","trendingSeries","map","id","name","overview","vote_average","poster_path","first_air_date","toFixed","join","insertAdjacentHTML","$30d0433790b6ea74$export$1035edcb0883cee","foundSeries","foundItems","genre_ids","vote_count","genreNames","genre","$8G1wF","genres","find","g","filter","Boolean","$30d0433790b6ea74$var$getGenres","async","$8ef913dc6cce37c1$export$87284bbc4af8de3","key","url","searchQuery","page","response","default","get","error","message","$e0da6ba3a4786721$var$isLoading","$e0da6ba3a4786721$export$18d2d9a21124daea","data","$39999d9f05b7ce7b$export$6b84cf0fb22670f7","created_by","in_production","languages","origin_country","number_of_seasons","number_of_episodes","languagesSpoken","language","markup","creator","classList","remove","innerHTML","addEventListener","$39999d9f05b7ce7b$var$onBackdropClick","window","$39999d9f05b7ce7b$var$onEscKeyPress","$39999d9f05b7ce7b$var$onModalClose","add","removeEventListener","event","code","currentTarget","target","$c062f734705d647a$var$query","$c062f734705d647a$var$currentPage","$c062f734705d647a$var$currentSearchPage","$c062f734705d647a$var$isLoading","$c062f734705d647a$var$fetchTrendingSeries","currentPage1","total_pages","$kj8Rd","notifyEndResults","$c062f734705d647a$var$trendingObserver","unobserve","results","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","URLS","BASE_SERIES_URL","then","root","rootMargin","threshold","observe","catch","err","e","preventDefault","$c062f734705d647a$var$searchObserver","value","trim","seriesData","SEARCH_SERIES_URL","total_results","length","notifyNoResults","dataFound","targetElement","closest","dataId","getAttribute","SINGLE_SERIES_URL"],"version":3,"file":"trendingseries.8d4e0e73.js.map"}