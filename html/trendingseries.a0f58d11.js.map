{"mappings":"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","sources":["src/js/TrendingSeries/fetchTrendingSeries.js","src/js/refs2.js","src/js/TrendingSeries/renderTrendingSeries.js","src/js/TrendingSeries/searchSeries.js","src/js/TrendingSeries/renderFoundSeries.js","src/js/TrendingSeries/fetchSingleSeries.js","src/js/helpers/createSeriesModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { renderTrendingSeries } from './renderTrendingSeries';\n\nimport { searchSeries } from './searchSeries';\nimport { renderFoundSeries } from './renderFoundSeries';\n\nimport { fetchSingleSeries } from './fetchSingleSeries';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const BASE_SERIES_URL = 'https://api.themoviedb.org/3/trending/tv/week';\n// const SEARCH_SERIES_URL = 'https://api.themoviedb.org/3/search/tv';\nlet currentPage = 1;\nlet isLoading = false;\n\n// const targetSeries = document.querySelector('.js-guard-series');\n\nexport async function fetchTrendingSeries(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    // console.log(response);\n    const dataSeries = response.data.results;\n    return dataSeries;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet observer = new IntersectionObserver(onLoadMore, options);\nfunction onLoadMore(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage).then(\n        data => renderTrendingSeries(data)\n      );\n    }\n  });\n}\n\n// if (document.body.id === 'series-page') {\n//   fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n//     .then(data => renderTrendingSeries(data))\n//     .then(() => observer.observe(refs2.targetObserverSeries))\n//     .catch(err => console.log(err));\n// }\n\nfetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n  .then(data => renderTrendingSeries(data))\n  .then(() => observer.observe(refs2.targetObserverSeries))\n  .catch(err => console.log(err));\n\n/* ====================== DETAILS ======================  */\n\nrefs2.seriesContainer.addEventListener('click', onItemClick);\n\nasync function onItemClick(e) {\n  e.preventDefault();\n  console.log('Hellow from callback');\n  const targetElement = e.target.closest('.series-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleSeries(\n      API_KEY,\n      URLS.SINGLE_SERIES_URL,\n      dataId\n    );\n    createSeriesModalMarkup(data);\n  }\n}\n\n/* ====================== SEARCH ======================  */\n\nrefs2.form.addEventListener('submit', e => {\n  e.preventDefault();\n  refs2.backdrop.classList.add('is-hidden');\n  const query = refs2.form.searchQuery.value.trim();\n  searchSeries(API_KEY, URLS.SEARCH_SERIES_URL, query, renderFoundSeries);\n});\n","export const refs2 = {\n  form: document.querySelector('.search-form-series'),\n  seriesContainer: document.querySelector('.series-data-container'),\n  seriesList: document.querySelector('.series-list'),\n  targetObserverSeries: document.querySelector('.js-guard-series'),\n  backdrop: document.querySelector('.series-backdrop'),\n  modalWrapper: document.querySelector('.series-item-wrapper'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs2 } from '../refs2.js';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport function renderTrendingSeries(series) {\n  console.log(series);\n  const trendingSeries = series\n    .map(\n      ({\n        id,\n        name,\n        overview,\n        vote_average,\n        poster_path,\n        first_air_date,\n      }) => `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n            <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n            <span class=\"series-rate\">Rating: ${vote_average.toFixed(2)}</span>\n            </div>\n          </li>`\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', trendingSeries);\n}\n","import axios from 'axios';\nimport { refs2 } from '../refs2.js';\n\nexport async function searchSeries(key, url, searchQuery, renderFoundItems) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}`\n    );\n    console.log(response);\n    const queryFoundSeries = response.data.results;\n    if (queryFoundSeries) {\n      refs2.seriesList.innerHTML = '';\n    }\n\n    renderFoundItems(queryFoundSeries);\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n","import { refs2 } from '../refs2';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundSeries(foundSeries) {\n  const foundItems = foundSeries\n    .map(\n      ({\n        id,\n        genre_ids,\n        name,\n        overview,\n        first_air_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${name}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n                 <span class=\"movie-rate\">Rating: ${vote_average.toFixed(\n                   2\n                 )}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\nlet isLoading = false;\n\nexport async function fetchSingleSeries(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const seriesMovies = response.data;\n    return seriesMovies;\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\n// if (refs2?.seriesContainer) {\n//   refs2.seriesContainer.addEventListener('click', onItemClick);\n// }\n\n// async function onItemClick(e) {\n//   e.preventDefault();\n//   console.log('Hellow from callback');\n//   const targetElement = e.target.closest('.series-item');\n//   if (targetElement) {\n//     const dataId = targetElement.getAttribute('data-id');\n//     const data = await fetchSingleSeries(\n//       API_KEY,\n//       URLS.SINGLE_SERIES_URL,\n//       dataId\n//     );\n//     createSeriesModalMarkup(data);\n//   }\n// }\n","import { refs2 } from '../refs2';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createSeriesModalMarkup(data) {\n  const {\n    id,\n    created_by,\n    in_production,\n    languages,\n    genres,\n    origin_country,\n    name,\n    first_air_date,\n    number_of_seasons,\n    number_of_episodes,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languagesSpoken = languages.map(language => language).join(', ');\n  const creators = created_by.map(creator => creator.name).join(', ');\n\n  let markup = `<div class=\"series-item-detailed\" id=${id}>\n       <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${name}</h2>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n       \n        <p class=\"orig-country\"><span class=\"modal-bold\">Origin country:</span> ${origin_country}</p>\n        <p class=\"in-production\"><span class=\"modal-bold\">Still in production:</span> ${in_production}</p>\n      \n\n     \n        <p class=\"first-air-date\"><span class=\"modal-bold\">First air date:</span> ${first_air_date}</p>\n        <p class=\"modal-series-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n      \n        <p class=\"created-by\"><span class=\"modal-bold\">Creators:</span> ${creators}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languagesSpoken}</p>\n        <div class=\"series-length\">\n        <span class=\"seasons\"><span class=\"modal-bold\">Number of seasons:</span> ${number_of_seasons}</span>\n        <span class=\"episodes\"><span class=\"modal-bold\">Number of episodes:</span> ${number_of_episodes}</span>\n        </div>\n\n        <div class=\"series-modal-rate\">\n         <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n         <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n         </div>\n   \n      </div>`;\n\n  refs2.backdrop.classList.remove('is-hidden');\n  refs2.modalWrapper.innerHTML = markup;\n\n  //   refs.closeBtn = document.querySelector('.modal-close-btn');\n  //   refs.closeBtn.addEventListener('click', onModalClose);\n  //   window.addEventListener('keydown', onEscKeyPress);\n  //   console.log(refs.closeBtn);\n}\n"],"names":["$2shzp","parcelRequire","$c062f734705d647a$var$API_KEY","$c062f734705d647a$var$currentPage","$c062f734705d647a$var$isLoading","async","$c062f734705d647a$export$fd6d8660eb32605b","key","url","currentPage1","response","default","get","data","results","error","console","log","message","$c062f734705d647a$var$observer","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","$8G1wF","URLS","BASE_SERIES_URL","then","$gvMD9","renderTrendingSeries","root","rootMargin","threshold","observe","$aNcKc","refs2","targetObserverSeries","catch","err","seriesContainer","addEventListener","e","preventDefault","targetElement","target","closest","dataId","getAttribute","$jiT4K","fetchSingleSeries","SINGLE_SERIES_URL","$4WBqU","createSeriesModalMarkup","form","backdrop","classList","add","query","searchQuery","value","trim","$ch2Ak","searchSeries","SEARCH_SERIES_URL","$4bPF1","renderFoundSeries","$7db85db93c52d1f5$export$dd54c2f2d692d36f","document","querySelector","seriesList","modalWrapper","closeBtn","$c0554391f1171323$export$3a1ca11763a591fc","series","trendingSeries","map","id","name","overview","vote_average","poster_path","first_air_date","toFixed","join","insertAdjacentHTML","$8ef913dc6cce37c1$export$87284bbc4af8de3","renderFoundItems","queryFoundSeries","innerHTML","$30d0433790b6ea74$export$1035edcb0883cee","foundSeries","foundItems","genre_ids","vote_count","genreNames","genre","genres","find","g","filter","Boolean","$30d0433790b6ea74$var$getGenres","$e0da6ba3a4786721$var$isLoading","$e0da6ba3a4786721$export$18d2d9a21124daea","$39999d9f05b7ce7b$export$6b84cf0fb22670f7","created_by","in_production","languages","origin_country","number_of_seasons","number_of_episodes","languagesSpoken","language","markup","creator","remove"],"version":3,"file":"trendingseries.a0f58d11.js.map"}