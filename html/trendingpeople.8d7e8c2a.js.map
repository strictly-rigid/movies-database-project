{"mappings":"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","sources":["src/js/TrendingPeople/fetchTrendingPeople.js","src/js/refs3.js","src/js/TrendingPeople/renderTrendingPeople.js","src/js/TrendingPeople/renderFoundPerson.js","src/js/TrendingPeople/searchPerson.js","src/js/TrendingPeople/fetchSinglePerson.js","src/js/helpers/createPersonModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport { URLS } from '../constants';\nimport { renderTrendingPeople } from './renderTrendingPeople';\nimport { renderFoundPerson } from './renderFoundPerson';\n\nimport { searchPerson } from './searchPerson';\n\nimport { fetchSinglePerson } from './fetchSinglePerson';\nimport { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\n\nlet currentPage = 1;\nlet isLoading = false;\n\nexport async function fetchTrendingPeople(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    // console.log(response);\n    const dataPeople = response.data.results;\n    return dataPeople;\n  } catch (error) {\n    console.log('Error fetching trending people:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet observer = new IntersectionObserver(onLoadMore, options);\nfunction onLoadMore(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      if (!query) {\n        fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage).then(\n          data => renderTrendingPeople(data)\n        );\n      } else {\n        fetchPerson();\n      }\n    }\n  });\n}\n\n// if (document.body.id === 'people-page') {\n//   fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n//     .then(data => renderTrendingPeople(data))\n//     .then(() => observer.observe(refs3.targetObserverPeople))\n//     .catch(err => console.log(err));\n// }\n\nfetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n  .then(data => renderTrendingPeople(data))\n  .then(() => observer.observe(refs3.targetObserverPeople))\n  .catch(err => console.log(err));\n\n/* ====================== DETAILS ======================  */\n\nrefs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\nasync function onPersonItemClick(e) {\n  e.preventDefault();\n  console.log('Hellow from callback');\n  const targetElement = e.target.closest('.person-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSinglePerson(\n      API_KEY,\n      URLS.SINGLE_PERSON_URL,\n      dataId\n    );\n    createPersonModalMarkup(data);\n  }\n}\n\n/* ====================== SEARCH ======================  */\n\nrefs3.form.addEventListener('submit', fetchPerson);\n\nasync function fetchPerson(e) {\n  // e.preventDefault();\n  if (e) {\n    e.preventDefault();\n  }\n  observer.unobserve(refs3.targetObserverPeople);\n  refs3.backdrop.classList.add('is-hidden');\n  query = refs3.form.searchQuery.value.trim();\n  try {\n    const personData = await searchPerson(\n      API_KEY,\n      URLS.SEARCH_PERSON_URL,\n      query\n    );\n    renderFoundPerson(personData);\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    observer.observe(refs3.targetObserverPeople);\n  }\n}\n","export const refs3 = {\n  form: document.querySelector('.search-form-people'),\n  peopleContainer: document.querySelector('.people-data-container'),\n  peopleList: document.querySelector('.people-list'),\n  targetObserverPeople: document.querySelector('.js-guard-people'),\n  backdrop: document.querySelector('.person-backdrop'),\n  modalWrapper: document.querySelector('.person-item-wrapper'),\n};\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderTrendingPeople(people) {\n  console.log(people);\n  const trendingPeople = people\n    .map(({ id, name, gender, known_for_department, profile_path }) => {\n      // const titles = known_for.map(item => item.title || item.name).join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n          <div class=\"person-info\">\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n            <p class=\"popular-movies\">Known for: ${known_for_department}</p>\n          </div>\n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', trendingPeople);\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderFoundPerson(foundPerson) {\n  console.log(foundPerson);\n  const foundItems = foundPerson\n    .map(({ id, known_for_department, name, gender, profile_path }) => {\n      // const titles = known_for_department\n      //   .map(item => item.title || item.name)\n      //   .join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n          \n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\nimport { refs3 } from '../refs3.js';\n\nexport async function searchPerson(key, url, searchQuery) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}`\n    );\n\n    console.log(response);\n    const dataFoundPerson = response.data.results;\n    if (dataFoundPerson) {\n      refs3.peopleList.innerHTML = '';\n    }\n\n    return dataFoundPerson;\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  }\n}\n\n// import axios from 'axios';\n// import { refs3 } from '../refs3.js';\n\n// export async function searchPerson(key, url, searchQuery, renderFoundPerson) {\n//   try {\n//     const response = await axios.get(\n//       `${url}?api_key=${key}&query=${searchQuery}`\n//     );\n\n//     console.log(response);\n//     const queryFoundPerson = response.data.results;\n//     if (queryFoundPerson) {\n//       refs3.peopleList.innerHTML = '';\n//     }\n\n//     renderFoundPerson(queryFoundPerson);\n//   } catch (error) {\n//     console.log('Error fetching person:', error.message);\n//   }\n// }\n","import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport { URLS } from '../constants';\n// import { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\nlet isLoading = false;\n\nexport async function fetchSinglePerson(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    // console.log(response);\n    const personDetails = response.data;\n    return personDetails;\n  } catch (error) {\n    console.log('Error fetching person\"s data:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs3 } from '../refs3';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createPersonModalMarkup(data) {\n  const {\n    id,\n    birthday,\n    biography,\n    place_of_birth,\n    gender,\n    name,\n    known_for_department,\n    poster_path,\n    popularity,\n  } = data;\n  console.log(data);\n\n  let markup = `<div class=\"person-item-detailed\" id=${id}>\n           <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <h2 class=\"modal-name\">${name}</h2>\n            <span class=\"gender\">Gender: ${gender}</span>\n            <span class=\"birthday\">Born: ${birthday}</span>\n            <span class=\"place_of_birth\">Place of birth:${place_of_birth}</span>\n            <p class=\"known_for\">Known for:${known_for_department}</p>\n            <p class=\"biography\">Bio: ${biography}</p>\n            <span class=\"popularity\">Popularity: ${popularity}</span>\n          </div>`;\n\n  refs3.backdrop.classList.remove('is-hidden');\n  refs3.modalWrapper.innerHTML = markup;\n\n  //   refs.closeBtn = document.querySelector('.modal-close-btn');\n  //   refs.closeBtn.addEventListener('click', onModalClose);\n  //   window.addEventListener('keydown', onEscKeyPress);\n  //   console.log(refs.closeBtn);\n}\n"],"names":["$2shzp","parcelRequire","$313ad1f2210997b7$var$API_KEY","$313ad1f2210997b7$var$query","$313ad1f2210997b7$var$currentPage","$313ad1f2210997b7$var$isLoading","async","$313ad1f2210997b7$export$458029cb8ddc5d51","key","url","currentPage1","response","default","get","data","results","error","console","log","message","$313ad1f2210997b7$var$observer","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","$313ad1f2210997b7$var$fetchPerson","$8G1wF","URLS","BASE_PEOPLE_URL","then","$60bzg","renderTrendingPeople","root","rootMargin","threshold","e","preventDefault","unobserve","$k0oAw","refs3","targetObserverPeople","backdrop","classList","add","form","searchQuery","value","trim","personData","$4r0c0","searchPerson","SEARCH_PERSON_URL","$48xzL","renderFoundPerson","observe","catch","err","peopleContainer","addEventListener","targetElement","target","closest","dataId","getAttribute","$i4GBV","fetchSinglePerson","SINGLE_PERSON_URL","$zRueC","createPersonModalMarkup","$e906e16ee62abe85$export$1667d6aa2cee11d8","document","querySelector","peopleList","modalWrapper","$45ebb74e1e41cb42$export$1f3529df0466b8e9","people","trendingPeople","map","id","name","gender","known_for_department","profile_path","genders","join","insertAdjacentHTML","$3031f43cc7f53ebe$export$706c7750293f7a13","foundPerson","foundItems","$33a9d54fb0f6f81e$export$791a87ce43433885","dataFoundPerson","innerHTML","$d289a749cf5d8107$var$isLoading","$d289a749cf5d8107$export$bda05f064222d25a","$06bcc255bee61c4e$export$9a7ad2d283fab89","birthday","biography","place_of_birth","poster_path","popularity","markup","remove"],"version":3,"file":"trendingpeople.8d7e8c2a.js.map"}