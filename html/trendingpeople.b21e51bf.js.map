{"mappings":"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","sources":["src/js/refs3.js","src/js/TrendingPeople/renderTrendingPeople.js","src/js/TrendingPeople/renderFoundPerson.js","src/js/TrendingPeople/searchPerson.js","src/js/TrendingPeople/fetchSinglePerson.js","src/js/helpers/createPersonModalMarkup.js","src/js/helpers/fetchers.js","src/js/TrendingPeople/fetchTrendingPeople.js","src/js/helpers/setNewObserver.js"],"sourcesContent":["export const refs3 = {\n  form: document.querySelector('.search-form-people'),\n  peopleContainer: document.querySelector('.people-data-container'),\n  peopleList: document.querySelector('.people-list'),\n  targetObserverPeople: document.querySelector('.js-guard-people'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.person-backdrop'),\n  modalWrapper: document.querySelector('.person-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-people'),\n  closeBtn: document.querySelector('.modal-people-close-icon'),\n};\n","import { refs3 } from '../refs3';\nimport { URLS, genders } from '../constants';\n\nexport function renderTrendingPeople(people) {\n  const trendingPeople = people\n    .map(({ id, name, gender, known_for_department, profile_path }) => {\n      const imageSrc = profile_path\n        ? `${URLS.POSTER_URL}${profile_path}`\n        : URLS.DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n          <div class=\"person-info\">\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n            <p class=\"popular-movies\">Known for: ${\n              known_for_department || 'No data'\n            } </p>\n          </div>\n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', trendingPeople);\n}\n","import { refs3 } from '../refs3';\nimport { URLS, genders } from '../constants';\n\nexport function renderFoundPerson(foundPerson) {\n  const foundItems = foundPerson\n    .map(({ id, name, gender, profile_path }) => {\n      const imageSrc = profile_path\n        ? `${URLS.POSTER_URL}${profile_path}`\n        : URLS.DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n          \n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchPerson(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    console.log(response);\n\n    return response;\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  }\n}\n","import axios from 'axios';\n\nlet isLoading = false;\n\nexport async function fetchSinglePerson(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    const personDetails = response.data;\n\n    return personDetails;\n  } catch (error) {\n    console.log('Error fetching person\"s data:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs3 } from '../refs3';\nimport { URLS, genders } from '../constants';\nimport { onBackdropClick, onEscKeyPress } from './onCloseFunctions';\n\nimport { notifyAddSuccess, notifyIsInFavorites } from './notifyWarnings';\n\nconst favoritePeopleList =\n  JSON.parse(localStorage.getItem('favorite_people')) ?? [];\n\nexport async function createPersonModalMarkup(data) {\n  const {\n    id,\n    birthday,\n    biography,\n    place_of_birth,\n    gender,\n    name,\n    known_for_department,\n    profile_path,\n    popularity,\n  } = data;\n\n  const personImg = profile_path\n    ? `${URLS.POSTER_URL}${profile_path}`\n    : URLS.DEFAULT_IMAGE;\n  const personGender = genders[gender] || 'Not specified';\n\n  let markup = `<div class=\"person-item-detailed\" id=${id}>\n           <img src=\"${personImg}\" class=\"person-image\" alt=\"person image\">\n            <h2 class=\"modal-name modal-title\">${name}</h2>\n            <p class=\"gender\"> <span class=\"modal-bold\"> Gender:</span> ${personGender}</p>\n            <p class=\"birthday\"> <span class=\"modal-bold\"> Born:</span> ${\n              birthday || 'unknown'\n            }</p>\n            <p class=\"place_of_birth\"> <span class=\"modal-bold\"> Place of birth:</span> ${\n              place_of_birth || 'unknown'\n            }</span>\n            <p class=\"known_for\"> <span class=\"modal-bold\"> Known for:</span> ${\n              known_for_department || 'No data'\n            }</p>\n            <p class=\"biography\"> <span class=\"modal-bold\">Bio:</span> ${\n              biography || 'no info'\n            }</p>\n            <p class=\"popularity\"> <span class=\"modal-bold\"> Popularity:</span> ${popularity}</p>\n            <button type=\"button\" class=\"person-fav\">Add to favorites</button>\n          </div>`;\n\n  refs3.backdrop.classList.remove('is-hidden');\n  refs3.modalWrapper.innerHTML = markup;\n\n  refs3.backdrop.addEventListener('click', event =>\n    onBackdropClick(event, onModalClose)\n  );\n  window.addEventListener('keydown', event =>\n    onEscKeyPress(event, onModalClose)\n  );\n  refs3.closeBtn.addEventListener('click', onModalClose);\n\n  /* ======================  ADD TO FAVORITES ======================  */\n  const addFavBtn = document.querySelector('.person-fav');\n  addFavBtn.addEventListener('click', () => addToFavorites(data));\n}\n\nfunction onModalClose() {\n  refs3.modalWrapper.innerHTML = '';\n\n  refs3.backdrop.classList.add('is-hidden');\n\n  refs3.backdrop.removeEventListener('click', onModalClose);\n  refs3.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction addToFavorites(person) {\n  const inStorage = favoritePeopleList.some(fav => fav.id === person.id);\n  const personItem = {\n    id: person.id,\n    name: person.name,\n    gender: person.gender,\n    birthday: person.birthday,\n    biography: person.biography,\n    knownFor: person.known_for_department,\n    placeOfBirth: person.place_of_birth,\n    profile_path: person.profile_path,\n    popularity: person.popularity,\n  };\n\n  if (!inStorage) {\n    favoritePeopleList.push(personItem);\n    localStorage.setItem('favorite_people', JSON.stringify(favoritePeopleList));\n    notifyAddSuccess(person.name);\n  } else {\n    notifyIsInFavorites(person.name);\n  }\n}\n","import axios from 'axios';\n\nexport async function fetchData(url, params = {}) {\n  try {\n    isLoading = true;\n    const response = await axios.get(url, { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching data:', error.message);\n    throw error;\n  } finally {\n    isLoading = false;\n  }\n}\n","import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport {\n  URLS,\n  trendingObserverOptions,\n  searchObserverOptions,\n} from '../constants';\nimport { renderTrendingPeople } from './renderTrendingPeople';\nimport { renderFoundPerson } from './renderFoundPerson';\nimport { searchPerson } from './searchPerson';\nimport { fetchSinglePerson } from './fetchSinglePerson';\nimport { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\nimport { fetchData } from '../helpers/fetchers';\nimport { setNewObserver } from '../helpers/setNewObserver';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingPeople(currentPage) {\n  try {\n    const response = await fetchData(URLS.BASE_PEOPLE_URL, {\n      api_key: API_KEY,\n      page: currentPage,\n    });\n\n    if (response.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs3.targetObserverPeople);\n    }\n    const dataPeople = response.results;\n    return dataPeople;\n  } catch (error) {\n    console.log('Error fetching trending people:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserver = setNewObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingPeople(currentPage).then(data => renderTrendingPeople(data));\n    }\n  });\n}\n\n// Initializing fetch request for trending\n\nfetchTrendingPeople(currentPage)\n  .then(data => renderTrendingPeople(data))\n  .then(() => trendingObserver.observe(refs3.targetObserverPeople))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs3.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs3.targetObserverPeople);\n  searchObserver.unobserve(refs3.targetObserverSearch);\n\n  refs3.backdrop.classList.add('is-hidden');\n  query = refs3.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs3.peopleList.innerHTML = '';\n    refs3.endResultsInfo.classList.add('visually-hidden');\n\n    const personData = await searchPerson(\n      API_KEY,\n      URLS.SEARCH_PERSON_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = personData.data;\n\n    if (results && results.length > 0) {\n      renderFoundPerson(results);\n      searchObserver.observe(refs3.targetObserverSearch);\n    } else {\n      refs3.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      personData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs3.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    refs3.form.searchQuery.value = '';\n  }\n}\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchPerson(\n        API_KEY,\n        URLS.SEARCH_PERSON_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundPerson(results);\n      });\n    }\n  });\n}\n\n/* ====================== PERSON'S DETAILS ======================  */\n\nrefs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\nasync function onPersonItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.person-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSinglePerson(\n      API_KEY,\n      URLS.SINGLE_PERSON_URL,\n      dataId\n    );\n    createPersonModalMarkup(data);\n  }\n}\n\n// import axios from 'axios';\n// import { refs3 } from '../refs3';\n// import {\n//   URLS,\n//   trendingObserverOptions,\n//   searchObserverOptions,\n// } from '../constants';\n// import { renderTrendingPeople } from './renderTrendingPeople';\n// import { renderFoundPerson } from './renderFoundPerson';\n// import { searchPerson } from './searchPerson';\n// import { fetchSinglePerson } from './fetchSinglePerson';\n// import { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\n// import { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\n// const API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// let query = '';\n// let currentPage = 1;\n// let currentSearchPage = 1;\n// let isLoading = false;\n\n// /* ====================== TRENDING ======================  */\n\n// async function fetchTrendingPeople(key, url, currentPage) {\n//   try {\n//     isLoading = true;\n//     const response = await axios.get(\n//       `${url}?api_key=${key}&page=${currentPage}`\n//     );\n\n//     if (response.data.total_pages === currentSearchPage) {\n//       notifyEndResults();\n//       trendingObserver.unobserve(refs3.targetObserverPeople);\n//     }\n//     const dataPeople = response.data.results;\n//     return dataPeople;\n//   } catch (error) {\n//     console.log('Error fetching trending people:', error.message);\n//   } finally {\n//     isLoading = false;\n//   }\n// }\n\n// let trendingObserver = new IntersectionObserver(\n//   onLoadMoreTrending,\n//   trendingObserverOptions\n// );\n// function onLoadMoreTrending(entries) {\n//   entries.forEach(entry => {\n//     if (entry.isIntersecting) {\n//       currentPage += 1;\n//       fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage).then(\n//         data => renderTrendingPeople(data)\n//       );\n//     }\n//   });\n// }\n\n// fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n//   .then(data => renderTrendingPeople(data))\n//   .then(() => trendingObserver.observe(refs3.targetObserverPeople))\n//   .catch(err => console.log(err));\n\n// /* ====================== SEARCH ======================  */\n\n// refs3.form.addEventListener('submit', searchByName);\n\n// async function searchByName(e) {\n//   e.preventDefault();\n\n//   trendingObserver.unobserve(refs3.targetObserverPeople);\n//   searchObserver.unobserve(refs3.targetObserverSearch);\n\n//   refs3.backdrop.classList.add('is-hidden');\n//   query = refs3.form.searchQuery.value.trim();\n//   currentSearchPage = 1;\n\n//   try {\n//     refs3.peopleList.innerHTML = '';\n//     refs3.endResultsInfo.classList.add('visually-hidden');\n\n//     const personData = await searchPerson(\n//       API_KEY,\n//       URLS.SEARCH_PERSON_URL,\n//       query,\n//       currentSearchPage\n//     );\n\n//     const { results, total_results } = personData.data;\n\n//     if (results && results.length > 0) {\n//       renderFoundPerson(results);\n//       searchObserver.observe(refs3.targetObserverSearch);\n//     } else {\n//       refs3.endResultsInfo.classList.remove('visually-hidden');\n//       notifyNoResults();\n//     }\n\n//     if (\n//       total_results &&\n//       total_results <= 20 &&\n//       personData.data.total_pages === currentSearchPage\n//     ) {\n//       notifyEndResults();\n//       searchObserver.unobserve(refs3.targetObserverSearch);\n//     }\n//   } catch (error) {\n//     console.log('Error fetching person:', error.message);\n//   } finally {\n//     refs3.form.searchQuery.value = '';\n//   }\n// }\n\n// let searchObserver = new IntersectionObserver(\n//   onLoadMoreSearch,\n//   searchObserverOptions\n// );\n\n// function onLoadMoreSearch(entries) {\n//   entries.forEach(entry => {\n//     if (entry.isIntersecting) {\n//       currentSearchPage += 1;\n//       searchPerson(\n//         API_KEY,\n//         URLS.SEARCH_PERSON_URL,\n//         query,\n//         currentSearchPage\n//       ).then(dataFound => {\n//         const { results } = dataFound.data;\n//         renderFoundPerson(results);\n//       });\n//     }\n//   });\n// }\n\n// /* ====================== PERSON'S DETAILS ======================  */\n\n// refs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\n// async function onPersonItemClick(e) {\n//   e.preventDefault();\n\n//   const targetElement = e.target.closest('.person-item');\n//   if (targetElement) {\n//     const dataId = targetElement.getAttribute('data-id');\n//     const data = await fetchSinglePerson(\n//       API_KEY,\n//       URLS.SINGLE_PERSON_URL,\n//       dataId\n//     );\n//     createPersonModalMarkup(data);\n//   }\n// }\n","export function setNewObserver(callback, options) {\n  return new IntersectionObserver(callback, options);\n}\n"],"names":["$e906e16ee62abe85$export$1667d6aa2cee11d8","form","document","querySelector","peopleContainer","peopleList","targetObserverPeople","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$45ebb74e1e41cb42$export$1f3529df0466b8e9","people","trendingPeople","map","id","name","gender","known_for_department","profile_path","$8G1wF","URLS","POSTER_URL","DEFAULT_IMAGE","genders","join","insertAdjacentHTML","$3031f43cc7f53ebe$export$706c7750293f7a13","foundPerson","foundItems","$2shzp","parcelRequire","async","$33a9d54fb0f6f81e$export$791a87ce43433885","key","url","searchQuery","page","response","default","get","console","log","error","message","$d289a749cf5d8107$var$isLoading","$d289a749cf5d8107$export$bda05f064222d25a","data","$06bcc255bee61c4e$var$ref","$06bcc255bee61c4e$var$favoritePeopleList","JSON","parse","localStorage","getItem","$06bcc255bee61c4e$export$9a7ad2d283fab89","birthday","biography","place_of_birth","popularity","markup","classList","remove","innerHTML","addEventListener","event","$6Ipdt","onBackdropClick","$06bcc255bee61c4e$var$onModalClose","window","onEscKeyPress","person","inStorage","some","fav","personItem","knownFor","placeOfBirth","$kj8Rd","notifyIsInFavorites","push","setItem","stringify","notifyAddSuccess","$06bcc255bee61c4e$var$addToFavorites","add","removeEventListener","$9e632475b5070086$export$8134c072fddab6a5","params","isLoading","$313ad1f2210997b7$var$query","$313ad1f2210997b7$var$currentPage","$313ad1f2210997b7$var$currentSearchPage","$313ad1f2210997b7$var$isLoading","$313ad1f2210997b7$var$fetchTrendingPeople","currentPage1","BASE_PEOPLE_URL","api_key","total_pages","notifyEndResults","$313ad1f2210997b7$var$trendingObserver","unobserve","results","callback","entries","forEach","entry","isIntersecting","then","options","trendingObserverOptions","IntersectionObserver","observe","catch","err","e","preventDefault","$313ad1f2210997b7$var$searchObserver","value","trim","personData","SEARCH_PERSON_URL","total_results","length","notifyNoResults","dataFound","searchObserverOptions","targetElement","target","closest","dataId","getAttribute","SINGLE_PERSON_URL"],"version":3,"file":"trendingpeople.b21e51bf.js.map"}