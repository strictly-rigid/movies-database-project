{"mappings":"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","sources":["src/js/TrendingPeople/fetchTrendingPeople.js","src/js/refs3.js","src/js/TrendingPeople/renderTrendingPeople.js","src/js/TrendingPeople/renderFoundPerson.js","src/js/TrendingPeople/searchPerson.js","src/js/TrendingPeople/fetchSinglePerson.js","src/js/helpers/createPersonModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport { URLS } from '../constants';\nimport { renderTrendingPeople } from './renderTrendingPeople';\nimport { renderFoundPerson } from './renderFoundPerson';\nimport { searchPerson } from './searchPerson';\nimport { fetchSinglePerson } from './fetchSinglePerson';\nimport { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingPeople(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs3.targetObserverPeople);\n    }\n    const dataPeople = response.data.results;\n    return dataPeople;\n  } catch (error) {\n    console.log('Error fetching trending people:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage).then(\n        data => renderTrendingPeople(data)\n      );\n    }\n  });\n}\n\nfetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n  .then(data => renderTrendingPeople(data))\n  .then(() => trendingObserver.observe(refs3.targetObserverPeople))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs3.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs3.targetObserverPeople);\n  searchObserver.unobserve(refs3.targetObserverSearch);\n\n  refs3.backdrop.classList.add('is-hidden');\n  query = refs3.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs3.peopleList.innerHTML = '';\n    refs3.endResultsInfo.classList.add('visually-hidden');\n\n    const personData = await searchPerson(\n      API_KEY,\n      URLS.SEARCH_PERSON_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = personData.data;\n\n    if (results && results.length > 0) {\n      renderFoundPerson(results);\n      searchObserver.observe(refs3.targetObserverSearch);\n    } else {\n      refs3.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      personData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs3.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    refs3.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchPerson(\n        API_KEY,\n        URLS.SEARCH_PERSON_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundPerson(results);\n      });\n    }\n  });\n}\n\n/* ====================== PERSON'S DETAILS ======================  */\n\nrefs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\nasync function onPersonItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.person-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSinglePerson(\n      API_KEY,\n      URLS.SINGLE_PERSON_URL,\n      dataId\n    );\n    createPersonModalMarkup(data);\n  }\n}\n","export const refs3 = {\n  form: document.querySelector('.search-form-people'),\n  peopleContainer: document.querySelector('.people-data-container'),\n  peopleList: document.querySelector('.people-list'),\n  targetObserverPeople: document.querySelector('.js-guard-people'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.person-backdrop'),\n  modalWrapper: document.querySelector('.person-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-people'),\n  closeBtn: document.querySelector('.modal-people-close-icon'),\n};\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderTrendingPeople(people) {\n  console.log(people);\n  const trendingPeople = people\n    .map(({ id, name, gender, known_for_department, profile_path }) => {\n      // const titles = known_for.map(item => item.title || item.name).join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n          <div class=\"person-info\">\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n            <p class=\"popular-movies\">Known for: ${\n              known_for_department || 'No data'\n            } </p>\n          </div>\n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', trendingPeople);\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderFoundPerson(foundPerson) {\n  // console.log(foundPerson);\n  const foundItems = foundPerson\n    .map(({ id, known_for_department, name, gender, profile_path }) => {\n      // const titles = known_for_department\n      //   .map(item => item.title || item.name)\n      //   .join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n          \n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchPerson(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    console.log(response);\n\n    return response;\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  }\n}\n","import axios from 'axios';\n\nlet isLoading = false;\n\nexport async function fetchSinglePerson(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    // console.log(response);\n    const personDetails = response.data;\n    return personDetails;\n  } catch (error) {\n    console.log('Error fetching person\"s data:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport async function createPersonModalMarkup(data) {\n  const {\n    id,\n    birthday,\n    biography,\n    place_of_birth,\n    gender,\n    name,\n    known_for_department,\n    profile_path,\n    popularity,\n  } = data;\n  console.log(data);\n\n  const personImg = profile_path\n    ? `${POSTER_URL}${profile_path}`\n    : DEFAULT_IMAGE;\n  const personGender = genders[gender] || 'Not specified';\n\n  let markup = `<div class=\"person-item-detailed\" id=${id}>\n           <img src=\"${personImg}\" class=\"person-image\" alt=\"person image\">\n            <h2 class=\"modal-name modal-title\">${name}</h2>\n            <p class=\"gender\"> <span class=\"modal-bold\"> Gender:</span> ${personGender}</p>\n            <p class=\"birthday\"> <span class=\"modal-bold\"> Born:</span> ${\n              birthday || 'unknown'\n            }</p>\n            <p class=\"place_of_birth\"> <span class=\"modal-bold\"> Place of birth:</span> ${\n              place_of_birth || 'unknown'\n            }</span>\n            <p class=\"known_for\"> <span class=\"modal-bold\"> Known for:</span> ${\n              known_for_department || 'No data'\n            }</p>\n            <p class=\"biography\"> <span class=\"modal-bold\">Bio:</span> ${\n              biography || 'no info'\n            }</p>\n            <p class=\"popularity\"> <span class=\"modal-bold\"> Popularity:</span> ${popularity}</span>\n          </div>`;\n\n  refs3.backdrop.classList.remove('is-hidden');\n  refs3.modalWrapper.innerHTML = markup;\n\n  refs3.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs3.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs3.modalWrapper.innerHTML = '';\n\n  refs3.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs3.backdrop.removeEventListener('click', onModalClose);\n  refs3.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n"],"names":["$2shzp","parcelRequire","$e906e16ee62abe85$export$1667d6aa2cee11d8","form","document","querySelector","peopleContainer","peopleList","targetObserverPeople","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$45ebb74e1e41cb42$export$1f3529df0466b8e9","people","console","log","trendingPeople","map","id","name","gender","known_for_department","profile_path","$8G1wF","genders","join","insertAdjacentHTML","$3031f43cc7f53ebe$export$706c7750293f7a13","foundPerson","foundItems","async","$33a9d54fb0f6f81e$export$791a87ce43433885","key","url","searchQuery","page","response","default","get","error","message","$d289a749cf5d8107$var$isLoading","$d289a749cf5d8107$export$bda05f064222d25a","data","$06bcc255bee61c4e$export$9a7ad2d283fab89","birthday","biography","place_of_birth","popularity","markup","classList","remove","innerHTML","addEventListener","$06bcc255bee61c4e$var$onBackdropClick","window","$06bcc255bee61c4e$var$onEscKeyPress","$06bcc255bee61c4e$var$onModalClose","add","removeEventListener","event","code","currentTarget","target","$313ad1f2210997b7$var$query","$313ad1f2210997b7$var$currentPage","$313ad1f2210997b7$var$currentSearchPage","$313ad1f2210997b7$var$isLoading","$313ad1f2210997b7$var$fetchTrendingPeople","currentPage1","total_pages","$kj8Rd","notifyEndResults","$313ad1f2210997b7$var$trendingObserver","unobserve","results","IntersectionObserver","entries","forEach","entry","isIntersecting","URLS","BASE_PEOPLE_URL","then","root","rootMargin","threshold","observe","catch","err","e","preventDefault","$313ad1f2210997b7$var$searchObserver","value","trim","personData","SEARCH_PERSON_URL","total_results","length","notifyNoResults","dataFound","targetElement","closest","dataId","getAttribute","SINGLE_PERSON_URL"],"version":3,"file":"trendingpeople.9734db4b.js.map"}