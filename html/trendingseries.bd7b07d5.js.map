{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SCAO,MAAMC,EAAQ,CACnBC,KAAMC,SAASC,cAAc,uBAC7BC,gBAAiBF,SAASC,cAAc,0BACxCE,WAAYH,SAASC,cAAc,gBACnCG,qBAAsBJ,SAASC,cAAc,oBAC7CI,qBAAsBL,SAASC,cAAc,oBAC7CK,SAAUN,SAASC,cAAc,oBACjCM,aAAcP,SAASC,cAAc,wBACrCO,eAAgBR,SAASC,cAAc,2BACvCQ,SAAUT,SAASC,cAAc,qBCTtBS,EAAO,CAClBC,gBAAiB,mDACjBC,gBAAiB,gDACjBC,gBAAiB,oDACjBC,iBAAkB,4CAClBC,kBAAmB,yCACnBC,iBAAkB,qCAClBC,kBAAmB,kCACnBC,kBAAmB,6CACnBC,kBAAmB,uCAGRC,EAAS,CACpB,CACEC,GAAI,GACJC,KAAM,UAER,CACED,GAAI,GACJC,KAAM,aAER,CACED,GAAI,GACJC,KAAM,aAER,CACED,GAAI,GACJC,KAAM,UAER,CACED,GAAI,GACJC,KAAM,SAER,CACED,GAAI,GACJC,KAAM,eAER,CACED,GAAI,GACJC,KAAM,SAER,CACED,GAAI,MACJC,KAAM,UAER,CACED,GAAI,GACJC,KAAM,WAER,CACED,GAAI,GACJC,KAAM,WAER,CACED,GAAI,GACJC,KAAM,UAER,CACED,GAAI,MACJC,KAAM,SAER,CACED,GAAI,KACJC,KAAM,WAER,CACED,GAAI,MACJC,KAAM,WAER,CACED,GAAI,IACJC,KAAM,mBAER,CACED,GAAI,MACJC,KAAM,YAER,CACED,GAAI,GACJC,KAAM,YAER,CACED,GAAI,MACJC,KAAM,OAER,CACED,GAAI,GACJC,KAAM,YCnFH,SAASC,EAAqBC,GACnCC,QAAQC,IAAIF,GACZ,MAAMG,EAAiBH,EACpBI,KACC,EAACP,GACCA,EAAEC,KACFA,EAAIO,SACJA,EAAQC,aACRA,EAAYC,YACZA,EAAWC,eACXA,KACI,mCAAmCX,4DACVU,8HAEET,qDACKO,gEACYG,wDACRF,EAAaG,QAAQ,mDAIhEC,KAAK,IAERpC,EAAMK,WAAWgC,mBAAmB,YAAaR,E,CCZ5C,SAA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","sources":["src/js/TrendingSeries/fetchTrendingSeries.js","src/js/refs2.js","src/js/constants.js","src/js/TrendingSeries/renderTrendingSeries.js","src/js/TrendingSeries/renderFoundSeries.js","src/js/TrendingSeries/searchSeries.js","src/js/TrendingSeries/fetchSingleSeries.js","src/js/helpers/createSeriesModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { renderTrendingSeries } from './renderTrendingSeries';\nimport { renderFoundSeries } from './renderFoundSeries';\nimport { searchSeries } from './searchSeries';\nimport { fetchSingleSeries } from './fetchSingleSeries';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const BASE_SERIES_URL = 'https://api.themoviedb.org/3/trending/tv/week';\n// const SEARCH_SERIES_URL = 'https://api.themoviedb.org/3/search/tv';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingSeries(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs2.targetObserverSeries);\n    }\n    const dataSeries = response.data.results;\n    return dataSeries;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage).then(\n        data => renderTrendingSeries(data)\n      );\n    }\n  });\n}\n\nfetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n  .then(data => renderTrendingSeries(data))\n  .then(() => trendingObserver.observe(refs2.targetObserverSeries))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs2.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs2.targetObserverSeries);\n  searchObserver.unobserve(refs2.targetObserverSearch);\n\n  refs2.backdrop.classList.add('is-hidden');\n  query = refs2.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs2.seriesList.innerHTML = '';\n    refs2.endResultsInfo.classList.add('visually-hidden');\n\n    const seriesData = await searchSeries(\n      API_KEY,\n      URLS.SEARCH_SERIES_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = seriesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundSeries(results);\n      searchObserver.observe(refs2.targetObserverSearch);\n    } else {\n      refs2.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      seriesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs2.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    refs2.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchSeries(\n        API_KEY,\n        URLS.SEARCH_SERIES_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundSeries(results);\n      });\n    }\n  });\n}\n\n/* ======================  SERIES' DETAILS ======================  */\n\nrefs2.seriesContainer.addEventListener('click', onSeriesItemClick);\n\nasync function onSeriesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.series-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleSeries(\n      API_KEY,\n      URLS.SINGLE_SERIES_URL,\n      dataId\n    );\n    createSeriesModalMarkup(data);\n  }\n}\n","export const refs2 = {\n  form: document.querySelector('.search-form-series'),\n  seriesContainer: document.querySelector('.series-data-container'),\n  seriesList: document.querySelector('.series-list'),\n  targetObserverSeries: document.querySelector('.js-guard-series'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.series-backdrop'),\n  modalWrapper: document.querySelector('.series-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-series'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","export const URLS = {\n  BASE_MOVIES_URL: 'https://api.themoviedb.org/3/trending/movie/week',\n  BASE_SERIES_URL: 'https://api.themoviedb.org/3/trending/tv/week',\n  BASE_PEOPLE_URL: 'https://api.themoviedb.org/3/trending/person/week',\n  SEARCH_MOVIE_URL: 'https://api.themoviedb.org/3/search/movie',\n  SEARCH_SERIES_URL: 'https://api.themoviedb.org/3/search/tv',\n  SINGLE_MOVIE_URL: 'https://api.themoviedb.org/3/movie',\n  SINGLE_SERIES_URL: 'https://api.themoviedb.org/3/tv',\n  SEARCH_PERSON_URL: 'https://api.themoviedb.org/3/search/person',\n  SINGLE_PERSON_URL: 'https://api.themoviedb.org/3/person',\n};\n\nexport const genres = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];\n\nexport const genders = {\n  0: 'Not set / not specified',\n  1: 'Female',\n  2: 'Male',\n  3: 'Non-binary',\n};\n","import { refs2 } from '../refs2.js';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport function renderTrendingSeries(series) {\n  console.log(series);\n  const trendingSeries = series\n    .map(\n      ({\n        id,\n        name,\n        overview,\n        vote_average,\n        poster_path,\n        first_air_date,\n      }) => `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n            <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n            <span class=\"series-rate\">Rating: ${vote_average.toFixed(2)}</span>\n            </div>\n          </li>`\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', trendingSeries);\n}\n","import { refs2 } from '../refs2';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundSeries(foundSeries) {\n  const foundItems = foundSeries\n    .map(\n      ({\n        id,\n        genre_ids,\n        name,\n        overview,\n        first_air_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n              <p class=\"series-genres\">Genres: ${genreNames || 'No data'}</p>\n                <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n                 <span class=\"series-rate\">Rating: ${vote_average.toFixed(\n                   2\n                 )}</span> \n                 <span class=\"series-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchSeries(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n","import axios from 'axios';\nlet isLoading = false;\n\nexport async function fetchSingleSeries(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const seriesMovies = response.data;\n    return seriesMovies;\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs2 } from '../refs2';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createSeriesModalMarkup(data) {\n  const {\n    id,\n    created_by,\n    in_production,\n    languages,\n    genres,\n    origin_country,\n    name,\n    first_air_date,\n    number_of_seasons,\n    number_of_episodes,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languagesSpoken = languages.map(language => language).join(', ');\n  const creators = created_by.map(creator => creator.name).join(', ');\n\n  let markup = `<div class=\"series-item-detailed\" id=${id}>\n       <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n        <h2 class=\"modal-title\">${name}</h2>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n       \n        <p class=\"orig-country\"><span class=\"modal-bold\">Origin country:</span> ${origin_country}</p>\n        <p class=\"in-production\"><span class=\"modal-bold\">Still in production:</span> ${in_production}</p>\n      \n\n     \n        <p class=\"first-air-date\"><span class=\"modal-bold\">First air date:</span> ${first_air_date}</p>\n        <p class=\"modal-series-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n      \n        <p class=\"created-by\"><span class=\"modal-bold\">Creators:</span> ${creators}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languagesSpoken}</p>\n        <div class=\"series-length\">\n        <span class=\"seasons\"><span class=\"modal-bold\">Number of seasons:</span> ${number_of_seasons}</span>\n        <span class=\"episodes\"><span class=\"modal-bold\">Number of episodes:</span> ${number_of_episodes}</span>\n        </div>\n\n        <div class=\"series-modal-rate\">\n         <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n         <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n         </div>\n   \n      </div>`;\n\n  refs2.backdrop.classList.remove('is-hidden');\n  refs2.modalWrapper.innerHTML = markup;\n\n  refs2.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs2.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs2.modalWrapper.innerHTML = '';\n\n  refs2.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs2.backdrop.removeEventListener('click', onModalClose);\n  refs2.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n"],"names":["$2shzp","parcelRequire","$7db85db93c52d1f5$export$dd54c2f2d692d36f","form","document","querySelector","seriesContainer","seriesList","targetObserverSeries","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$65136e012e05e2d7$export$2389c26b9ec125dd","BASE_MOVIES_URL","BASE_SERIES_URL","BASE_PEOPLE_URL","SEARCH_MOVIE_URL","SEARCH_SERIES_URL","SINGLE_MOVIE_URL","SINGLE_SERIES_URL","SEARCH_PERSON_URL","SINGLE_PERSON_URL","$65136e012e05e2d7$export$be3a0ca764f9df2b","id","name","$c0554391f1171323$export$3a1ca11763a591fc","series","console","log","trendingSeries","map","overview","vote_average","poster_path","first_air_date","toFixed","join","insertAdjacentHTML","$30d0433790b6ea74$export$1035edcb0883cee","foundSeries","foundItems","genre_ids","vote_count","genreNames","genre","find","g","filter","Boolean","$30d0433790b6ea74$var$getGenres","async","$8ef913dc6cce37c1$export$87284bbc4af8de3","key","url","searchQuery","page","response","default","get","error","message","$e0da6ba3a4786721$var$isLoading","$e0da6ba3a4786721$export$18d2d9a21124daea","data","$39999d9f05b7ce7b$export$6b84cf0fb22670f7","created_by","in_production","languages","genres","origin_country","number_of_seasons","number_of_episodes","languagesSpoken","language","markup","creator","classList","remove","innerHTML","addEventListener","$39999d9f05b7ce7b$var$onBackdropClick","window","$39999d9f05b7ce7b$var$onEscKeyPress","$39999d9f05b7ce7b$var$onModalClose","add","removeEventListener","event","code","currentTarget","target","$c062f734705d647a$var$query","$c062f734705d647a$var$currentPage","$c062f734705d647a$var$currentSearchPage","$c062f734705d647a$var$isLoading","$c062f734705d647a$var$fetchTrendingSeries","currentPage1","total_pages","$kj8Rd","notifyEndResults","$c062f734705d647a$var$trendingObserver","unobserve","results","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","then","root","rootMargin","threshold","observe","catch","err","e","preventDefault","$c062f734705d647a$var$searchObserver","value","trim","seriesData","total_results","length","notifyNoResults","dataFound","targetElement","closest","dataId","getAttribute"],"version":3,"file":"trendingseries.bd7b07d5.js.map"}