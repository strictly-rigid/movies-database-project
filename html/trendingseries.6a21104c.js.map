{"mappings":"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","sources":["src/js/TrendingSeries/fetchTrendingSeries.js","src/js/refs2.js","src/js/TrendingSeries/renderTrendingSeries.js","src/js/TrendingSeries/searchSeries.js","src/js/TrendingSeries/renderFoundSeries.js","src/js/TrendingSeries/fetchSingleSeries.js","src/js/helpers/createSeriesModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { renderTrendingSeries } from './renderTrendingSeries';\n\nimport { searchSeries } from './searchSeries';\nimport { renderFoundSeries } from './renderFoundSeries';\n\nimport { fetchSingleSeries } from './fetchSingleSeries';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const BASE_SERIES_URL = 'https://api.themoviedb.org/3/trending/tv/week';\n// const SEARCH_SERIES_URL = 'https://api.themoviedb.org/3/search/tv';\nlet currentPage = 1;\nlet isLoading = false;\n\n// const targetSeries = document.querySelector('.js-guard-series');\n\nexport async function fetchTrendingSeries(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    // console.log(response);\n    const dataSeries = response.data.results;\n    return dataSeries;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet observer = new IntersectionObserver(onLoadMore, options);\nfunction onLoadMore(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage).then(\n        data => renderTrendingSeries(data)\n      );\n    }\n  });\n}\n\n// if (document.body.id === 'series-page') {\n//   fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n//     .then(data => renderTrendingSeries(data))\n//     .then(() => observer.observe(refs2.targetObserverSeries))\n//     .catch(err => console.log(err));\n// }\n\nfetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n  .then(data => renderTrendingSeries(data))\n  .then(() => observer.observe(refs2.targetObserverSeries))\n  .catch(err => console.log(err));\n\n/* ====================== DETAILS ======================  */\n\nrefs2.seriesContainer.addEventListener('click', onItemClick);\n\nasync function onItemClick(e) {\n  e.preventDefault();\n  console.log('Hellow from callback');\n  const targetElement = e.target.closest('.series-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleSeries(\n      API_KEY,\n      URLS.SINGLE_SERIES_URL,\n      dataId\n    );\n    createSeriesModalMarkup(data);\n  }\n}\n\n/* ====================== SEARCH ======================  */\n\nrefs2.form.addEventListener('submit', e => {\n  e.preventDefault();\n  refs2.backdrop.classList.add('is-hidden');\n  const query = refs2.form.searchQuery.value.trim();\n  searchSeries(API_KEY, URLS.SEARCH_SERIES_URL, query, renderFoundSeries);\n});\n","export const refs2 = {\n  form: document.querySelector('.search-form-series'),\n  seriesContainer: document.querySelector('.series-data-container'),\n  seriesList: document.querySelector('.series-list'),\n  targetObserverSeries: document.querySelector('.js-guard-series'),\n  backdrop: document.querySelector('.series-backdrop'),\n  modalWrapper: document.querySelector('.series-item-wrapper'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs2 } from '../refs2.js';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport function renderTrendingSeries(series) {\n  console.log(series);\n  const trendingSeries = series\n    .map(\n      ({\n        id,\n        name,\n        overview,\n        vote_average,\n        poster_path,\n        first_air_date,\n      }) => `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n            <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n            <span class=\"series-rate\">Rating: ${vote_average.toFixed(2)}</span>\n            </div>\n          </li>`\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', trendingSeries);\n}\n","import axios from 'axios';\nimport { refs2 } from '../refs2.js';\n\nexport async function searchSeries(key, url, searchQuery, renderFoundItems) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}`\n    );\n    console.log(response);\n    const queryFoundSeries = response.data.results;\n    if (queryFoundSeries) {\n      refs2.seriesList.innerHTML = '';\n    }\n\n    renderFoundItems(queryFoundSeries);\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n","import { refs2 } from '../refs2';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundSeries(foundSeries) {\n  const foundItems = foundSeries\n    .map(\n      ({\n        id,\n        genre_ids,\n        name,\n        overview,\n        first_air_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${name}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n                 <span class=\"movie-rate\">Rating: ${vote_average.toFixed(\n                   2\n                 )}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\nlet isLoading = false;\n\nexport async function fetchSingleSeries(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const seriesMovies = response.data;\n    return seriesMovies;\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\n// if (refs2?.seriesContainer) {\n//   refs2.seriesContainer.addEventListener('click', onItemClick);\n// }\n\n// async function onItemClick(e) {\n//   e.preventDefault();\n//   console.log('Hellow from callback');\n//   const targetElement = e.target.closest('.series-item');\n//   if (targetElement) {\n//     const dataId = targetElement.getAttribute('data-id');\n//     const data = await fetchSingleSeries(\n//       API_KEY,\n//       URLS.SINGLE_SERIES_URL,\n//       dataId\n//     );\n//     createSeriesModalMarkup(data);\n//   }\n// }\n","import { refs2 } from '../refs2';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createSeriesModalMarkup(data) {\n  const {\n    id,\n    created_by,\n    in_production,\n    languages,\n    genres,\n    origin_country,\n    name,\n    first_air_date,\n    number_of_seasons,\n    number_of_episodes,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languagesSpoken = languages.map(language => language).join(', ');\n  const creators = created_by.map(creator => creator.name).join(', ');\n\n  let markup = `<div class=\"series-item-detailed\" id=${id}>\n       <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${name}</h2>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n       \n        <p class=\"orig-country\"><span class=\"modal-bold\">Origin country:</span> ${origin_country}</p>\n        <p class=\"in-production\"><span class=\"modal-bold\">Still in production:</span> ${in_production}</p>\n      \n\n     \n        <p class=\"first-air-date\"><span class=\"modal-bold\">First air date:</span> ${first_air_date}</p>\n        <p class=\"modal-series-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n      \n        <p class=\"created-by\"><span class=\"modal-bold\">Creators:</span> ${creators}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languagesSpoken}</p>\n        <div class=\"series-length\">\n        <span class=\"seasons\"><span class=\"modal-bold\">Number of seasons:</span> ${number_of_seasons}</span>\n        <span class=\"episodes\"><span class=\"modal-bold\">Number of episodes:</span> ${number_of_episodes}</span>\n        </div>\n\n        <div class=\"series-modal-rate\">\n         <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n         <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n         </div>\n   \n      </div>`;\n\n  refs2.backdrop.classList.remove('is-hidden');\n  refs2.modalWrapper.innerHTML = markup;\n\n  //   refs.closeBtn = document.querySelector('.modal-close-btn');\n  //   refs.closeBtn.addEventListener('click', onModalClose);\n  //   window.addEventListener('keydown', onEscKeyPress);\n  //   console.log(refs.closeBtn);\n}\n"],"names":["$bpxeT","parcelRequire","$4bd51fddaa51488b$var$API_KEY","$4bd51fddaa51488b$var$currentPage","$4bd51fddaa51488b$export$fd6d8660eb32605b","key","url","currentPage1","$4bd51fddaa51488b$var$_fetchTrendingSeries","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","dataSeries","$dIxxU","default","get","concat","_ctx","sent","data","results","console","log","t0","message","$4bd51fddaa51488b$var$observer","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","$4s6iC","URLS","BASE_SERIES_URL","then","$9DEnF","renderTrendingSeries","root","rootMargin","threshold","$4bd51fddaa51488b$var$_onItemClick","e","targetElement","dataId","preventDefault","target","closest","getAttribute","$9ejuF","fetchSingleSeries","SINGLE_SERIES_URL","$aCpOZ","createSeriesModalMarkup","observe","$lhMFn","refs2","targetObserverSeries","catch","err","seriesContainer","addEventListener","form","backdrop","classList","add","query","searchQuery","value","trim","$iSh4A","searchSeries","SEARCH_SERIES_URL","$4XNrr","renderFoundSeries","$f7f0efa6c7f437e8$export$dd54c2f2d692d36f","document","querySelector","seriesList","modalWrapper","closeBtn","$70471455671d24b4$export$3a1ca11763a591fc","series","trendingSeries","map","param","id","name","overview","vote_average","poster_path","first_air_date","toFixed","join","insertAdjacentHTML","$dbda837601adec74$export$87284bbc4af8de3","renderFoundItems","$dbda837601adec74$var$_searchSeries","queryFoundSeries","innerHTML","$39d3062942c19417$export$1035edcb0883cee","foundSeries","foundItems","genre_ids","vote_count","genreNames","genre","genres","find","g","filter","Boolean","$39d3062942c19417$var$getGenres","$6b848aded986c971$export$18d2d9a21124daea","$6b848aded986c971$var$_fetchSingleSeries","seriesMovies","$7bb17b9a23564351$var$POSTER_URL","$7bb17b9a23564351$export$6b84cf0fb22670f7","$7bb17b9a23564351$var$_createSeriesModalMarkup","created_by","in_production","languages","origin_country","number_of_seasons","number_of_episodes","languagesSpoken","creators","markup","language","creator","remove"],"version":3,"file":"trendingseries.6a21104c.js.map"}