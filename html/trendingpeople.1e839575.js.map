{"mappings":"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","sources":["src/js/TrendingPeople/fetchTrendingPeople.js","src/js/refs3.js","src/js/TrendingPeople/renderTrendingPeople.js","src/js/TrendingPeople/renderFoundPerson.js","src/js/TrendingPeople/searchPerson.js","src/js/TrendingPeople/fetchSinglePerson.js","src/js/helpers/createPersonModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs3 } from '../refs3';\nimport { URLS } from '../constants';\nimport { renderTrendingPeople } from './renderTrendingPeople';\nimport { renderFoundPerson } from './renderFoundPerson';\nimport { searchPerson } from './searchPerson';\nimport { fetchSinglePerson } from './fetchSinglePerson';\nimport { createPersonModalMarkup } from '../helpers/createPersonModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingPeople(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs3.targetObserverPeople);\n    }\n    const dataPeople = response.data.results;\n    return dataPeople;\n  } catch (error) {\n    console.log('Error fetching trending people:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage).then(\n        data => renderTrendingPeople(data)\n      );\n    }\n  });\n}\n\nfetchTrendingPeople(API_KEY, URLS.BASE_PEOPLE_URL, currentPage)\n  .then(data => renderTrendingPeople(data))\n  .then(() => trendingObserver.observe(refs3.targetObserverPeople))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs3.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs3.targetObserverPeople);\n  searchObserver.unobserve(refs3.targetObserverSearch);\n\n  refs3.backdrop.classList.add('is-hidden');\n  query = refs3.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs3.peopleList.innerHTML = '';\n    refs3.endResultsInfo.classList.add('visually-hidden');\n\n    const personData = await searchPerson(\n      API_KEY,\n      URLS.SEARCH_PERSON_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = personData.data;\n\n    if (results && results.length > 0) {\n      renderFoundPerson(results);\n      searchObserver.observe(refs3.targetObserverSearch);\n    } else {\n      refs3.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      personData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs3.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    refs3.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchPerson(\n        API_KEY,\n        URLS.SEARCH_PERSON_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundPerson(results);\n      });\n    }\n  });\n}\n\n/* ====================== PERSON'S DETAILS ======================  */\n\nrefs3.peopleContainer.addEventListener('click', onPersonItemClick);\n\nasync function onPersonItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.person-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSinglePerson(\n      API_KEY,\n      URLS.SINGLE_PERSON_URL,\n      dataId\n    );\n    createPersonModalMarkup(data);\n  }\n}\n","export const refs3 = {\n  form: document.querySelector('.search-form-people'),\n  peopleContainer: document.querySelector('.people-data-container'),\n  peopleList: document.querySelector('.people-list'),\n  targetObserverPeople: document.querySelector('.js-guard-people'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.person-backdrop'),\n  modalWrapper: document.querySelector('.person-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-people'),\n  closeBtn: document.querySelector('.modal-people-close-icon'),\n};\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderTrendingPeople(people) {\n  console.log(people);\n  const trendingPeople = people\n    .map(({ id, name, gender, known_for_department, profile_path }) => {\n      // const titles = known_for.map(item => item.title || item.name).join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n          <div class=\"person-info\">\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n            <p class=\"popular-movies\">Known for: ${known_for_department}</p>\n          </div>\n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', trendingPeople);\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport function renderFoundPerson(foundPerson) {\n  // console.log(foundPerson);\n  const foundItems = foundPerson\n    .map(({ id, known_for_department, name, gender, profile_path }) => {\n      // const titles = known_for_department\n      //   .map(item => item.title || item.name)\n      //   .join(', ');\n\n      const imageSrc = profile_path\n        ? `${POSTER_URL}${profile_path}`\n        : DEFAULT_IMAGE;\n\n      const personGender = genders[gender] || 'Not specified';\n\n      return `<li class=\"person-item\" data-id=${id}>\n            <img\n              src=\"${imageSrc}\"\n              class=\"person-image\"\n              alt=\"person image\"\n            />\n            <h2 class=\"person-name\">${name}</h2>\n            <p class=\"person-gender\">${personGender}</p>\n          \n          </li>`;\n    })\n    .join('');\n\n  refs3.peopleList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchPerson(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n\n    console.log(response);\n\n    return response;\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  }\n}\n","import axios from 'axios';\n\nlet isLoading = false;\n\nexport async function fetchSinglePerson(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    // console.log(response);\n    const personDetails = response.data;\n    return personDetails;\n  } catch (error) {\n    console.log('Error fetching person\"s data:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs3 } from '../refs3';\nimport { genders } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\nconst DEFAULT_IMAGE =\n  'https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg';\n\nexport async function createPersonModalMarkup(data) {\n  const {\n    id,\n    birthday,\n    biography,\n    place_of_birth,\n    gender,\n    name,\n    known_for_department,\n    profile_path,\n    popularity,\n  } = data;\n  console.log(data);\n\n  const personImg = profile_path\n    ? `${POSTER_URL}${profile_path}`\n    : DEFAULT_IMAGE;\n  const personGender = genders[gender] || 'Not specified';\n\n  let markup = `<div class=\"person-item-detailed\" id=${id}>\n           <img src=\"${personImg}\" class=\"person-image\" alt=\"person image\">\n            <h2 class=\"modal-name modal-title\">${name}</h2>\n            <p class=\"gender\"> <span class=\"modal-bold\"> Gender:</span> ${personGender}</p>\n            <p class=\"birthday\"> <span class=\"modal-bold\"> Born:</span> ${\n              birthday || 'unknown'\n            }</p>\n            <p class=\"place_of_birth\"> <span class=\"modal-bold\"> Place of birth:</span> ${\n              place_of_birth || 'unknown'\n            }</span>\n            <p class=\"known_for\"> <span class=\"modal-bold\"> Known for:</span> ${known_for_department}</p>\n            <p class=\"biography\"> <span class=\"modal-bold\">Bio:</span> ${\n              biography || 'no info'\n            }</p>\n            <p class=\"popularity\"> <span class=\"modal-bold\"> Popularity:</span> ${popularity}</span>\n          </div>`;\n\n  refs3.backdrop.classList.remove('is-hidden');\n  refs3.modalWrapper.innerHTML = markup;\n\n  refs3.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs3.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs3.modalWrapper.innerHTML = '';\n\n  refs3.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs3.backdrop.removeEventListener('click', onModalClose);\n  refs3.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n"],"names":["$bpxeT","parcelRequire","$a29f26a4a40c2f0a$var$API_KEY","$a29f26a4a40c2f0a$var$query","$a29f26a4a40c2f0a$var$currentPage","$a29f26a4a40c2f0a$var$currentSearchPage","$a29f26a4a40c2f0a$var$fetchTrendingPeople","key","url","currentPage1","$a29f26a4a40c2f0a$var$_fetchTrendingPeople","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","dataPeople","$dIxxU","default","get","concat","_ctx","sent","console","log","data","total_pages","$lG111","notifyEndResults","$a29f26a4a40c2f0a$var$trendingObserver","unobserve","$e9iRm","refs3","targetObserverPeople","results","t0","message","IntersectionObserver","entries","forEach","entry","isIntersecting","$4s6iC","URLS","BASE_PEOPLE_URL","then","$76fvS","renderTrendingPeople","root","rootMargin","threshold","$a29f26a4a40c2f0a$var$_searchByName","e","personData","_data","total_results","preventDefault","$a29f26a4a40c2f0a$var$searchObserver","targetObserverSearch","backdrop","classList","add","form","searchQuery","value","trim","peopleList","innerHTML","endResultsInfo","$e3qRy","searchPerson","SEARCH_PERSON_URL","length","$iR07C","renderFoundPerson","observe","remove","notifyNoResults","catch","err","addEventListener","dataFound","$a29f26a4a40c2f0a$var$_onPersonItemClick","targetElement","dataId","target","closest","getAttribute","$iKlHq","fetchSinglePerson","SINGLE_PERSON_URL","$6W5Ul","createPersonModalMarkup","peopleContainer","$a4d089102ee19eea$export$1667d6aa2cee11d8","document","querySelector","modalWrapper","closeBtn","$52b520831d0c27f6$export$1f3529df0466b8e9","people","trendingPeople","map","param","id","name","gender","known_for_department","profile_path","imageSrc","personGender","genders","join","insertAdjacentHTML","$db9d45747ac3d0d4$export$706c7750293f7a13","foundPerson","foundItems","$a3b62ede7df7fa7d$export$791a87ce43433885","page","$a3b62ede7df7fa7d$var$_searchPerson","$da5d5aed0ab69a80$export$bda05f064222d25a","$da5d5aed0ab69a80$var$_fetchSinglePerson","personDetails","$50ccbe03e1f09353$var$POSTER_URL","$50ccbe03e1f09353$var$DEFAULT_IMAGE","$50ccbe03e1f09353$export$9a7ad2d283fab89","$50ccbe03e1f09353$var$_createPersonModalMarkup","birthday","biography","place_of_birth","popularity","personImg","markup","$50ccbe03e1f09353$var$onBackdropClick","window","$50ccbe03e1f09353$var$onEscKeyPress","$50ccbe03e1f09353$var$onModalClose","removeEventListener","event","code","currentTarget"],"version":3,"file":"trendingpeople.1e839575.js.map"}