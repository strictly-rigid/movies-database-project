{"mappings":"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","sources":["src/js/TrendingSeries/fetchTrendingSeries.js","src/js/refs2.js","src/js/TrendingSeries/renderTrendingSeries.js","src/js/TrendingSeries/renderFoundSeries.js","src/js/TrendingSeries/searchSeries.js","src/js/TrendingSeries/fetchSingleSeries.js","src/js/helpers/createSeriesModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { renderTrendingSeries } from './renderTrendingSeries';\nimport { renderFoundSeries } from './renderFoundSeries';\nimport { searchSeries } from './searchSeries';\nimport { fetchSingleSeries } from './fetchSingleSeries';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const BASE_SERIES_URL = 'https://api.themoviedb.org/3/trending/tv/week';\n// const SEARCH_SERIES_URL = 'https://api.themoviedb.org/3/search/tv';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingSeries(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs2.targetObserverSeries);\n    }\n    const dataSeries = response.data.results;\n    return dataSeries;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage).then(\n        data => renderTrendingSeries(data)\n      );\n    }\n  });\n}\n\nfetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n  .then(data => renderTrendingSeries(data))\n  .then(() => trendingObserver.observe(refs2.targetObserverSeries))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs2.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs2.targetObserverSeries);\n  searchObserver.unobserve(refs2.targetObserverSearch);\n\n  refs2.backdrop.classList.add('is-hidden');\n  query = refs2.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs2.seriesList.innerHTML = '';\n    refs2.endResultsInfo.classList.add('visually-hidden');\n\n    const seriesData = await searchSeries(\n      API_KEY,\n      URLS.SEARCH_SERIES_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = seriesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundSeries(results);\n      searchObserver.observe(refs2.targetObserverSearch);\n    } else {\n      refs2.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      seriesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs2.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    refs2.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchSeries(\n        API_KEY,\n        URLS.SEARCH_SERIES_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundSeries(results);\n      });\n    }\n  });\n}\n\n/* ======================  SERIES' DETAILS ======================  */\n\nrefs2.seriesContainer.addEventListener('click', onSeriesItemClick);\n\nasync function onSeriesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.series-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleSeries(\n      API_KEY,\n      URLS.SINGLE_SERIES_URL,\n      dataId\n    );\n    createSeriesModalMarkup(data);\n  }\n}\n","export const refs2 = {\n  form: document.querySelector('.search-form-series'),\n  seriesContainer: document.querySelector('.series-data-container'),\n  seriesList: document.querySelector('.series-list'),\n  targetObserverSeries: document.querySelector('.js-guard-series'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.series-backdrop'),\n  modalWrapper: document.querySelector('.series-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-series'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs2 } from '../refs2.js';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport function renderTrendingSeries(series) {\n  console.log(series);\n  const trendingSeries = series\n    .map(\n      ({\n        id,\n        name,\n        overview,\n        vote_average,\n        poster_path,\n        first_air_date,\n      }) => `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n            <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n            <span class=\"series-rate\">Rating: ${vote_average.toFixed(2)}</span>\n            </div>\n          </li>`\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', trendingSeries);\n}\n","import { refs2 } from '../refs2';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundSeries(foundSeries) {\n  const foundItems = foundSeries\n    .map(\n      ({\n        id,\n        genre_ids,\n        name,\n        overview,\n        first_air_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n              <p class=\"series-genres\">Genres: ${genreNames || 'No data'}</p>\n                <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n                 <span class=\"series-rate\">Rating: ${vote_average.toFixed(\n                   2\n                 )}</span> \n                 <span class=\"series-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchSeries(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n","import axios from 'axios';\nlet isLoading = false;\n\nexport async function fetchSingleSeries(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const seriesMovies = response.data;\n    return seriesMovies;\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n","import { refs2 } from '../refs2';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createSeriesModalMarkup(data) {\n  const {\n    id,\n    created_by,\n    in_production,\n    languages,\n    genres,\n    origin_country,\n    name,\n    first_air_date,\n    number_of_seasons,\n    number_of_episodes,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languagesSpoken = languages.map(language => language).join(', ');\n  const creators = created_by.map(creator => creator.name).join(', ');\n\n  let markup = `<div class=\"series-item-detailed\" id=${id}>\n       <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${name}</h2>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n       \n        <p class=\"orig-country\"><span class=\"modal-bold\">Origin country:</span> ${origin_country}</p>\n        <p class=\"in-production\"><span class=\"modal-bold\">Still in production:</span> ${in_production}</p>\n      \n\n     \n        <p class=\"first-air-date\"><span class=\"modal-bold\">First air date:</span> ${first_air_date}</p>\n        <p class=\"modal-series-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n      \n        <p class=\"created-by\"><span class=\"modal-bold\">Creators:</span> ${creators}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languagesSpoken}</p>\n        <div class=\"series-length\">\n        <span class=\"seasons\"><span class=\"modal-bold\">Number of seasons:</span> ${number_of_seasons}</span>\n        <span class=\"episodes\"><span class=\"modal-bold\">Number of episodes:</span> ${number_of_episodes}</span>\n        </div>\n\n        <div class=\"series-modal-rate\">\n         <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n         <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n         </div>\n   \n      </div>`;\n\n  refs2.backdrop.classList.remove('is-hidden');\n  refs2.modalWrapper.innerHTML = markup;\n\n  refs2.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs2.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs2.modalWrapper.innerHTML = '';\n\n  refs2.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs2.backdrop.removeEventListener('click', onModalClose);\n  refs2.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n"],"names":["$bpxeT","parcelRequire","$f7f0efa6c7f437e8$export$dd54c2f2d692d36f","form","document","querySelector","seriesContainer","seriesList","targetObserverSeries","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$70471455671d24b4$export$3a1ca11763a591fc","series","console","log","trendingSeries","map","param","id","name","overview","vote_average","poster_path","first_air_date","concat","toFixed","join","insertAdjacentHTML","$39d3062942c19417$export$1035edcb0883cee","foundSeries","foundItems","genre_ids","vote_count","genreNames","genre","$4s6iC","genres","find","g","filter","Boolean","$39d3062942c19417$var$getGenres","$dbda837601adec74$export$87284bbc4af8de3","key","url","searchQuery","page","$dbda837601adec74$var$_searchSeries","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","default","get","_ctx","sent","t0","message","$6b848aded986c971$export$18d2d9a21124daea","$6b848aded986c971$var$_fetchSingleSeries","seriesMovies","data","$7bb17b9a23564351$var$POSTER_URL","$7bb17b9a23564351$export$6b84cf0fb22670f7","$7bb17b9a23564351$var$_createSeriesModalMarkup","created_by","in_production","languages","origin_country","number_of_seasons","number_of_episodes","languagesSpoken","creators","markup","language","creator","classList","remove","innerHTML","addEventListener","$7bb17b9a23564351$var$onBackdropClick","window","$7bb17b9a23564351$var$onEscKeyPress","$7bb17b9a23564351$var$onModalClose","add","removeEventListener","event","code","currentTarget","target","$4bd51fddaa51488b$var$API_KEY","$4bd51fddaa51488b$var$query","$4bd51fddaa51488b$var$currentPage","$4bd51fddaa51488b$var$currentSearchPage","$4bd51fddaa51488b$var$fetchTrendingSeries","currentPage1","$4bd51fddaa51488b$var$_fetchTrendingSeries","dataSeries","total_pages","$lG111","notifyEndResults","$4bd51fddaa51488b$var$trendingObserver","unobserve","results","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","URLS","BASE_SERIES_URL","then","root","rootMargin","threshold","$4bd51fddaa51488b$var$_searchByName","e","seriesData","_data","total_results","preventDefault","$4bd51fddaa51488b$var$searchObserver","value","trim","SEARCH_SERIES_URL","length","observe","notifyNoResults","catch","err","dataFound","$4bd51fddaa51488b$var$_onSeriesItemClick","targetElement","dataId","closest","getAttribute","SINGLE_SERIES_URL"],"version":3,"file":"trendingseries.973f19fd.js.map"}