{"mappings":"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","sources":["src/js/TrendingSeries/fetchTrendingSeries.js","src/js/refs2.js","src/js/TrendingSeries/renderTrendingSeries.js","src/js/TrendingSeries/renderFoundSeries.js","src/js/TrendingSeries/searchSeries.js","src/js/TrendingSeries/fetchSingleSeries.js","src/js/helpers/createSeriesModalMarkup.js"],"sourcesContent":["import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { renderTrendingSeries } from './renderTrendingSeries';\nimport { renderFoundSeries } from './renderFoundSeries';\nimport { searchSeries } from './searchSeries';\nimport { fetchSingleSeries } from './fetchSingleSeries';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nimport { notifyEndResults, notifyNoResults } from '../helpers/notifyWarnings';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const BASE_SERIES_URL = 'https://api.themoviedb.org/3/trending/tv/week';\n// const SEARCH_SERIES_URL = 'https://api.themoviedb.org/3/search/tv';\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isLoading = false;\n\n/* ====================== TRENDING ======================  */\n\nexport async function fetchTrendingSeries(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n    console.log(response);\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs2.targetObserverSeries);\n    }\n    const dataSeries = response.data.results;\n    return dataSeries;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage).then(\n        data => renderTrendingSeries(data)\n      );\n    }\n  });\n}\n\nfetchTrendingSeries(API_KEY, URLS.BASE_SERIES_URL, currentPage)\n  .then(data => renderTrendingSeries(data))\n  .then(() => trendingObserver.observe(refs2.targetObserverSeries))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\n\nrefs2.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs2.targetObserverSeries);\n  searchObserver.unobserve(refs2.targetObserverSearch);\n\n  refs2.backdrop.classList.add('is-hidden');\n  query = refs2.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs2.seriesList.innerHTML = '';\n    refs2.endResultsInfo.classList.add('visually-hidden');\n\n    const seriesData = await searchSeries(\n      API_KEY,\n      URLS.SEARCH_SERIES_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = seriesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundSeries(results);\n      searchObserver.observe(refs2.targetObserverSearch);\n    } else {\n      refs2.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      seriesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs2.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching person:', error.message);\n  } finally {\n    refs2.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchSeries(\n        API_KEY,\n        URLS.SEARCH_SERIES_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundSeries(results);\n      });\n    }\n  });\n}\n\n/* ======================  SERIES' DETAILS ======================  */\n\nrefs2.seriesContainer.addEventListener('click', onSeriesItemClick);\n\nasync function onSeriesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.series-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleSeries(\n      API_KEY,\n      URLS.SINGLE_SERIES_URL,\n      dataId\n    );\n    createSeriesModalMarkup(data);\n  }\n}\n","export const refs2 = {\n  form: document.querySelector('.search-form-series'),\n  seriesContainer: document.querySelector('.series-data-container'),\n  seriesList: document.querySelector('.series-list'),\n  targetObserverSeries: document.querySelector('.js-guard-series'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.series-backdrop'),\n  modalWrapper: document.querySelector('.series-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-series'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs2 } from '../refs2.js';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport function renderTrendingSeries(series) {\n  console.log(series);\n  const trendingSeries = series\n    .map(\n      ({\n        id,\n        name,\n        overview,\n        vote_average,\n        poster_path,\n        first_air_date,\n      }) => `<li class=\"series-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"series-poster\" alt=\"series poster\">\n            <div class=\"series-info\">\n            <h2 class=\"series-title\">${name}</h2>\n            <p class=\"series-description\">${overview}</p>\n            <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n            <span class=\"series-rate\">Rating: ${vote_average.toFixed(2)}</span>\n            </div>\n          </li>`\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', trendingSeries);\n}\n","import { refs2 } from '../refs2';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundSeries(foundSeries) {\n  const foundItems = foundSeries\n    .map(\n      ({\n        id,\n        genre_ids,\n        name,\n        overview,\n        first_air_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${name}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"series-premiere\">Premiere date: ${first_air_date}</p>\n                 <span class=\"movie-rate\">Rating: ${vote_average.toFixed(\n                   2\n                 )}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs2.seriesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\nimport { refs2 } from '../refs2.js';\n\nexport async function searchSeries(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending series:', error.message);\n  }\n}\n\n// import axios from 'axios';\n// import { refs2 } from '../refs2.js';\n\n// export async function searchSeries(key, url, searchQuery, renderFoundItems) {\n//   try {\n//     const response = await axios.get(\n//       `${url}?api_key=${key}&query=${searchQuery}`\n//     );\n//     console.log(response);\n//     const queryFoundSeries = response.data.results;\n//     if (queryFoundSeries) {\n//       refs2.seriesList.innerHTML = '';\n//     }\n\n//     renderFoundItems(queryFoundSeries);\n//   } catch (error) {\n//     console.log('Error fetching trending series:', error.message);\n//   }\n// }\n","import axios from 'axios';\nimport { refs2 } from '../refs2';\nimport { URLS } from '../constants';\nimport { createSeriesModalMarkup } from '../helpers/createSeriesModalMarkup';\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\nlet isLoading = false;\n\nexport async function fetchSingleSeries(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const seriesMovies = response.data;\n    return seriesMovies;\n  } catch (error) {\n    console.log('Error fetching series:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\n// if (refs2?.seriesContainer) {\n//   refs2.seriesContainer.addEventListener('click', onItemClick);\n// }\n\n// async function onItemClick(e) {\n//   e.preventDefault();\n//   console.log('Hellow from callback');\n//   const targetElement = e.target.closest('.series-item');\n//   if (targetElement) {\n//     const dataId = targetElement.getAttribute('data-id');\n//     const data = await fetchSingleSeries(\n//       API_KEY,\n//       URLS.SINGLE_SERIES_URL,\n//       dataId\n//     );\n//     createSeriesModalMarkup(data);\n//   }\n// }\n","import { refs2 } from '../refs2';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createSeriesModalMarkup(data) {\n  const {\n    id,\n    created_by,\n    in_production,\n    languages,\n    genres,\n    origin_country,\n    name,\n    first_air_date,\n    number_of_seasons,\n    number_of_episodes,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languagesSpoken = languages.map(language => language).join(', ');\n  const creators = created_by.map(creator => creator.name).join(', ');\n\n  let markup = `<div class=\"series-item-detailed\" id=${id}>\n       <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${name}</h2>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n       \n        <p class=\"orig-country\"><span class=\"modal-bold\">Origin country:</span> ${origin_country}</p>\n        <p class=\"in-production\"><span class=\"modal-bold\">Still in production:</span> ${in_production}</p>\n      \n\n     \n        <p class=\"first-air-date\"><span class=\"modal-bold\">First air date:</span> ${first_air_date}</p>\n        <p class=\"modal-series-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n      \n        <p class=\"created-by\"><span class=\"modal-bold\">Creators:</span> ${creators}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languagesSpoken}</p>\n        <div class=\"series-length\">\n        <span class=\"seasons\"><span class=\"modal-bold\">Number of seasons:</span> ${number_of_seasons}</span>\n        <span class=\"episodes\"><span class=\"modal-bold\">Number of episodes:</span> ${number_of_episodes}</span>\n        </div>\n\n        <div class=\"series-modal-rate\">\n         <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n         <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n         </div>\n   \n      </div>`;\n\n  refs2.backdrop.classList.remove('is-hidden');\n  refs2.modalWrapper.innerHTML = markup;\n\n  refs2.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs2.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs2.modalWrapper.innerHTML = '';\n\n  refs2.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs2.backdrop.removeEventListener('click', onModalClose);\n  refs2.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n"],"names":["$2shzp","parcelRequire","$c062f734705d647a$var$API_KEY","$c062f734705d647a$var$query","$c062f734705d647a$var$currentPage","$c062f734705d647a$var$currentSearchPage","$c062f734705d647a$var$isLoading","async","$c062f734705d647a$export$fd6d8660eb32605b","key","url","currentPage1","response","default","get","console","log","data","total_pages","$kj8Rd","notifyEndResults","$c062f734705d647a$var$trendingObserver","unobserve","$aNcKc","refs2","targetObserverSeries","results","error","message","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","$8G1wF","URLS","BASE_SERIES_URL","then","$gvMD9","renderTrendingSeries","root","rootMargin","threshold","observe","catch","err","form","addEventListener","e","preventDefault","$c062f734705d647a$var$searchObserver","targetObserverSearch","backdrop","classList","add","searchQuery","value","trim","seriesList","innerHTML","endResultsInfo","seriesData","$ch2Ak","searchSeries","SEARCH_SERIES_URL","total_results","length","$4bPF1","renderFoundSeries","remove","notifyNoResults","dataFound","seriesContainer","targetElement","target","closest","dataId","getAttribute","$jiT4K","fetchSingleSeries","SINGLE_SERIES_URL","$4WBqU","createSeriesModalMarkup","$7db85db93c52d1f5$export$dd54c2f2d692d36f","document","querySelector","modalWrapper","closeBtn","$c0554391f1171323$export$3a1ca11763a591fc","series","trendingSeries","map","id","name","overview","vote_average","poster_path","first_air_date","toFixed","join","insertAdjacentHTML","$30d0433790b6ea74$export$1035edcb0883cee","foundSeries","foundItems","genre_ids","vote_count","genreNames","genre","genres","find","g","filter","Boolean","$30d0433790b6ea74$var$getGenres","$8ef913dc6cce37c1$export$87284bbc4af8de3","page","$e0da6ba3a4786721$var$isLoading","$e0da6ba3a4786721$export$18d2d9a21124daea","$39999d9f05b7ce7b$export$6b84cf0fb22670f7","created_by","in_production","languages","origin_country","number_of_seasons","number_of_episodes","languagesSpoken","language","markup","creator","$39999d9f05b7ce7b$var$onBackdropClick","window","$39999d9f05b7ce7b$var$onEscKeyPress","$39999d9f05b7ce7b$var$onModalClose","removeEventListener","event","code","currentTarget"],"version":3,"file":"trendingseries.035cc927.js.map"}