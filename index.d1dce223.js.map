{"mappings":"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","sources":["src/index.js","src/js/refs.js","src/js/TrendingMovies/renderTrendingMovies.js","src/js/TrendingMovies/renderFoundMovies.js","src/js/TrendingMovies/searchMovie.js","src/js/TrendingMovies/fetchSingleMovie.js","src/js/helpers/createModalMarkup.js"],"sourcesContent":["import { refs } from './js/refs';\nimport axios from 'axios';\nimport { URLS } from './js/constants.js';\n\nimport { renderTrendingMovies } from './js/TrendingMovies/renderTrendingMovies.js';\nimport { renderFoundMovies } from './js/TrendingMovies/renderFoundMovies.js';\n\nimport { searchMovie } from './js/TrendingMovies/searchMovie.js';\nimport { fetchSingleMovie } from './js/TrendingMovies/fetchSingleMovie.js';\nimport { createModalMarkup } from './js/helpers/createModalMarkup.js';\nimport {\n  notifyEndResults,\n  notifyNoResults,\n} from './js/helpers/notifyWarnings.js';\n\nconst API_KEY = '86bcaf318e232372b2e8e2623c959f88';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\nlet query = '';\nlet currentPage = 1;\nlet currentSearchPage = 1;\nlet isSearching = false;\n\n/* ====================== TRENDING ======================  */\n\nasync function fetchTrendingMovies(key, url, currentPage) {\n  try {\n    isLoading = true;\n    const response = await axios.get(\n      `${url}?api_key=${key}&page=${currentPage}`\n    );\n\n    if (response.data.total_pages === currentSearchPage) {\n      notifyEndResults();\n      trendingObserver.unobserve(refs.targetObserverMovies);\n    }\n    const dataMovies = response.data.results;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\nconst trendingObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet trendingObserver = new IntersectionObserver(\n  onLoadMoreTrending,\n  trendingObserverOptions\n);\nfunction onLoadMoreTrending(entries, observer) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchTrendingMovies(API_KEY, URLS.BASE_MOVIES_URL, currentPage).then(\n        data => renderTrendingMovies(data)\n      );\n    }\n  });\n}\n\nfetchTrendingMovies(API_KEY, URLS.BASE_MOVIES_URL, currentPage)\n  .then(data => renderTrendingMovies(data))\n  .then(() => trendingObserver.observe(refs.targetObserverMovies))\n  .catch(err => console.log(err));\n\n/* ====================== SEARCH ======================  */\nrefs.form.addEventListener('submit', searchByName);\n\nasync function searchByName(e) {\n  e.preventDefault();\n\n  trendingObserver.unobserve(refs.targetObserverMovies);\n  searchObserver.unobserve(refs.targetObserverSearch);\n\n  refs.backdrop.classList.add('is-hidden');\n  query = refs.form.searchQuery.value.trim();\n  currentSearchPage = 1;\n\n  try {\n    refs.moviesList.innerHTML = '';\n    refs.endResultsInfo.classList.add('visually-hidden');\n\n    const moviesData = await searchMovie(\n      API_KEY,\n      URLS.SEARCH_MOVIE_URL,\n      query,\n      currentSearchPage\n    );\n\n    const { results, total_results } = moviesData.data;\n\n    if (results && results.length > 0) {\n      renderFoundMovies(results);\n      searchObserver.observe(refs.targetObserverSearch);\n    } else {\n      refs.endResultsInfo.classList.remove('visually-hidden');\n      notifyNoResults();\n    }\n\n    if (\n      total_results &&\n      total_results <= 20 &&\n      moviesData.data.total_pages === currentSearchPage\n    ) {\n      notifyEndResults();\n      searchObserver.unobserve(refs.targetObserverSearch);\n    }\n  } catch (error) {\n    console.log('Error fetching movies:', error.message);\n  } finally {\n    refs.form.searchQuery.value = '';\n  }\n}\n\nconst searchObserverOptions = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 1.0,\n};\n\nlet searchObserver = new IntersectionObserver(\n  onLoadMoreSearch,\n  searchObserverOptions\n);\n\nfunction onLoadMoreSearch(entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentSearchPage += 1;\n      searchMovie(\n        API_KEY,\n        URLS.SEARCH_MOVIE_URL,\n        query,\n        currentSearchPage\n      ).then(dataFound => {\n        const { results } = dataFound.data;\n        renderFoundMovies(results);\n      });\n    }\n  });\n}\n\n/* ======================  MOVIE'S DETAILS ======================  */\n\nrefs.moviesContainer.addEventListener('click', onMoviesItemClick);\n\nasync function onMoviesItemClick(e) {\n  e.preventDefault();\n\n  const targetElement = e.target.closest('.movies-item');\n  if (targetElement) {\n    const dataId = targetElement.getAttribute('data-id');\n    const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n    createModalMarkup(data);\n  }\n}\n\n// if (refs?.form) {\n//   refs.form.addEventListener('submit', e => {\n//     e.preventDefault();\n//     const query = refs.form.searchQuery.value.trim();\n\n//     if (query) {\n//       isSearching = true;\n//       searchMovie(API_KEY, SEARCH_MOVIE_URL, query, renderFoundMovies);\n//     } else {\n//       isSearching = false;\n//     }\n//   });\n// }\n\n// import { refs } from './js/refs';\n// import axios from 'axios';\n\n// import { URLS } from './js/constants.js';\n\n// import { fetchTrendingMovies } from './js/TrendingMovies/fetchTrendingMovies.js';\n// import { renderTrendingMovies } from './js/TrendingMovies/renderTrendingMovies.js';\n\n// import { searchMovie } from './js/TrendingMovies/searchMovie.js';\n// import { renderFoundMovies } from './js/TrendingMovies/renderFoundMovies.js';\n\n// const API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n// const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\n// const SEARCH_MOVIE_URL = 'https://api.themoviedb.org/3/search/movie';\n\n// let isSearching = false;\n\n// if (refs?.form) {\n//   refs.form.addEventListener('submit', e => {\n//     e.preventDefault();\n//     const query = refs.form.searchQuery.value.trim();\n\n//     if (query) {\n//       isSearching = true;\n//       searchMovie(API_KEY, SEARCH_MOVIE_URL, query, renderFoundMovies);\n//     } else {\n//       isSearching = false;\n//     }\n//   });\n// }\n","export const refs = {\n  form: document.querySelector('.search-form'),\n  moviesContainer: document.querySelector('.data-container'),\n  moviesList: document.querySelector('.movies-list'),\n  targetObserverMovies: document.querySelector('.js-guard-movies'),\n  targetObserverSearch: document.querySelector('.js-guard-search'),\n  backdrop: document.querySelector('.movies-backdrop'),\n  modalWrapper: document.querySelector('.movie-item-wrapper'),\n  endResultsInfo: document.querySelector('.no-results-info-movies'),\n  closeBtn: document.querySelector('.modal-close-btn'),\n};\n","import { refs } from '../refs';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderTrendingMovies(movies) {\n  const trendingMovies = movies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        vote_average,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n            <p class=\"movie-genres\">Genres: ${\n              genreNames || 'Sorry, no genres available'\n            }</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n          </div>\n     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', trendingMovies);\n}\n","import { refs } from '../refs';\nimport { genres } from '../constants';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nfunction getGenres(genre_ids) {\n  return genre_ids\n    .map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : '';\n    })\n    .filter(Boolean)\n    .join(', ');\n}\n\nexport function renderFoundMovies(foundMovies) {\n  const foundItems = foundMovies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        overview,\n        release_date,\n        vote_average,\n        vote_count,\n        poster_path,\n      }) => {\n        const genreNames = getGenres(genre_ids);\n\n        return `<li class=\"movies-item\" data-id=${id}>\n            <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n            <div class=\"movie-info\">\n            <h2 class=\"movie-title\">${original_title}</h2>\n            <p class=\"movie-description\">${overview}</p>\n              <p class=\"movie-genres\">Genres: ${\n                genreNames || 'Sorry, no genres available'\n              }</p>\n                <p class=\"movie-genres\">Release date: ${release_date}</p>\n            <span class=\"movie-rate\">Rating: ${vote_average.toFixed(2)}</span> \n                 <span class=\"movie-rate-count\">Total votes: ${vote_count}</span> \n          </div>     \n          </li>`;\n      }\n    )\n    .join('');\n\n  refs.moviesList.insertAdjacentHTML('beforeend', foundItems);\n}\n","import axios from 'axios';\n\nexport async function searchMovie(key, url, searchQuery, page) {\n  try {\n    const response = await axios.get(\n      `${url}?api_key=${key}&query=${searchQuery}&page=${page}`\n    );\n    // console.log(response);\n    return response;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n  }\n}\n","import axios from 'axios';\nlet isLoading = false;\n\nexport async function fetchSingleMovie(key, url, id) {\n  try {\n    isLoading = true;\n    const response = await axios.get(`${url}/${id}?api_key=${key}`);\n    console.log(response);\n    const dataMovies = response.data;\n    return dataMovies;\n  } catch (error) {\n    console.log('Error fetching a movie:', error.message);\n  } finally {\n    isLoading = false;\n  }\n}\n\n// import axios from 'axios';\n// import { refs } from '../refs';\n// import { URLS } from '../constants';\n// import { createModalMarkup } from '../helpers/createModalMarkup';\n// const API_KEY = '86bcaf318e232372b2e8e2623c959f88';\n\n// export async function fetchSingleMovie(key, url, id) {\n//   try {\n//     isLoading = true;\n//     const response = await axios.get(`${url}/${id}?api_key=${key}`);\n//     console.log(response);\n//     const dataMovies = response.data;\n//     return dataMovies;\n//   } catch (error) {\n//     console.log('Error fetching a movie:', error.message);\n//   } finally {\n//     isLoading = false;\n//   }\n// }\n\n// if (refs?.moviesContainer) {\n//   refs.moviesContainer.addEventListener('click', onModalOpen);\n// }\n\n// async function onModalOpen(e) {\n//   e.preventDefault();\n//   const targetElement = e.target.closest('.movies-item');\n//   if (targetElement) {\n//     const dataId = targetElement.getAttribute('data-id');\n//     const data = await fetchSingleMovie(API_KEY, URLS.SINGLE_MOVIE_URL, dataId);\n//     createModalMarkup(data);\n//     // window.addEventListener('keydown', onEscKeyPress);\n//     refs.backdrop.addEventListener('click', onBackdropClick);\n//   }\n// }\n\n// // function onEscKeyPress(event) {\n// //   if (event.code === 'Escape') {\n// //     onModalClose();\n// //   }\n// // }\n\n// function onBackdropClick(event) {\n//   if (event.currentTarget === event.target) {\n//     onModalClose();\n//   }\n// }\n\n// function onModalClose() {\n//   refs.modalWrapper.innerHTML = '';\n\n//   refs.backdrop.classList.toggle('is-hidden');\n//   // document.body.classList.remove('modal-open');\n\n//   // refs.backdrop.removeEventListener('click', onModalClose);\n//   // refs.closeBtn.removeEventListener('click', onModalClose);\n//   window.removeEventListener('keydown', onEscKeyPress);\n// }\n","import { refs } from '../refs';\n\nconst POSTER_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function createModalMarkup(data) {\n  const {\n    id,\n    budget,\n    genres,\n    origin_country,\n    title,\n    original_title,\n    release_date,\n    revenue,\n    runtime,\n    spoken_languages,\n    vote_average,\n    vote_count,\n    overview,\n    poster_path,\n  } = data;\n\n  const genreNames = genres.map(genre => genre.name).join(', ');\n  const languages = spoken_languages\n    .map(language => language.english_name)\n    .join(', ');\n\n  let markup = `<div class=\"movie-item-detailed\" id=${id}>\n        <img src=\"${POSTER_URL}${poster_path}\" class=\"movie-poster\" alt=\"movie poster\">\n        <h2 class=\"modal-title\">${title}</h2>\n        <h3 class=\"modal-original-title\"><span class=\"modal-bold\">Original title</span>: ${original_title}</h3>\n        <p class=\"modal-genres\"><span class=\"modal-bold\">Genres:</span> ${genreNames}</p>\n        <p class=\"orig-country\"><span class=\"modal-bold\">Country of origin:</span> ${origin_country}</p>\n        <p class=\"modal-release-date\"><span class=\"modal-bold\">Release date:</span> ${release_date}</p>\n        <p class=\"modal-movie-description\"><span class=\"modal-bold\">Desription:</span> ${overview}</p>\n        <p class=\"languages\"><span class=\"modal-bold\">Spoken languages:</span> ${languages}</p>\n        <span class=\"budget\"><span class=\"modal-bold\">Budget:</span> $${(\n          budget / 1000000\n        ).toFixed()} mln</span>\n        <span class=\"revenue\"><span class=\"modal-bold\">Revenue:</span> $${(\n          revenue / 1000000\n        ).toFixed()} mln</span>\n        <p class=\"runtime\"><span class=\"modal-bold\">Time:</span> ${runtime} minutes</p>\n        <span class=\"rating\"><span class=\"modal-bold\">Rating:</span> ${vote_average}</span>\n        <span class=\"vote-count\"><span class=\"modal-bold\">Total votes:</span> ${vote_count}</span>\n      </div>`;\n\n  refs.backdrop.classList.remove('is-hidden');\n  refs.modalWrapper.innerHTML = markup;\n\n  refs.backdrop.addEventListener('click', onBackdropClick);\n  window.addEventListener('keydown', onEscKeyPress);\n  refs.closeBtn.addEventListener('click', onModalClose);\n}\n\nfunction onModalClose() {\n  refs.modalWrapper.innerHTML = '';\n\n  refs.backdrop.classList.add('is-hidden');\n  // document.body.classList.remove('modal-open');\n\n  refs.backdrop.removeEventListener('click', onModalClose);\n  refs.closeBtn.removeEventListener('click', onModalClose);\n  window.removeEventListener('keydown', onEscKeyPress);\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onModalClose();\n  }\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onModalClose();\n  }\n}\n"],"names":["$bpxeT","parcelRequire","$37e33676934ad046$export$21666b427502ea6d","form","document","querySelector","moviesContainer","moviesList","targetObserverMovies","targetObserverSearch","backdrop","modalWrapper","endResultsInfo","closeBtn","$4bcacd1770b5f760$export$ae4a60d31ab53252","movies","trendingMovies","map","param","id","genre_ids","original_title","overview","vote_average","poster_path","genreNames","genre","$4s6iC","genres","find","g","name","filter","Boolean","join","$4bcacd1770b5f760$var$getGenres","concat","toFixed","insertAdjacentHTML","$1dd08296ea6f3ae9$export$e70f4eb8e1a081ef","foundMovies","foundItems","release_date","vote_count","$1dd08296ea6f3ae9$var$getGenres","$458a420dbe5c4a85$export$dd14e5c8db127693","key","url","searchQuery","page","$458a420dbe5c4a85$var$_searchMovie","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","default","get","_ctx","sent","console","log","t0","message","$27bd9ee829202bf4$export$7206e9da159570de","$27bd9ee829202bf4$var$_fetchSingleMovie","dataMovies","data","$a1904e15730cf304$var$POSTER_URL","$a1904e15730cf304$export$fc0ff788b21a7621","$a1904e15730cf304$var$_createModalMarkup","budget","origin_country","title","revenue","runtime","spoken_languages","languages","markup","language","english_name","classList","remove","innerHTML","addEventListener","$a1904e15730cf304$var$onBackdropClick","window","$a1904e15730cf304$var$onEscKeyPress","$a1904e15730cf304$var$onModalClose","add","removeEventListener","event","code","currentTarget","target","$b8f9b7833fa37166$var$API_KEY","$b8f9b7833fa37166$var$query","$b8f9b7833fa37166$var$currentPage","$b8f9b7833fa37166$var$currentSearchPage","$b8f9b7833fa37166$var$fetchTrendingMovies","currentPage1","$b8f9b7833fa37166$var$_fetchTrendingMovies","isLoading","total_pages","$lG111","notifyEndResults","$b8f9b7833fa37166$var$trendingObserver","unobserve","results","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","URLS","BASE_MOVIES_URL","then","root","rootMargin","threshold","$b8f9b7833fa37166$var$_searchByName","e","moviesData","_data","total_results","preventDefault","$b8f9b7833fa37166$var$searchObserver","value","trim","SEARCH_MOVIE_URL","length","observe","notifyNoResults","catch","err","dataFound","$b8f9b7833fa37166$var$_onMoviesItemClick","targetElement","dataId","closest","getAttribute","SINGLE_MOVIE_URL"],"version":3,"file":"index.d1dce223.js.map"}